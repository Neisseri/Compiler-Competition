--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef buf [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (number 
                                                (intConst 2))))))) ] [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (number 
                                                (intConst 100))))))) ]) ;))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp getarray ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal buf [ 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 0))))))) ])))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putarray ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal buf [ 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 1))))))) ])))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitVarDecl: int start
visitVarDecl: array dim_size=2
visitPrimaryExp_ number
visitPrimaryExp_ number
visitVarDecl: ident: buf
visitCompUnit: funcDef
construct funct block: main
visitExprStmt
visitCall ident: getarray
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitExprStmt
visitCall ident: putarray
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitVarDef int @buf
Info: var_def->indices->children.size() 2
Info: visitDims 2
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x5648ad79ba90
Info: visitDims 100
Info: visitExpr100
Info: visitIntLiteralExpr100
ret->type 0x5648ad7b3b50
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitStatementCall @getarray(@buf[0])
Info: visitExprStmtCall @getarray(@buf[0])
Info: visitExprCall @getarray(@buf[0])
Info: visiCalltExprCall @getarray(@buf[0])
Info: use of undeclared function getarray
Info: visitExpr@buf[0]
Info: visitLvalExpr@buf[0]
Info: lval->indices->children.size() 1
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x5648ad7ae1e0
Info: visitStatementCall @putarray(@buf[1])
Info: visitExprStmtCall @putarray(@buf[1])
Info: visitExprCall @putarray(@buf[1])
Info: visiCalltExprCall @putarray(@buf[1])
Info: use of undeclared function putarray
Info: visitExpr@buf[1]
Info: visitLvalExpr@buf[1]
Info: lval->indices->children.size() 1
Info: visitDims 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x5648ad7ae210
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x5648ad7b5c60
Info: visitReturnStmtReturn 0function has returnscope id1
ast: 
Program
  int @buf#0
  int @main()
    {
      Call @getarray
        @buf#0[0]
      Call @putarray
        @buf#0[1]
      Return 0
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visit decl global array
visitExpressionVal
visitExpressionVal
global array size: 200
visit decl global array done
visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue buf#0
visitIndex
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpressionLValue array ptr pass
visitStatement
visitExpression
visitExpression
visitExpressionLValue buf#0
visitIndex
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpressionLValue array ptr pass
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 17 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

ir:
; module
@buf#0 = global int [2,100], 800
define i32 @main(){
B0:
  %2 = loadaddr @buf#0
  %3 = 4
  %4 = 100
  %5 = mul i32 %3, %4
  %6 = 0
  %7 = mul i32 %6, %5
  %8 = add i32 %2, %7
  %1 = call i32 @getarray(i32 %8)
  %10 = loadaddr @buf#0
  %11 = 4
  %12 = 100
  %13 = mul i32 %11, %12
  %14 = 1
  %15 = mul i32 %14, %13
  %16 = add i32 %10, %15
  %9 = call i32 @putarray(i32 %16)
  %17 = 0
  ret i32 %17

}
--------------------------- building riscv ---------------------------
riscv: 
?
main
main
after compute reg_used
after prologue
end of emitend
