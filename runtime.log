--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef array [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (number 
                                                (intConst 1))))))) ]) ;))) 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef n) ;))) 
        (compUnitItem 
            (funcDef 
                (funcType void) init ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) n)) ) 
                (block { }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef t = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 1))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef a) , 
                                (varDef b) ;))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal t)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal t) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal t))))) - 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal n) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef i = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (number 
                                                                                (intConst 0))))))))) ;))) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef flag = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (number 
                                                                                (intConst 0))))))))) ;))) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp init ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal n)))))))) ))))) ;)) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef k = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (number 
                                                                                (intConst 17))))))))) ;))) 
                                    (blockItem 
                                        (stmt while ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal i)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 10))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal a) = 
                                                            (exp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal b) = 
                                                            (exp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 2))))))) ;)) 
                                                    (blockItem 
                                                        (stmt if ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (eqExp 
                                                                            (relExp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp ! 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal flag))))))))))) ) 
                                                            (stmt 
                                                                (block { 
                                                                    (blockItem 
                                                                        (decl 
                                                                            (varDecl 
                                                                                (bType int) 
                                                                                (varDef loc = 
                                                                                    (initVal 
                                                                                        (exp 
                                                                                            (addExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal n)))) * 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp ( 
                                                                                                                (exp 
                                                                                                                    (addExp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal a))))) - 
                                                                                                                        (mulExp 
                                                                                                                            (unaryExp 
                                                                                                                                (primaryExp 
                                                                                                                                    (number 
                                                                                                                                        (intConst 1))))))) ))))) + 
                                                                                                (mulExp 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (lVal b)))))))) ;))) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (lAndExp 
                                                                                            (lAndExp 
                                                                                                (eqExp 
                                                                                                    (eqExp 
                                                                                                        (relExp 
                                                                                                            (addExp 
                                                                                                                (mulExp 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (lVal array [ 
                                                                                                                                (exp 
                                                                                                                                    (addExp 
                                                                                                                                        (mulExp 
                                                                                                                                            (unaryExp 
                                                                                                                                                (primaryExp 
                                                                                                                                                    (number 
                                                                                                                                                        (intConst 0))))))) ]))))))) != 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp - 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (number 
                                                                                                                                (intConst 1)))))))))) && 
                                                                                            (eqExp 
                                                                                                (eqExp 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (lVal array [ 
                                                                                                                            (exp 
                                                                                                                                (addExp 
                                                                                                                                    (mulExp 
                                                                                                                                        (unaryExp 
                                                                                                                                            (primaryExp 
                                                                                                                                                (lVal k)))))) ]))))))) != 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp - 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (number 
                                                                                                                            (intConst 1)))))))))) && 
                                                                                        (eqExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (number 
                                                                                                                        (intConst 0)))))))) == 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (lVal k)))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (lVal flag) = 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (number 
                                                                                                                    (intConst 1))))))) ;)) 
                                                                                    (blockItem 
                                                                                        (decl 
                                                                                            (varDecl 
                                                                                                (bType int) 
                                                                                                (varDef tmp = 
                                                                                                    (initVal 
                                                                                                        (exp 
                                                                                                            (addExp 
                                                                                                                (addExp 
                                                                                                                    (mulExp 
                                                                                                                        (unaryExp 
                                                                                                                            (primaryExp 
                                                                                                                                (lVal i))))) + 
                                                                                                                (mulExp 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (number 
                                                                                                                                (intConst 1))))))))) ;))) })))) })))) 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal i) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal i))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) })))) 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp ! 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal flag))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (exp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp putint ( 
                                                                            (funcRParams 
                                                                                (funcRParam 
                                                                                    (exp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp - 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (number 
                                                                                                                (intConst 1)))))))))) ))))) ;)) })))) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitVarDecl: int start
visitVarDecl: array dim_size=1
visitPrimaryExp_ number
visitVarDecl: ident: array
visitVarDecl: int start
visitVarDecl: ident: n
visitCompUnit: funcDef
construct funct block: init
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: t
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: a
visitVarDecl: ident: b
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: i
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: flag
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitExprStmt
visitCall ident: init
visitFuncRParams
visitCall args_list size: 1
visitVarDecl: int start
visitVarDecl: ident: k
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: loc
visitVarDecl: initVal
visitInit
visitPrimaryExp_ exp
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: tmp
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitBlock done!
visitBlock done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visit block stmt
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitBlock done!
visitBlock done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitVarDef i32 @array[1]
Info: var_def->indices->children.size() 1
Info: visitDims 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38f0a0
Info: visitVarDef i32 @n
Info: visitFuncDefvoid @init(i32 @n)
Info: visitParamDefi32 @n
Info: visitBlock
Info: function init has no returnscope id1
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitVarDef i32 @t = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38f2d0
Info: visitVarDef i32 @a
Info: visitVarDef i32 @b
Info: visitStatementWhile
Info: visitExpr@t
Info: visitLvalExpr@t
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@t = @t-1
Info: visitAssignStmtAssign@t = @t-1
Info: visitExpr@t
Info: visitLvalExpr@t
Info: visitAssignStmti32
Info: visitExpr@t-1
Info: visitBinopExpr@t-1
Info: visitExpr@t
Info: visitLvalExpr@t
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38f120
Info: visitStatementAssign@n = 1
Info: visitAssignStmtAssign@n = 1
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitAssignStmti32
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38f390
Info: visitVarDef i32 @i = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f1fe38f550
Info: visitVarDef i32 @flag = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f1fe38f630
Info: visitStatementCall @init(@n)
Info: visitExprStmtCall @init(@n)
Info: visitExprCall @init(@n)
Info: visiCalltExprCall @init(@n)
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitVarDef i32 @k = 17
Info: visitExpr17
Info: visitAssignmentExpr17
Info: visitExpr17
Info: visitIntLiteralExpr17
ret->type 0x55f1fe38f710
Info: visitStatementWhile
Info: visitExpr@i<10
Info: visitBinopExpr@i<10
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55f1fe38f7f0
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@a = 1
Info: visitAssignStmtAssign@a = 1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmti32
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38f8c0
Info: visitStatementAssign@b = 2
Info: visitAssignStmtAssign@b = 2
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmti32
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55f1fe38f8f0
Info: visitStatementIfElse
Info: visitExpr!@flag
Info: visitUnonExpr!@flag
Info: visitExpr@flag
Info: visitLvalExpr@flag
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @loc = @n*@a-1+@b
Info: visitExpr@n*@a-1+@b
Info: visitAssignmentExpr@n*@a-1+@b
Info: visitExpr@n*@a-1+@b
Info: visitBinopExpr@n*@a-1+@b
Info: visitExpr@n*@a-1
Info: visitBinopExpr@n*@a-1
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr@a-1
Info: visitBinopExpr@a-1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38f920
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitStatementIfElse
Info: visitExpr@array[0]!=-1&&@array[@k]!=-1&&0==@k
Info: visitBinopExpr@array[0]!=-1&&@array[@k]!=-1&&0==@k
Info: visitExpr@array[0]!=-1&&@array[@k]!=-1
Info: visitBinopExpr@array[0]!=-1&&@array[@k]!=-1
Info: visitExpr@array[0]!=-1
Info: visitBinopExpr@array[0]!=-1
Info: visitExpr@array[0]
Info: visitLvalExpr@array[0]
Info: lval->indices->children.size() 1
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f1fe38fa50
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38fad0
Info: visitExpr@array[@k]!=-1
Info: visitBinopExpr@array[@k]!=-1
Info: visitExpr@array[@k]
Info: visitLvalExpr@array[@k]
Info: lval->indices->children.size() 1
Info: visitDims @k
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38fb00
Info: visitExpr0==@k
Info: visitBinopExpr0==@k
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f1fe38fb30
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@flag = 1
Info: visitAssignStmtAssign@flag = 1
Info: visitExpr@flag
Info: visitLvalExpr@flag
Info: visitAssignStmti32
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38fb60
Info: visitVarDef i32 @tmp = @i+1
Info: visitExpr@i+1
Info: visitAssignmentExpr@i+1
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38fb90
Info: visitStatementAssign@i = @i+1
Info: visitAssignStmtAssign@i = @i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmti32
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38fc20
Info: visitStatementIfElse
Info: visitExpr!@flag
Info: visitUnonExpr!@flag
Info: visitExpr@flag
Info: visitLvalExpr@flag
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @putint(-1)
Info: visitExprStmtCall @putint(-1)
Info: visitExprCall @putint(-1)
Info: visiCalltExprCall @putint(-1)
Info: use of undeclared function putint
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f1fe38fc50
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f1fe38fc80
Info: visitReturnStmtReturn 0function has returnscope id3
ast: 
Program
  i32 @array#0[1]
  i32 @n#0
  void @init(i32 @n#1)
    {
      Return 0
    }
  i32 @main()
    {
      i32 @t#4 = 1
      i32 @a#4
      i32 @b#4
      While        @t#4        {
          Assign@t#4 = @t#4-1
          Assign@n#0 = 1
          i32 @i#6 = 0
          i32 @flag#6 = 0
          Call @init            @n#0
          i32 @k#6 = 17
          While            @i#6<10
            {
              Assign@a#4 = 1
              Assign@b#4 = 2
              If                !@flag#6
                {
                  i32 @loc#9 = @n#0*@a#4-1+@b#4
                  If                    @array#0[0]!=-1&&@array#0[@k#6]!=-1&&0==@k#6
                    {
                      Assign@flag#6 = 1
                      i32 @tmp#10 = @i#6+1
                    }
                }
              Assign@i#6 = @i#6+1
            }
          If            !@flag#6
            {
              Call @putint                -1
            }
        }
      Return 0
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visit decl global array
visitExpressionVal
global array size: 1
visit decl global array done
visit decl global var
visit decl global var done
visitFunction init
visitFunction param decl: n#1
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function init has 3 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionLValue t#4
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue t#4
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#6
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue flag#6
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpression
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpression
visitExpressionLValue a#4
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionLValue b#4
visitStatement
visitExpression
visitExpression
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpressionLValue k#6
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionLValue k#6
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpression
visitExpressionLValue i#6
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#6
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue flag#6
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 81 regs
B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B23 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 B11 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 
  succ: B21 
B9:
  prev: B7 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 B20 
  succ: B6 
B12:
  prev: B10 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B15 
B14:
  prev: B12 
  succ: B15 
B15:
  prev: B13 B14 
  succ: B16 B17 
B16:
  prev: B15 
  succ: B18 
B17:
  prev: B15 
  succ: B18 
B18:
  prev: B16 B17 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B20 
B20:
  prev: B18 B19 
  succ: B11 
B21:
  prev: B8 
  succ: B22 B23 
B22:
  prev: B21 
  succ: B23 
B23:
  prev: B21 B22 
  succ: B3 
B24:
  prev: 
  succ: 

B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B23 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 B11 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 
  succ: B21 
B9:
  prev: B7 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 B20 
  succ: B6 
B12:
  prev: B10 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B15 
B14:
  prev: B12 
  succ: B15 
B15:
  prev: B13 B14 
  succ: B16 B17 
B16:
  prev: B15 
  succ: B18 
B17:
  prev: B15 
  succ: B18 
B18:
  prev: B16 B17 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B20 
B20:
  prev: B18 B19 
  succ: B11 
B21:
  prev: B8 
  succ: B22 B23 
B22:
  prev: B21 
  succ: B23 
B23:
  prev: B21 B22 
  succ: B3 

entryB2
B3
B4
B5
B6
B7
B8
B9
B10
B11
B12
B13
B14
B15
B16
B17
B18
B19
B20
B21
B22
B23
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB8
reverse_postorderB21
reverse_postorderB22
reverse_postorderB23
reverse_postorderB7
reverse_postorderB9
reverse_postorderB10
reverse_postorderB12
reverse_postorderB14
reverse_postorderB13
reverse_postorderB15
reverse_postorderB17
reverse_postorderB16
reverse_postorderB18
reverse_postorderB19
reverse_postorderB20
reverse_postorderB11
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB8
reverse_postorderB21
reverse_postorderB22
reverse_postorderB23
reverse_postorderB7
reverse_postorderB9
reverse_postorderB10
reverse_postorderB12
reverse_postorderB14
reverse_postorderB13
reverse_postorderB15
reverse_postorderB17
reverse_postorderB16
reverse_postorderB18
reverse_postorderB19
reverse_postorderB20
reverse_postorderB11
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B6 func: main
compute_dom_fro bb: B6 func: main
compute_dom_fro bb: B6 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B15 func: main
compute_dom_fro bb: B15 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B20 func: main
compute_dom_fro bb: B23 func: main
B2:
  doms: B3 
  domed_by: B2 
B3:
  doms: B4 B5 
  domed_by: B2 B3 
B4:
  doms: B6 
  domed_by: B2 B3 B4 
B5:
  doms: 
  domed_by: B2 B3 B5 
B6:
  doms: B7 B8 
  domed_by: B2 B3 B4 B6 
B7:
  doms: B9 
  domed_by: B2 B3 B4 B6 B7 
B8:
  doms: B21 
  domed_by: B2 B3 B4 B6 B8 
B9:
  doms: B10 B11 
  domed_by: B2 B3 B4 B6 B7 B9 
B10:
  doms: B12 
  domed_by: B2 B3 B4 B6 B7 B9 B10 
B11:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B11 
B12:
  doms: B13 B14 B15 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 
B13:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B13 
B14:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B14 
B15:
  doms: B16 B17 B18 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 
B16:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B16 
B17:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B17 
B18:
  doms: B19 B20 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B18 
B19:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B18 B19 
B20:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B18 B20 
B21:
  doms: B22 B23 
  domed_by: B2 B3 B4 B6 B8 B21 
B22:
  doms: 
  domed_by: B2 B3 B4 B6 B8 B21 B22 
B23:
  doms: 
  domed_by: B2 B3 B4 B6 B8 B21 B23 

B2:
  DF: 
B3:
  DF: 
B4:
  DF: B3 
B5:
  DF: 
B6:
  DF: B3 
B7:
  DF: B6 
B8:
  DF: B3 
B9:
  DF: B6 
B10:
  DF: B11 
B11:
  DF: B6 
B12:
  DF: B11 
B13:
  DF: B15 
B14:
  DF: B15 
B15:
  DF: B11 
B16:
  DF: B18 
B17:
  DF: B18 
B18:
  DF: B11 
B19:
  DF: B20 
B20:
  DF: B11 
B21:
  DF: B3 
B22:
  DF: B23 
B23:
  DF: B3 

ir_origin:
; module
@array = global i32, i32 4
@n = global i32, i32 4
define i32 @main(){
B2:
  %r1 = alloca i32, i32 4
  %r2 = add i32 0, 1 ; loadint
  store t#4 i32 %r2, ptr %r1
  %r3 = alloca i32, i32 4
  %r4 = alloca i32, i32 4
  br label %B3

B3:
  %r5 = load t#4 i32, ptr %r1
  br i1 %r5, label %B4, label %B5

B4:
  %r6 = load t#4 i32, ptr %r1
  %r7 = add i32 0, 1 ; loadint
  %r8 = sub i32 %r6, %r7
  store t#4 i32 %r8, ptr %r1
  %r9 = add i32 0, 1 ; loadint
  %r10 = loadaddr @n#0
  store n#0 i32 %r9, ptr %r10
  %r11 = alloca i32, i32 4
  %r12 = add i32 0, 0 ; loadint
  store i#6 i32 %r12, ptr %r11
  %r13 = alloca i32, i32 4
  %r14 = add i32 0, 0 ; loadint
  store flag#6 i32 %r14, ptr %r13
  %r16 = loadaddr @n#0
  %r17 = load n#0 i32, ptr %r16
  %r15 = call i32 @init(i32 %r17)
  %r18 = alloca i32, i32 4
  %r19 = add i32 0, 17 ; loadint
  store k#6 i32 %r19, ptr %r18
  br label %B6

B5:
  %r81 = add i32 0, 0 ; loadint
  ret i32 %r81

B6:
  %r20 = load i#6 i32, ptr %r11
  %r21 = add i32 0, 10 ; loadint
  %r22 = icmp slt i32 %r20, %r21
  br i1 %r22, label %B7, label %B8

B7:
  %r23 = add i32 0, 1 ; loadint
  store a#4 i32 %r23, ptr %r3
  %r24 = add i32 0, 2 ; loadint
  store b#4 i32 %r24, ptr %r4
  br label %B9

B8:
  br label %B21

B9:
  %r25 = load flag#6 i32, ptr %r13
  %r27 = add i32 0, 0 ; loadint
  %r26 = icmp eq i32 %r27, %r25
  br i1 %r26, label %B10, label %B11

B10:
  %r28 = alloca i32, i32 4
  %r29 = loadaddr @n#0
  %r30 = load n#0 i32, ptr %r29
  %r31 = load a#4 i32, ptr %r3
  %r32 = add i32 0, 1 ; loadint
  %r33 = sub i32 %r31, %r32
  %r34 = mul i32 %r30, %r33
  %r35 = load b#4 i32, ptr %r4
  %r36 = add i32 %r34, %r35
  store loc#9 i32 %r36, ptr %r28
  br label %B12

B11:
  %r71 = load i#6 i32, ptr %r11
  %r72 = add i32 0, 1 ; loadint
  %r73 = add i32 %r71, %r72
  store i#6 i32 %r73, ptr %r11
  br label %B6

B12:
  %r37 = alloca i32, i32 4
  %r38 = alloca i32, i32 4
  %r39 = loadaddr @array#0
  %r40 = add i32 0, 4 ; loadint
  %r41 = add i32 0, 0 ; loadint
  %r42 = mul i32 %r41, %r40
  %r43 = add i32 %r39, %r42
  %r44 = load array#0 i32, ptr %r43
  %r45 = add i32 0, 1 ; loadint
  %r47 = add i32 0, 0 ; loadint
  %r46 = sub i32 %r47, %r45
  %r48 = icmp ne i32 %r44, %r46
  br i1 %r48, label %B13, label %B14

B13:
  %r49 = loadaddr @array#0
  %r50 = add i32 0, 4 ; loadint
  %r51 = load k#6 i32, ptr %r18
  %r52 = mul i32 %r51, %r50
  %r53 = add i32 %r49, %r52
  %r54 = load array#0 i32, ptr %r53
  %r55 = add i32 0, 1 ; loadint
  %r57 = add i32 0, 0 ; loadint
  %r56 = sub i32 %r57, %r55
  %r58 = icmp ne i32 %r54, %r56
  store logic_expr@#38 i32 %r58, ptr %r38
  br label %B15

B14:
  %r59 = add i32 0, 0 ; loadint
  store logic_expr@#38 i32 %r59, ptr %r38
  br label %B15

B15:
  %r60 = load logic_expr@#38 i32, ptr %r38
  br i1 %r60, label %B16, label %B17

B16:
  %r61 = add i32 0, 0 ; loadint
  %r62 = load k#6 i32, ptr %r18
  %r63 = icmp eq i32 %r61, %r62
  store logic_expr@#37 i32 %r63, ptr %r37
  br label %B18

B17:
  %r64 = add i32 0, 0 ; loadint
  store logic_expr@#37 i32 %r64, ptr %r37
  br label %B18

B18:
  %r65 = load logic_expr@#37 i32, ptr %r37
  br i1 %r65, label %B19, label %B20

B19:
  %r66 = add i32 0, 1 ; loadint
  store flag#6 i32 %r66, ptr %r13
  %r67 = alloca i32, i32 4
  %r68 = load i#6 i32, ptr %r11
  %r69 = add i32 0, 1 ; loadint
  %r70 = add i32 %r68, %r69
  store tmp#10 i32 %r70, ptr %r67
  br label %B20

B20:
  br label %B11

B21:
  %r74 = load flag#6 i32, ptr %r13
  %r76 = add i32 0, 0 ; loadint
  %r75 = icmp eq i32 %r76, %r74
  br i1 %r75, label %B22, label %B23

B22:
  %r78 = add i32 0, 1 ; loadint
  %r80 = add i32 0, 0 ; loadint
  %r79 = sub i32 %r80, %r78
  %r77 = call i32 @putint(i32 %r79)
  br label %B23

B23:
  br label %B3

}
define void @init(i32 %r1){
B0:
  %r2 = alloca i32, i32 4
  store n#1 i32 %r1, ptr %r2
  %r3 = add i32 0, 0 ; loadint
  ret i32 %r3

}
---------------------------------ir after mem2reg-------------------------------------
; module
@array = global i32, i32 4
@n = global i32, i32 4
define i32 @main(){
B2:
  %r2 = add i32 0, 1 ; loadint
  br label %B3

B3:
  %r108 = phi tmp#10 i32 [ %r107, %B23 ]
  %r104 = phi t#4 i32 [ %r2, %B2 ], [ %r8, %B23 ]
  %r103 = phi logic_expr@#38 i32 [ %r102, %B23 ]
  %r99 = phi logic_expr@#37 i32 [ %r98, %B23 ]
  %r95 = phi loc#9 i32 [ %r94, %B23 ]
  %r92 = phi k#6 i32 [ %r19, %B23 ]
  %r90 = phi i#6 i32 [ %r91, %B23 ]
  %r86 = phi flag#6 i32 [ %r89, %B23 ]
  %r85 = phi b#4 i32 [ %r84, %B23 ]
  %r83 = phi a#4 i32 [ %r82, %B23 ]
  br i1 %r104, label %B4, label %B5

B4:
  %r7 = add i32 0, 1 ; loadint
  %r8 = sub i32 %r104, %r7
  %r9 = add i32 0, 1 ; loadint
  %r10 = loadaddr @n#0
  store n#0 i32 %r9, ptr %r10
  %r12 = add i32 0, 0 ; loadint
  %r14 = add i32 0, 0 ; loadint
  %r16 = loadaddr @n#0
  %r17 = load n#0 i32, ptr %r16
  %r15 = call i32 @init(i32 %r17)
  %r19 = add i32 0, 17 ; loadint
  br label %B6

B5:
  %r81 = add i32 0, 0 ; loadint
  ret i32 %r81

B6:
  %r107 = phi tmp#10 i32 [ %r108, %B4 ], [ %r106, %B11 ]
  %r102 = phi logic_expr@#38 i32 [ %r103, %B4 ], [ %r101, %B11 ]
  %r98 = phi logic_expr@#37 i32 [ %r99, %B4 ], [ %r97, %B11 ]
  %r94 = phi loc#9 i32 [ %r95, %B4 ], [ %r93, %B11 ]
  %r91 = phi i#6 i32 [ %r12, %B4 ], [ %r73, %B11 ]
  %r89 = phi flag#6 i32 [ %r14, %B4 ], [ %r88, %B11 ]
  %r84 = phi b#4 i32 [ %r85, %B4 ], [ %r24, %B11 ]
  %r82 = phi a#4 i32 [ %r83, %B4 ], [ %r23, %B11 ]
  %r21 = add i32 0, 10 ; loadint
  %r22 = icmp slt i32 %r91, %r21
  br i1 %r22, label %B7, label %B8

B7:
  %r23 = add i32 0, 1 ; loadint
  %r24 = add i32 0, 2 ; loadint
  br label %B9

B8:
  br label %B21

B9:
  %r27 = add i32 0, 0 ; loadint
  %r26 = icmp eq i32 %r27, %r89
  br i1 %r26, label %B10, label %B11

B10:
  %r29 = loadaddr @n#0
  %r30 = load n#0 i32, ptr %r29
  %r32 = add i32 0, 1 ; loadint
  %r33 = sub i32 %r23, %r32
  %r34 = mul i32 %r30, %r33
  %r36 = add i32 %r34, %r24
  br label %B12

B11:
  %r106 = phi tmp#10 i32 [ %r107, %B9 ], [ %r105, %B20 ]
  %r101 = phi logic_expr@#38 i32 [ %r102, %B9 ], [ %r100, %B20 ]
  %r97 = phi logic_expr@#37 i32 [ %r98, %B9 ], [ %r96, %B20 ]
  %r93 = phi loc#9 i32 [ %r94, %B9 ], [ %r36, %B20 ]
  %r88 = phi flag#6 i32 [ %r89, %B9 ], [ %r87, %B20 ]
  %r72 = add i32 0, 1 ; loadint
  %r73 = add i32 %r91, %r72
  br label %B6

B12:
  %r39 = loadaddr @array#0
  %r40 = add i32 0, 4 ; loadint
  %r41 = add i32 0, 0 ; loadint
  %r42 = mul i32 %r41, %r40
  %r43 = add i32 %r39, %r42
  %r44 = load array#0 i32, ptr %r43
  %r45 = add i32 0, 1 ; loadint
  %r47 = add i32 0, 0 ; loadint
  %r46 = sub i32 %r47, %r45
  %r48 = icmp ne i32 %r44, %r46
  br i1 %r48, label %B13, label %B14

B13:
  %r49 = loadaddr @array#0
  %r50 = add i32 0, 4 ; loadint
  %r52 = mul i32 %r19, %r50
  %r53 = add i32 %r49, %r52
  %r54 = load array#0 i32, ptr %r53
  %r55 = add i32 0, 1 ; loadint
  %r57 = add i32 0, 0 ; loadint
  %r56 = sub i32 %r57, %r55
  %r58 = icmp ne i32 %r54, %r56
  br label %B15

B14:
  %r59 = add i32 0, 0 ; loadint
  br label %B15

B15:
  %r100 = phi logic_expr@#38 i32 [ %r58, %B13 ], [ %r59, %B14 ]
  br i1 %r100, label %B16, label %B17

B16:
  %r61 = add i32 0, 0 ; loadint
  %r63 = icmp eq i32 %r61, %r19
  br label %B18

B17:
  %r64 = add i32 0, 0 ; loadint
  br label %B18

B18:
  %r96 = phi logic_expr@#37 i32 [ %r63, %B16 ], [ %r64, %B17 ]
  br i1 %r96, label %B19, label %B20

B19:
  %r66 = add i32 0, 1 ; loadint
  %r69 = add i32 0, 1 ; loadint
  %r70 = add i32 %r91, %r69
  br label %B20

B20:
  %r105 = phi tmp#10 i32 [ %r107, %B18 ], [ %r70, %B19 ]
  %r87 = phi flag#6 i32 [ %r89, %B18 ], [ %r66, %B19 ]
  br label %B11

B21:
  %r76 = add i32 0, 0 ; loadint
  %r75 = icmp eq i32 %r76, %r89
  br i1 %r75, label %B22, label %B23

B22:
  %r78 = add i32 0, 1 ; loadint
  %r80 = add i32 0, 0 ; loadint
  %r79 = sub i32 %r80, %r78
  %r77 = call i32 @putint(i32 %r79)
  br label %B23

B23:
  br label %B3

}
define void @init(i32 %r1){
B0:
  %r3 = add i32 0, 0 ; loadint
  ret i32 %r3

}
---------------------------------ir -------------------------------------
; module
@array = global i32, i32 4
@n = global i32, i32 4
define i32 @main(){
B2:
  %r2 = add i32 0, 1 ; loadint
  br label %B3

B3:
  %r108 = phi tmp#10 i32 [ %r107, %B23 ]
  %r104 = phi t#4 i32 [ %r2, %B2 ], [ %r8, %B23 ]
  %r103 = phi logic_expr@#38 i32 [ %r102, %B23 ]
  %r99 = phi logic_expr@#37 i32 [ %r98, %B23 ]
  %r95 = phi loc#9 i32 [ %r94, %B23 ]
  %r92 = phi k#6 i32 [ %r19, %B23 ]
  %r90 = phi i#6 i32 [ %r91, %B23 ]
  %r86 = phi flag#6 i32 [ %r89, %B23 ]
  %r85 = phi b#4 i32 [ %r84, %B23 ]
  %r83 = phi a#4 i32 [ %r82, %B23 ]
  br i1 %r104, label %B4, label %B5

B4:
  %r7 = add i32 0, 1 ; loadint
  %r8 = sub i32 %r104, %r7
  %r9 = add i32 0, 1 ; loadint
  %r10 = loadaddr @n#0
  store n#0 i32 %r9, ptr %r10
  %r12 = add i32 0, 0 ; loadint
  %r14 = add i32 0, 0 ; loadint
  %r16 = loadaddr @n#0
  %r17 = load n#0 i32, ptr %r16
  %r15 = call i32 @init(i32 %r17)
  %r19 = add i32 0, 17 ; loadint
  br label %B6

B5:
  %r81 = add i32 0, 0 ; loadint
  ret i32 %r81

B6:
  %r107 = phi tmp#10 i32 [ %r108, %B4 ], [ %r106, %B11 ]
  %r102 = phi logic_expr@#38 i32 [ %r103, %B4 ], [ %r101, %B11 ]
  %r98 = phi logic_expr@#37 i32 [ %r99, %B4 ], [ %r97, %B11 ]
  %r94 = phi loc#9 i32 [ %r95, %B4 ], [ %r93, %B11 ]
  %r91 = phi i#6 i32 [ %r12, %B4 ], [ %r73, %B11 ]
  %r89 = phi flag#6 i32 [ %r14, %B4 ], [ %r88, %B11 ]
  %r84 = phi b#4 i32 [ %r85, %B4 ], [ %r24, %B11 ]
  %r82 = phi a#4 i32 [ %r83, %B4 ], [ %r23, %B11 ]
  %r21 = add i32 0, 10 ; loadint
  %r22 = icmp slt i32 %r91, %r21
  br i1 %r22, label %B7, label %B8

B7:
  %r23 = add i32 0, 1 ; loadint
  %r24 = add i32 0, 2 ; loadint
  br label %B9

B8:
  br label %B21

B9:
  %r27 = add i32 0, 0 ; loadint
  %r26 = icmp eq i32 %r27, %r89
  br i1 %r26, label %B10, label %B11

B10:
  %r29 = loadaddr @n#0
  %r30 = load n#0 i32, ptr %r29
  %r32 = add i32 0, 1 ; loadint
  %r33 = sub i32 %r23, %r32
  %r34 = mul i32 %r30, %r33
  %r36 = add i32 %r34, %r24
  br label %B12

B11:
  %r106 = phi tmp#10 i32 [ %r107, %B9 ], [ %r105, %B20 ]
  %r101 = phi logic_expr@#38 i32 [ %r102, %B9 ], [ %r100, %B20 ]
  %r97 = phi logic_expr@#37 i32 [ %r98, %B9 ], [ %r96, %B20 ]
  %r93 = phi loc#9 i32 [ %r94, %B9 ], [ %r36, %B20 ]
  %r88 = phi flag#6 i32 [ %r89, %B9 ], [ %r87, %B20 ]
  %r72 = add i32 0, 1 ; loadint
  %r73 = add i32 %r91, %r72
  br label %B6

B12:
  %r39 = loadaddr @array#0
  %r40 = add i32 0, 4 ; loadint
  %r41 = add i32 0, 0 ; loadint
  %r42 = mul i32 %r41, %r40
  %r43 = add i32 %r39, %r42
  %r44 = load array#0 i32, ptr %r43
  %r45 = add i32 0, 1 ; loadint
  %r47 = add i32 0, 0 ; loadint
  %r46 = sub i32 %r47, %r45
  %r48 = icmp ne i32 %r44, %r46
  br i1 %r48, label %B13, label %B14

B13:
  %r49 = loadaddr @array#0
  %r50 = add i32 0, 4 ; loadint
  %r52 = mul i32 %r19, %r50
  %r53 = add i32 %r49, %r52
  %r54 = load array#0 i32, ptr %r53
  %r55 = add i32 0, 1 ; loadint
  %r57 = add i32 0, 0 ; loadint
  %r56 = sub i32 %r57, %r55
  %r58 = icmp ne i32 %r54, %r56
  br label %B15

B14:
  %r59 = add i32 0, 0 ; loadint
  br label %B15

B15:
  %r100 = phi logic_expr@#38 i32 [ %r58, %B13 ], [ %r59, %B14 ]
  br i1 %r100, label %B16, label %B17

B16:
  %r61 = add i32 0, 0 ; loadint
  %r63 = icmp eq i32 %r61, %r19
  br label %B18

B17:
  %r64 = add i32 0, 0 ; loadint
  br label %B18

B18:
  %r96 = phi logic_expr@#37 i32 [ %r63, %B16 ], [ %r64, %B17 ]
  br i1 %r96, label %B19, label %B20

B19:
  %r66 = add i32 0, 1 ; loadint
  %r69 = add i32 0, 1 ; loadint
  %r70 = add i32 %r91, %r69
  br label %B20

B20:
  %r105 = phi tmp#10 i32 [ %r107, %B18 ], [ %r70, %B19 ]
  %r87 = phi flag#6 i32 [ %r89, %B18 ], [ %r66, %B19 ]
  br label %B11

B21:
  %r76 = add i32 0, 0 ; loadint
  %r75 = icmp eq i32 %r76, %r89
  br i1 %r75, label %B22, label %B23

B22:
  %r78 = add i32 0, 1 ; loadint
  %r80 = add i32 0, 0 ; loadint
  %r79 = sub i32 %r80, %r78
  %r77 = call i32 @putint(i32 %r79)
  br label %B23

B23:
  br label %B3

}
define void @init(i32 %r1){
B0:
  %r3 = add i32 0, 0 ; loadint
  ret i32 %r3

}
--------------------------- building riscv ---------------------------
---------------------------------ir after resolve phi-------------------------------------
init:
B23:

B24:
    li T[-3], 0
    mv a0, T[-3]
    ret

---------------------------------ir after resolve phi end --------------------------------
---------------------------------ir after resolve phi-------------------------------------
main:
B0:

B1:
    li T[-2], 1
    mv T[-104], T[-2]
    j B2

B2:
    beq x0, T[-104], B4
    j B3

B3:
    li T[-7], 1
    sub T[-8], T[-104], T[-7]
    li T[-9], 1
    la T[-10], n
    sw T[-9], 0(T[-10])
    li T[-12], 0
    li T[-14], 0
    la T[-16], n
    lw T[-17], 0(T[-16])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-17]
    call init
    mv T[-15], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    li T[-19], 17
    mv T[-107], T[-108]
    mv T[-102], T[-103]
    mv T[-98], T[-99]
    mv T[-94], T[-95]
    mv T[-91], T[-12]
    mv T[-89], T[-14]
    mv T[-84], T[-85]
    mv T[-82], T[-83]
    j B5

B4:
    li T[-81], 0
    mv a0, T[-81]
    ret

B5:
    li T[-21], 10
    slt T[-22], T[-91], T[-21]
    beq x0, T[-22], B7
    j B6

B6:
    li T[-23], 1
    li T[-24], 2
    j B8

B7:
    j B20

B8:
    li T[-27], 0
    sub T[-26], T[-27], T[-89]
    seqz T[-26], T[-26]
    mv T[-106], T[-107]
    mv T[-101], T[-102]
    mv T[-97], T[-98]
    mv T[-93], T[-94]
    mv T[-88], T[-89]
    beq x0, T[-26], B10
    j B9

B9:
    la T[-29], n
    lw T[-30], 0(T[-29])
    li T[-32], 1
    sub T[-33], T[-23], T[-32]
    mul T[-34], T[-30], T[-33]
    add T[-36], T[-34], T[-24]
    j B11

B10:
    li T[-72], 1
    add T[-73], T[-91], T[-72]
    mv T[-107], T[-106]
    mv T[-102], T[-101]
    mv T[-98], T[-97]
    mv T[-94], T[-93]
    mv T[-91], T[-73]
    mv T[-89], T[-88]
    mv T[-84], T[-24]
    mv T[-82], T[-23]
    j B5

B11:
    la T[-39], array
    li T[-40], 4
    li T[-41], 0
    mul T[-42], T[-41], T[-40]
    add T[-43], T[-39], T[-42]
    lw T[-44], 0(T[-43])
    li T[-45], 1
    li T[-47], 0
    sub T[-46], T[-47], T[-45]
    sub T[-48], T[-44], T[-46]
    snez T[-48], T[-48]
    beq x0, T[-48], B13
    j B12

B12:
    la T[-49], array
    li T[-50], 4
    mul T[-52], T[-19], T[-50]
    add T[-53], T[-49], T[-52]
    lw T[-54], 0(T[-53])
    li T[-55], 1
    li T[-57], 0
    sub T[-56], T[-57], T[-55]
    sub T[-58], T[-54], T[-56]
    snez T[-58], T[-58]
    mv T[-100], T[-58]
    j B14

B13:
    li T[-59], 0
    mv T[-100], T[-59]
    j B14

B14:
    beq x0, T[-100], B16
    j B15

B15:
    li T[-61], 0
    sub T[-63], T[-61], T[-19]
    seqz T[-63], T[-63]
    mv T[-96], T[-63]
    j B17

B16:
    li T[-64], 0
    mv T[-96], T[-64]
    j B17

B17:
    mv T[-105], T[-107]
    mv T[-87], T[-89]
    beq x0, T[-96], B19
    j B18

B18:
    li T[-66], 1
    li T[-69], 1
    add T[-70], T[-91], T[-69]
    mv T[-105], T[-70]
    mv T[-87], T[-66]
    j B19

B19:
    mv T[-106], T[-105]
    mv T[-101], T[-100]
    mv T[-97], T[-96]
    mv T[-93], T[-36]
    mv T[-88], T[-87]
    j B10

B20:
    li T[-76], 0
    sub T[-75], T[-76], T[-89]
    seqz T[-75], T[-75]
    beq x0, T[-75], B22
    j B21

B21:
    li T[-78], 1
    li T[-80], 0
    sub T[-79], T[-80], T[-78]
    mv a0, T[-79]
    call putint
    mv T[-77], a0
    j B22

B22:
    mv T[-108], T[-107]
    mv T[-104], T[-8]
    mv T[-103], T[-102]
    mv T[-99], T[-98]
    mv T[-95], T[-94]
    mv T[-92], T[-19]
    mv T[-90], T[-91]
    mv T[-86], T[-89]
    mv T[-85], T[-84]
    mv T[-83], T[-82]
    j B2

---------------------------------ir after resolve phi end --------------------------------
