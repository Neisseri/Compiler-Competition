--------------------------- building ast ---------------------------
visitCompUnit
visitCompUnit: funcDef
construct funct block: init
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: m
visitVarDecl: int start
visitVarDecl: ident: a
visitVarDecl: ident: b
visitVarDecl: int start
visitVarDecl: ident: flag
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: loc
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitBlock done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitExprStmt
visitCall ident: init
visitCall args_list size: 0
visitBlock done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: tmp
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitBlock done!
visitBlock done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
Info: visitProgramProgram
Info: visitFuncDefvoid @init()
Info: visitBlock
Info: function init has no returnscope id1
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitVarDef i32 @m
Info: visitVarDef i32 @a
Info: visitVarDef i32 @b
Info: visitVarDef i32 @flag = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitVarDef i32 @i = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitStatementWhile
Info: visitExpr@i<2
Info: visitBinopExpr@i<2
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr2
Info: visitIntLiteralExpr2
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@a = 1
Info: visitAssignStmtAssign@a = 1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmti32
Info: visitExpr1
Info: visitIntLiteralExpr1
Info: visitStatementAssign@b = 2
Info: visitAssignStmtAssign@b = 2
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmti32
Info: visitExpr2
Info: visitIntLiteralExpr2
Info: visitStatementIfElse
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @loc = @a+@b
Info: visitExpr@a+@b
Info: visitAssignmentExpr@a+@b
Info: visitExpr@a+@b
Info: visitBinopExpr@a+@b
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitStatementIfElse
Info: visitExpr0&&0
Info: visitBinopExpr0&&0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitStatement
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr0&&0
Info: visitBinopExpr0&&0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @init()
Info: visitExprStmtCall @init()
Info: visitExprCall @init()
Info: visiCalltExprCall @init()
Info: visitStatementIfElse
Info: visitExpr0&&0&&0
Info: visitBinopExpr0&&0&&0
Info: visitExpr0&&0
Info: visitBinopExpr0&&0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@flag = 1
Info: visitAssignStmtAssign@flag = 1
Info: visitExpr@flag
Info: visitLvalExpr@flag
Info: visitAssignStmti32
Info: visitExpr1
Info: visitIntLiteralExpr1
Info: visitVarDef i32 @tmp = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
Info: visitStatementAssign@i = @i+2
Info: visitAssignStmtAssign@i = @i+2
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmti32
Info: visitExpr@i+2
Info: visitBinopExpr@i+2
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr2
Info: visitIntLiteralExpr2
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
Info: visitReturnStmtReturn 0function has returnscope id3
entryB0
reverse_postorderB0
entryB2
B3
B4
B5
B6
B7
B8
B9
B10
B11
B12
B13
B14
B15
B16
B17
B18
B19
B20
B21
B22
B23
B24
B25
B26
B27
B28
B29
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB7
reverse_postorderB9
reverse_postorderB11
reverse_postorderB10
reverse_postorderB12
reverse_postorderB13
reverse_postorderB14
reverse_postorderB15
reverse_postorderB17
reverse_postorderB16
reverse_postorderB18
reverse_postorderB19
reverse_postorderB20
reverse_postorderB21
reverse_postorderB23
reverse_postorderB22
reverse_postorderB24
reverse_postorderB26
reverse_postorderB25
reverse_postorderB27
reverse_postorderB28
reverse_postorderB29
reverse_postorderB8
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB7
reverse_postorderB9
reverse_postorderB11
reverse_postorderB10
reverse_postorderB12
reverse_postorderB13
reverse_postorderB14
reverse_postorderB15
reverse_postorderB17
reverse_postorderB16
reverse_postorderB18
reverse_postorderB19
reverse_postorderB20
reverse_postorderB21
reverse_postorderB23
reverse_postorderB22
reverse_postorderB24
reverse_postorderB26
reverse_postorderB25
reverse_postorderB27
reverse_postorderB28
reverse_postorderB29
reverse_postorderB8
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B12 func: main
compute_dom_fro bb: B12 func: main
compute_dom_fro bb: B14 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B20 func: main
compute_dom_fro bb: B24 func: main
compute_dom_fro bb: B24 func: main
compute_dom_fro bb: B27 func: main
compute_dom_fro bb: B27 func: main
compute_dom_fro bb: B29 func: main
riscv: 
T[-5] B1
T[-66] B7
T[-5] B1
T[-63] B7
T[-5] B1
T[-60] B7
T[-5] B1
T[-57] B7
T[-5] B1
T[-54] B7
T[-5] B1
T[-51] B7
T[-7] B1
T[-43] B7
T[-5] B1
T[-48] B7
T[-5] B1
T[-12] B7
T[-5] B1
T[-11] B7
T[-67] B5
T[-65] B28
T[-64] B5
T[-62] B28
T[-61] B5
T[-59] B28
T[-58] B5
T[-56] B28
T[-55] B5
T[-53] B28
T[-52] B5
T[-17] B28
T[-49] B5
T[-47] B28
T[-20] B9
T[-21] B10
T[-25] B15
T[-26] B16
Break 1 Insert LoadWord:     lw t0, 48(sp)
Break 1 Insert LoadWord:     lw t1, 52(sp)
Break 1 Insert LoadWord:     lw t2, 56(sp)
Break 1 Insert LoadWord:     lw a0, 60(sp)
Break 1 Insert LoadWord:     lw a1, 64(sp)
Break 1 Insert LoadWord:     lw a2, 68(sp)
Break 1 Insert LoadWord:     lw a3, 72(sp)
Break 1 Insert LoadWord:     lw a4, 76(sp)
Break 1 Insert LoadWord:     lw a5, 80(sp)
Break 1 Insert LoadWord:     lw a6, 84(sp)
Break 1 Insert LoadWord:     lw a7, 88(sp)
Break 1 Insert LoadWord:     lw t3, 92(sp)
Break 1 Insert LoadWord:     lw t4, 96(sp)
Break 1 Insert LoadWord:     lw t5, 100(sp)
Break 1 Insert LoadWord:     lw t6, 104(sp)
T[-32] B21
T[-33] B22
T[-35] B24
T[-36] B25
T[-67] B26
T[-40] B27
T[-49] B26
T[-38] B27
---------------------------------ir after resolve phi-------------------------------------
init:
B29:

B30:
    li T[-1], 0
    mv a0, T[-1]
    ret

---------------------------------ir after resolve phi end --------------------------------
init Main()
init do_liveness_analysis() done
init Build() done
freeze reg MkWorklist insert T[-1]
init MkWorklist() done
init Coalesce()
init AssignColors() done
replace regs

init
after compute reg_used
after prologue
end of emitend
    beq x0, T[-13], B7
    beq x0, T[-13], B7
    beq x0, T[-13], B7
    beq x0, T[-13], B7
    beq x0, T[-13], B7
    beq x0, T[-13], B7
    beq x0, T[-13], B7
    beq x0, T[-59], B28
    beq x0, T[-59], B28
---------------------------------ir after resolve phi-------------------------------------
main:
B0:

B1:
    li T[-5], 0
    li T[-7], 0
    addi T[-67], T[-5], 0
    addi T[-64], T[-5], 0
    addi T[-61], T[-5], 0
    addi T[-58], T[-5], 0
    addi T[-55], T[-5], 0
    addi T[-52], T[-5], 0
    addi T[-50], T[-7], 0
    addi T[-49], T[-5], 0
    addi T[-46], T[-5], 0
    addi T[-45], T[-5], 0
    j B2

B2:
    li T[-9], 2
    slt T[-10], T[-50], T[-9]
    beq x0, T[-10], B4
    j B3

B3:
    li T[-11], 1
    li T[-12], 2
    j B5

B4:
    li T[-44], 0
    mv a0, T[-44]
    ret

B5:
    li T[-13], 0
    addi T[-66], T[-67], 0
    addi T[-63], T[-64], 0
    addi T[-60], T[-61], 0
    addi T[-57], T[-58], 0
    addi T[-54], T[-55], 0
    addi T[-51], T[-52], 0
    addi T[-48], T[-49], 0
    beq x0, T[-13], B7
    j B6

B6:
    add T[-17], T[-11], T[-12]
    j B8

B7:
    li T[-42], 2
    add T[-43], T[-50], T[-42]
    addi T[-67], T[-66], 0
    addi T[-64], T[-63], 0
    addi T[-61], T[-60], 0
    addi T[-58], T[-57], 0
    addi T[-55], T[-54], 0
    addi T[-52], T[-51], 0
    addi T[-50], T[-43], 0
    addi T[-49], T[-48], 0
    addi T[-46], T[-12], 0
    addi T[-45], T[-11], 0
    j B2

B8:
    li T[-19], 0
    beq x0, T[-19], B10
    j B9

B9:
    li T[-20], 0
    addi T[-53], T[-20], 0
    j B11

B10:
    li T[-21], 0
    addi T[-53], T[-21], 0
    j B11

B11:
    beq x0, T[-53], B13
    j B12

B12:
    j B13

B13:
    j B14

B14:
    li T[-24], 0
    beq x0, T[-24], B16
    j B15

B15:
    li T[-25], 0
    addi T[-56], T[-25], 0
    j B17

B16:
    li T[-26], 0
    addi T[-56], T[-26], 0
    j B17

B17:
    beq x0, T[-56], B19
    j B18

B18:
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    call init
    mv T[-28], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B19

B19:
    j B20

B20:
    li T[-31], 0
    beq x0, T[-31], B22
    j B21

B21:
    li T[-32], 0
    addi T[-62], T[-32], 0
    j B23

B22:
    li T[-33], 0
    addi T[-62], T[-33], 0
    j B23

B23:
    beq x0, T[-62], B25
    j B24

B24:
    li T[-35], 0
    addi T[-59], T[-35], 0
    j B26

B25:
    li T[-36], 0
    addi T[-59], T[-36], 0
    j B26

B26:
    addi T[-65], T[-67], 0
    addi T[-47], T[-49], 0
    beq x0, T[-59], B28
    j B27

B27:
    li T[-38], 1
    li T[-40], 1
    addi T[-65], T[-40], 0
    addi T[-47], T[-38], 0
    j B28

B28:
    addi T[-66], T[-65], 0
    addi T[-63], T[-62], 0
    addi T[-60], T[-59], 0
    addi T[-57], T[-56], 0
    addi T[-54], T[-53], 0
    addi T[-51], T[-17], 0
    addi T[-48], T[-47], 0
    j B7

---------------------------------ir after resolve phi end --------------------------------
main Main()
main do_liveness_analysis() done
main Build() done
spill reg MkWorklist insert T[-67]
spill reg MkWorklist insert T[-66]
spill reg MkWorklist insert T[-65]
spill reg MkWorklist insert T[-64]
spill reg MkWorklist insert T[-63]
spill reg MkWorklist insert T[-62]
spill reg MkWorklist insert T[-61]
spill reg MkWorklist insert T[-60]
spill reg MkWorklist insert T[-59]
spill reg MkWorklist insert T[-58]
spill reg MkWorklist insert T[-57]
spill reg MkWorklist insert T[-56]
spill reg MkWorklist insert T[-55]
spill reg MkWorklist insert T[-54]
spill reg MkWorklist insert T[-53]
spill reg MkWorklist insert T[-52]
spill reg MkWorklist insert T[-51]
spill reg MkWorklist insert T[-50]
spill reg MkWorklist insert T[-49]
spill reg MkWorklist insert T[-48]
spill reg MkWorklist insert T[-47]
spill reg MkWorklist insert T[-46]
simplify reg MkWorklist insert T[-45]
freeze reg MkWorklist insert T[-44]
spill reg MkWorklist insert T[-43]
spill reg MkWorklist insert T[-42]
simplify reg MkWorklist insert T[-40]
spill reg MkWorklist insert T[-38]
simplify reg MkWorklist insert T[-36]
simplify reg MkWorklist insert T[-35]
simplify reg MkWorklist insert T[-33]
simplify reg MkWorklist insert T[-32]
simplify reg MkWorklist insert T[-31]
freeze reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
simplify reg MkWorklist insert T[-24]
simplify reg MkWorklist insert T[-21]
simplify reg MkWorklist insert T[-20]
simplify reg MkWorklist insert T[-19]
spill reg MkWorklist insert T[-17]
spill reg MkWorklist insert T[-13]
spill reg MkWorklist insert T[-12]
spill reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-7]
spill reg MkWorklist insert T[-5]
main MkWorklist() done
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Coalesce()
main Coalesce()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main AssignColors() done
main RewriteProgram() done
    li T[-5], 0
    li T[-7], 0
    addi T[-67], T[-5], 0
    addi T[-64], T[-5], 0
    addi T[-61], T[-5], 0
    addi T[-58], T[-5], 0
    addi T[-55], T[-5], 0
    addi T[-52], T[-5], 0
    addi T[-50], T[-7], 0
    addi T[-49], T[-5], 0
    addi T[-46], T[-5], 0
    addi T[-45], T[-5], 0
    j B2
    li T[-9], 2
    slt T[-10], T[-50], T[-9]
    beq x0, T[-10], B4
    j B3
    li T[-48], 1
    sw T[-48], 112(sp)
    li T[-45], 2
    sw T[-45], 108(sp)
    j B5
    li T[-44], 0
    mv a0, T[-44]
    ret
    li T[-13], 0
    addi T[-66], T[-67], 0
    addi T[-63], T[-64], 0
    addi T[-60], T[-61], 0
    addi T[-57], T[-58], 0
    addi T[-54], T[-55], 0
    addi T[-51], T[-52], 0
    addi T[-48], T[-49], 0
    beq x0, T[-13], B7
    j B6
    lw T[-46], 108(sp)
    lw T[-49], 112(sp)
    add T[-17], T[-49], T[-46]
    j B8
    li T[-42], 2
    add T[-43], T[-50], T[-42]
    addi T[-67], T[-66], 0
    addi T[-64], T[-63], 0
    addi T[-61], T[-60], 0
    addi T[-58], T[-57], 0
    addi T[-55], T[-54], 0
    addi T[-52], T[-51], 0
    addi T[-50], T[-43], 0
    addi T[-49], T[-48], 0
    lw T[-47], 108(sp)
    addi T[-46], T[-47], 0
    lw T[-50], 112(sp)
    addi T[-45], T[-50], 0
    j B2
    li T[-19], 0
    beq x0, T[-19], B10
    j B9
    li T[-20], 0
    addi T[-53], T[-20], 0
    j B11
    li T[-21], 0
    addi T[-53], T[-21], 0
    j B11
    beq x0, T[-53], B13
    j B12
    j B13
    j B14
    li T[-24], 0
    beq x0, T[-24], B16
    j B15
    li T[-25], 0
    addi T[-56], T[-25], 0
    j B17
    li T[-26], 0
    addi T[-56], T[-26], 0
    j B17
    beq x0, T[-56], B19
    j B18
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    call init
    mv T[-28], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B19
    j B20
    li T[-31], 0
    beq x0, T[-31], B22
    j B21
    li T[-32], 0
    addi T[-62], T[-32], 0
    j B23
    li T[-33], 0
    addi T[-62], T[-33], 0
    j B23
    beq x0, T[-62], B25
    j B24
    li T[-35], 0
    addi T[-59], T[-35], 0
    j B26
    li T[-36], 0
    addi T[-59], T[-36], 0
    j B26
    addi T[-65], T[-67], 0
    addi T[-47], T[-49], 0
    beq x0, T[-59], B28
    j B27
    li T[-38], 1
    li T[-40], 1
    addi T[-65], T[-40], 0
    addi T[-47], T[-38], 0
    j B28
    addi T[-66], T[-65], 0
    addi T[-63], T[-62], 0
    addi T[-60], T[-59], 0
    addi T[-57], T[-56], 0
    addi T[-54], T[-53], 0
    addi T[-51], T[-17], 0
    addi T[-48], T[-47], 0
    j B7
main Main()
main do_liveness_analysis() done
main Build() done
spill reg MkWorklist insert T[-67]
spill reg MkWorklist insert T[-66]
simplify reg MkWorklist insert T[-65]
spill reg MkWorklist insert T[-64]
spill reg MkWorklist insert T[-63]
spill reg MkWorklist insert T[-62]
spill reg MkWorklist insert T[-61]
spill reg MkWorklist insert T[-60]
spill reg MkWorklist insert T[-59]
spill reg MkWorklist insert T[-58]
spill reg MkWorklist insert T[-57]
spill reg MkWorklist insert T[-56]
spill reg MkWorklist insert T[-55]
spill reg MkWorklist insert T[-54]
spill reg MkWorklist insert T[-53]
spill reg MkWorklist insert T[-52]
spill reg MkWorklist insert T[-51]
spill reg MkWorklist insert T[-50]
spill reg MkWorklist insert T[-49]
spill reg MkWorklist insert T[-48]
spill reg MkWorklist insert T[-47]
simplify reg MkWorklist insert T[-46]
simplify reg MkWorklist insert T[-45]
freeze reg MkWorklist insert T[-44]
spill reg MkWorklist insert T[-43]
simplify reg MkWorklist insert T[-42]
simplify reg MkWorklist insert T[-40]
simplify reg MkWorklist insert T[-38]
simplify reg MkWorklist insert T[-36]
simplify reg MkWorklist insert T[-35]
simplify reg MkWorklist insert T[-33]
simplify reg MkWorklist insert T[-32]
simplify reg MkWorklist insert T[-31]
freeze reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
simplify reg MkWorklist insert T[-24]
simplify reg MkWorklist insert T[-21]
simplify reg MkWorklist insert T[-20]
simplify reg MkWorklist insert T[-19]
spill reg MkWorklist insert T[-17]
spill reg MkWorklist insert T[-13]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-7]
spill reg MkWorklist insert T[-5]
main MkWorklist() done
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Simplify()
main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main AssignColors() done
replace regs

replace regs

main
after compute reg_used
after prologue
end of emitend
