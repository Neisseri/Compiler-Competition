--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef a [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (number 
                                                (intConst 10))))))) ] [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (number 
                                                (intConst 10))))))) ]) ;))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitVarDecl: int start
visitVarDecl: array dim_size=2
visitPrimaryExp_ number
visitPrimaryExp_ number
visitVarDecl: ident: a
visitCompUnit: funcDef
construct funct block: main
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitVarDef int @a
Info: visitDims 10
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55c5c300b810
Info: visitDims 10
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55c5c300b9b0
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c5c3006a20
ast: 
Program
  int @a#0
  int @main()
    {
      Return 0
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visit decl global array
visitExpressionVal
visitExpressionVal
global array size: 100
visit decl global array done
visitFunction main
visitBlock 
visitExpression
function main has 1 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

ir:
; module
@a#0 = global int [10,10], 400
define i32 @main(){
B0:
  %1 = 0
  ret i32 %1

}
--------------------------- building riscv ---------------------------
riscv: 

B1:
li T[-1], 0
mv a0, T[-1]
ret
pred: B0 
succ: 
