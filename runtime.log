--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef a = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 10))))))))) ;))) 
                    (blockItem 
                        (stmt 
                            (block { }))) 
                    (blockItem 
                        (stmt ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (addExp 
                                        (mulExp 
                                            (mulExp 
                                                (unaryExp 
                                                    (primaryExp 
                                                        (lVal a)))) * 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 2)))))) + 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 1))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: a
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visit block stmt
visitBlock done!
visitExprStmt
visitExprStmt: empty exp
visitPrimaryExp_ number
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
<<<<<<< HEAD
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitVarDef int @a = 10
Info: visitExpr10
Info: visitAssignmentExpr10
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x555a5def1e00
Info: visitStatement
Info: visitBlock
Info: visitStatementReturn @a*2+1
Info: visitExpr@a*2+1
Info: visitBinopExpr@a*2+1
Info: visitExpr@a*2
Info: visitBinopExpr@a*2
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x555a5dee4c10
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x555a5dedf130
=======
Info: visitFuncDefint @ifElseIf()
Info: visitBlock
Info: visitVarDef int @a
Info: visitStatementAssign@a = 5
Info: visitAssignStmtAssign@a = 5
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x5638ddc22330
Info: visitVarDef int @b
Info: visitStatementAssign@b = 10
Info: visitAssignStmtAssign@b = 10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmtint
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x5638ddc22360
Info: visitStatementIfElse
Info: visitExpr@a==6||@b==11
Info: visitBinopExpr@a==6||@b==11
Info: visitExpr@a==6
Info: visitBinopExpr@a==6
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr6
Info: visitIntLiteralExpr6
ret->type 0x5638ddc223e0
Info: visitExpr@b==11
Info: visitBinopExpr@b==11
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr11
Info: visitIntLiteralExpr11
ret->type 0x5638ddc22410
Info: visitStatement
Info: visitBlock
Info: visitStatementReturn @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitStatement
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@b==10&&@a==1
Info: visitBinopExpr@b==10&&@a==1
Info: visitExpr@b==10
Info: visitBinopExpr@b==10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x5638ddc22490
Info: visitExpr@a==1
Info: visitBinopExpr@a==1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x5638ddc224c0
Info: visitStatementAssign@a = 25
Info: visitAssignStmtAssign@a = 25
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr25
Info: visitIntLiteralExpr25
ret->type 0x5638ddc224f0
Info: visitStatementIfElse
Info: visitExpr@b==10&&@a==-5
Info: visitBinopExpr@b==10&&@a==-5
Info: visitExpr@b==10
Info: visitBinopExpr@b==10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x5638ddc22520
Info: visitExpr@a==-5
Info: visitBinopExpr@a==-5
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr-5
Info: visitUnonExpr-5
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x5638ddc22550
Info: visitStatementAssign@a = @a+15
Info: visitAssignStmtAssign@a = @a+15
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr@a+15
Info: visitBinopExpr@a+15
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr15
Info: visitIntLiteralExpr15
ret->type 0x5638ddc22580
Info: visitStatementAssign@a = -+@a
Info: visitAssignStmtAssign@a = -+@a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr-+@a
Info: visitUnonExpr-+@a
Info: visitExpr+@a
Info: visitUnonExpr+@a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitStatementReturn @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitStatementCall @putint(Call @ifElseIf())
Info: visitExprCall @putint(Call @ifElseIf())
Info: visiCalltExprCall @putint(Call @ifElseIf())
Info: use of undeclared function putint
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x5638ddc22630
>>>>>>> 13cde96cd9fa45cfc3c6f6e1f48817aa1c32c0c9
ast: 
Program
  int @main()
    {
      int @a#2 = 10
      {
      }
      Return @a#2*2+1
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 7 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

ir:
; module
define i32 @main(){
<<<<<<< HEAD
=======
B15:
  %2 = call i32 @ifElseIf()
  %1 = call i32 @putint(i32 %2)
  %3 = 0
  ret i32 %3

}
define i32 @ifElseIf(){
>>>>>>> 13cde96cd9fa45cfc3c6f6e1f48817aa1c32c0c9
B0:
  %1 = alloca int, 4
  %2 = 10
  store i32 %2, ptr %1
  %3 = load i32, ptr %1
  %4 = 2
  %5 = mul i32 %3, %4
  %6 = 1
  %7 = add i32 %5, %6
  ret i32 %7

}
--------------------------- building riscv ---------------------------
riscv: 
