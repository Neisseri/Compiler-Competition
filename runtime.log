--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) ifElseIf ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef a) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal a) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 5))))))) ;)) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef b) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal b) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 10))))))) ;)) 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lOrExp 
                                        (lAndExp 
                                            (eqExp 
                                                (eqExp 
                                                    (relExp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal a))))))) == 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 6)))))))))) || 
                                    (lAndExp 
                                        (eqExp 
                                            (eqExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal b))))))) == 
                                            (relExp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 0xb))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt return 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal a)))))) ;)) })) else 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (lAndExp 
                                                            (eqExp 
                                                                (eqExp 
                                                                    (relExp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal b))))))) == 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (number 
                                                                                        (intConst 10))))))))) && 
                                                        (eqExp 
                                                            (eqExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal a))))))) == 
                                                            (relExp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))))))) ) 
                                            (stmt 
                                                (lVal a) = 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 25))))))) ;) else 
                                            (stmt if ( 
                                                (cond 
                                                    (lOrExp 
                                                        (lAndExp 
                                                            (lAndExp 
                                                                (eqExp 
                                                                    (eqExp 
                                                                        (relExp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal b))))))) == 
                                                                    (relExp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 10))))))))) && 
                                                            (eqExp 
                                                                (eqExp 
                                                                    (relExp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal a))))))) == 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp - 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 5)))))))))))) ) 
                                                (stmt 
                                                    (lVal a) = 
                                                    (exp 
                                                        (addExp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (lVal a))))) + 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 15))))))) ;) else 
                                                (stmt 
                                                    (lVal a) = 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp - 
                                                                    (unaryExp + 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal a)))))))) ;)))) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal a)))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putint ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp ifElseIf ( ))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: ifElseIf
visitVarDecl: int start
visitVarDecl: ident: a
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: b
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitBlock done!
visit block stmt
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitAssign done!
visitBlock done!
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitCall ident: putint
visitFuncRParams
visitCall ident: ifElseIf
visitCall args_list size: 0
visitCall args_list size: 1
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefint @ifElseIf()
Info: visitBlock
Info: visitVarDef int @a
Info: visitStatementAssign@a = 5
Info: visitAssignStmtAssign@a = 5
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x5555aeb13330
Info: visitVarDef int @b
Info: visitStatementAssign@b = 10
Info: visitAssignStmtAssign@b = 10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmtint
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x5555aeb13360
Info: visitStatementIfElse
Info: visitExpr@a==6||@b==11
Info: visitBinopExpr@a==6||@b==11
Info: visitExpr@a==6
Info: visitBinopExpr@a==6
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr6
Info: visitIntLiteralExpr6
ret->type 0x5555aeb133e0
Info: visitExpr@b==11
Info: visitBinopExpr@b==11
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr11
Info: visitIntLiteralExpr11
ret->type 0x5555aeb13410
Info: visitStatement
Info: visitBlock
Info: visitStatementReturn @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitStatement
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@b==10&&@a==1
Info: visitBinopExpr@b==10&&@a==1
Info: visitExpr@b==10
Info: visitBinopExpr@b==10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x5555aeb13490
Info: visitExpr@a==1
Info: visitBinopExpr@a==1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x5555aeb134c0
Info: visitStatementAssign@a = 25
Info: visitAssignStmtAssign@a = 25
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr25
Info: visitIntLiteralExpr25
ret->type 0x5555aeb134f0
Info: visitStatementIfElse
Info: visitExpr@b==10&&@a==-5
Info: visitBinopExpr@b==10&&@a==-5
Info: visitExpr@b==10
Info: visitBinopExpr@b==10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x5555aeb13520
Info: visitExpr@a==-5
Info: visitBinopExpr@a==-5
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr-5
Info: visitUnonExpr-5
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x5555aeb13550
Info: visitStatementAssign@a = @a+15
Info: visitAssignStmtAssign@a = @a+15
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr@a+15
Info: visitBinopExpr@a+15
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr15
Info: visitIntLiteralExpr15
ret->type 0x5555aeb13580
Info: visitStatementAssign@a = -+@a
Info: visitAssignStmtAssign@a = -+@a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr-+@a
Info: visitUnonExpr-+@a
Info: visitExpr+@a
Info: visitUnonExpr+@a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitStatementReturn @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitStatementCall @putint(Call @ifElseIf())
Info: visitExprCall @putint(Call @ifElseIf())
Info: visiCalltExprCall @putint(Call @ifElseIf())
Info: use of undeclared function putint
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x5555aeb13630
ast: 
Program
  int @ifElseIf()
    {
      int @a#2
      Assign@a#2 = 5
      int @b#2
      Assign@b#2 = 10
      If        @a#2==6||@b#2==11
        {
          Return @a#2
        }
      Else
        {
          If            @b#2==10&&@a#2==1
            Assign@a#2 = 25
          Else
            If              @b#2==10&&@a#2==-5
              Assign@a#2 = @a#2+15
            Else
              Assign@a#2 = -+@a#2
        }
      Return @a#2
    }
  int @main()
    {
      Call @putint(Call @ifElseIf())
      Return 0
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visitFunction ifElseIf
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionLValue
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue
visitStatement
visitExpression
visitExpressionLValue
function ifElseIf has 36 regs
B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: 
B3:
  prev: B1 
  succ: B6 
B4:
  prev: B5 B9 
  succ: 
B5:
  prev: 
  succ: B4 
B6:
  prev: B3 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 
  succ: B10 
B9:
  prev: B7 B13 
  succ: B4 
B10:
  prev: B8 
  succ: B11 B12 
B11:
  prev: B10 
  succ: B13 
B12:
  prev: B10 
  succ: B13 
B13:
  prev: B11 B12 
  succ: B9 
B14:
  prev: 
  succ: 

B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: 
B3:
  prev: B1 
  succ: B6 
B4:
  prev: B9 
  succ: 
B6:
  prev: B3 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 
  succ: B10 
B9:
  prev: B7 B13 
  succ: B4 
B10:
  prev: B8 
  succ: B11 B12 
B11:
  prev: B10 
  succ: B13 
B12:
  prev: B10 
  succ: B13 
B13:
  prev: B11 B12 
  succ: B9 

entryB0
B1
B2
B3
B4
B6
B7
B8
B9
B10
B11
B12
B13
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB6
reverse_postorderB8
reverse_postorderB10
reverse_postorderB12
reverse_postorderB11
reverse_postorderB13
reverse_postorderB7
reverse_postorderB9
reverse_postorderB4
reverse_postorderB2
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB6
reverse_postorderB8
reverse_postorderB10
reverse_postorderB12
reverse_postorderB11
reverse_postorderB13
reverse_postorderB7
reverse_postorderB9
reverse_postorderB4
reverse_postorderB2
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 
  domed_by: B0 B1 
B2:
  doms: 
  domed_by: B0 B1 B2 
B3:
  doms: B6 
  domed_by: B0 B1 B3 
B4:
  doms: 
  domed_by: B0 B1 B3 B4 B6 B9 
B6:
  doms: B7 B8 B9 
  domed_by: B0 B1 B3 B6 
B7:
  doms: 
  domed_by: B0 B1 B3 B6 B7 
B8:
  doms: B10 
  domed_by: B0 B1 B3 B6 B8 
B9:
  doms: B4 
  domed_by: B0 B1 B3 B6 B9 
B10:
  doms: B11 B12 B13 
  domed_by: B0 B1 B3 B6 B8 B10 
B11:
  doms: 
  domed_by: B0 B1 B3 B6 B8 B10 B11 
B12:
  doms: 
  domed_by: B0 B1 B3 B6 B8 B10 B12 
B13:
  doms: 
  domed_by: B0 B1 B3 B6 B8 B10 B13 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: 
B3:
  DF: 
B4:
  DF: 
B6:
  DF: 
B7:
  DF: B9 
B8:
  DF: B9 
B9:
  DF: 
B10:
  DF: B9 
B11:
  DF: B13 
B12:
  DF: B13 
B13:
  DF: B9 

visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpression
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 3 regs
B15:
  prev: 
  succ: 
B16:
  prev: 
  succ: 

B15:
  prev: 
  succ: 

entryB15
reverse_postorderB15
B15:
  doms: 
  domed_by: B15 

B15:
  DF: 

ir:
; module
define i32 @main(){
B15:
  %2 = call i32 @ifElseIf()
  %1 = call@putint(i32 %2)
  %3 = 0
  ret i32 %3

}
define void @(){
}
define i32 @ifElseIf(){
B0:
  %1 = alloca int, 4
  %2 = 5
  store i32 %2, ptr %1
  %3 = alloca int, 4
  %4 = 10
  store i32 %4, ptr %3
  br label B1

B1:
  %5 = load i32, ptr %1
  %6 = 6
  %7 = icmp eq i32 %5, %6
  %8 = load i32, ptr %3
  %9 = 11
  %10 = icmp eq i32 %8, %9
  %11 = or i32 %7, %10
  br i32 %11, label B2, label B3

B2:
  %12 = load i32, ptr %1
  ret i32 %12

B3:
  br label B6

B4:
  %36 = load i32, ptr %1
  ret i32 %36

B6:
  %13 = load i32, ptr %3
  %14 = 10
  %15 = icmp eq i32 %13, %14
  %16 = load i32, ptr %1
  %17 = 1
  %18 = icmp eq i32 %16, %17
  %19 = and i32 %15, %18
  br i32 %19, label B7, label B8

B7:
  %20 = 25
  store i32 %20, ptr %1
  br label B9

B8:
  br label B10

B9:
  br label B4

B10:
  %21 = load i32, ptr %3
  %22 = 10
  %23 = icmp eq i32 %21, %22
  %24 = load i32, ptr %1
  %25 = 5
  %27 = 0
  %26 = sub i32 %27, %25
  %28 = icmp eq i32 %24, %26
  %29 = and i32 %23, %28
  br i32 %29, label B11, label B12

B11:
  %30 = load i32, ptr %1
  %31 = 15
  %32 = add i32 %30, %31
  store i32 %32, ptr %1
  br label B13

B12:
  %33 = load i32, ptr %1
  %35 = 0
  %34 = sub i32 %35, %33
  store i32 %34, ptr %1
  br label B13

B13:
  br label B9

}
--------------------------- building riscv ---------------------------
riscv: 
