--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef n) ;))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) QuickSort ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) arr [ ]) , 
                    (funcFParam 
                        (bType int) low) , 
                    (funcFParam 
                        (bType int) high)) ) 
                (block { 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal low)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal high)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef i) ;))) 
                                    (blockItem 
                                        (stmt 
                                            (lVal i) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal low)))))) ;)) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef k) ;))) 
                                    (blockItem 
                                        (stmt 
                                            (lVal k) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal arr [ 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal low)))))) ])))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal arr [ 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i)))))) ]) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal k)))))) ;)) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef tmp) ;))) 
                                    (blockItem 
                                        (stmt 
                                            (lVal tmp) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i))))) - 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal tmp) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp QuickSort ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal arr))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal low))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal tmp)))))))) ))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal tmp) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal tmp) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp QuickSort ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal arr))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal tmp))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal high)))))))) ))))) ;)) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (stmt 
                            (lVal n) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 10))))))) ;)) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef a [ 
                                    (exp 
                                        (addExp 
                                            (mulExp 
                                                (unaryExp 
                                                    (primaryExp 
                                                        (number 
                                                            (intConst 10))))))) ]) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 0))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 4))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 1))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 3))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 2))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 9))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 3))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 2))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 4))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 5))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 1))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 6))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 6))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 7))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 5))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 8))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 7))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal a [ 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (number 
                                                        (intConst 9))))))) ]) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 8))))))) ;)) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal i) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef tmp) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal tmp) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 9))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal i) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp QuickSort ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal a))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal i))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal tmp)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitVarDecl: int start
visitVarDecl: ident: n
visitCompUnit: funcDef
visitArrayParam
construct funct block: QuickSort
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: i
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: k
visitAssign done!
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: tmp
visitPrimaryExp_ number
visitAssign done!
visitCall ident: QuickSort
visitFuncRParams
visitCall args_list size: 3
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitCall ident: QuickSort
visitFuncRParams
visitCall args_list size: 3
visitAssign done!
visitBlock done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: array dim_size=1
visitPrimaryExp_ number
visitVarDecl: ident: a
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: i
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: tmp
visitPrimaryExp_ number
visitAssign done!
visitCall ident: QuickSort
visitFuncRParams
visitCall args_list size: 3
visitAssign done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitVarDef int @n
Info: visitFuncDefint @QuickSort(int @arr[0], int @low, int @high)
Info: visitParamDefint @arr[0]
Info: visitParamDefint @low
Info: visitParamDefint @high
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@low<@high
Info: visitBinopExpr@low<@high
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitExpr@high
Info: visitLvalExpr@high
Info: visitStatement
Info: visitBlock
Info: visitVarDef int @i
Info: visitStatementAssign@i = @low
Info: visitAssignStmtAssign@i = @low
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmtint
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitVarDef int @k
Info: visitStatementAssign@k = @arr[@low]
Info: visitAssignStmtAssign@k = @arr[@low]
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitAssignStmtint
Info: visitExpr@arr[@low]
Info: visitLvalExpr@arr[@low]
Info: lval->indices->children.size() 1
Info: visitDims @low
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitStatementAssign@arr[@i] = @k
Info: visitAssignStmtAssign@arr[@i] = @k
Info: visitExpr@arr[@i]
Info: visitLvalExpr@arr[@i]
Info: lval->indices->children.size() 1
Info: visitDims @i
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmtint
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitVarDef int @tmp
Info: visitStatementAssign@tmp = @i-1
Info: visitAssignStmtAssign@tmp = @i-1
Info: visitExpr@tmp
Info: visitLvalExpr@tmp
Info: visitAssignStmtint
Info: visitExpr@i-1
Info: visitBinopExpr@i-1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ae233ab9a0
Info: visitStatementAssign@tmp = Call @QuickSort(@arr, @low, @tmp)
Info: visitAssignStmtAssign@tmp = Call @QuickSort(@arr, @low, @tmp)
Info: visitExpr@tmp
Info: visitLvalExpr@tmp
Info: visitAssignStmtint
Info: visitExprCall @QuickSort(@arr, @low, @tmp)
Info: visiCalltExprCall @QuickSort(@arr, @low, @tmp)
Info: visitExpr@arr
Info: visitLvalExpr@arr
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitExpr@tmp
Info: visitLvalExpr@tmp
Info: visitStatementAssign@tmp = @i+1
Info: visitAssignStmtAssign@tmp = @i+1
Info: visitExpr@tmp
Info: visitLvalExpr@tmp
Info: visitAssignStmtint
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ae233abbc0
Info: visitStatementAssign@tmp = Call @QuickSort(@arr, @tmp, @high)
Info: visitAssignStmtAssign@tmp = Call @QuickSort(@arr, @tmp, @high)
Info: visitExpr@tmp
Info: visitLvalExpr@tmp
Info: visitAssignStmtint
Info: visitExprCall @QuickSort(@arr, @tmp, @high)
Info: visiCalltExprCall @QuickSort(@arr, @tmp, @high)
Info: visitExpr@arr
Info: visitLvalExpr@arr
Info: visitExpr@tmp
Info: visitLvalExpr@tmp
Info: visitExpr@high
Info: visitLvalExpr@high
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ae233abbf0
Info: visitReturnStmtReturn 0function has returnscope id1
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitStatementAssign@n = 10
Info: visitAssignStmtAssign@n = 10
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitAssignStmtint
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55ae233abc20
Info: visitVarDef int @a
Info: var_def->indices->children.size() 1
Info: visitDims 10
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55ae233abcb0
Info: visitStatementAssign@a[0] = 4
Info: visitAssignStmtAssign@a[0] = 4
Info: visitExpr@a[0]
Info: visitLvalExpr@a[0]
Info: lval->indices->children.size() 1
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ae233abce0
Info: visitAssignStmtint
Info: visitExpr4
Info: visitIntLiteralExpr4
ret->type 0x55ae233abd10
Info: visitStatementAssign@a[1] = 3
Info: visitAssignStmtAssign@a[1] = 3
Info: visitExpr@a[1]
Info: visitLvalExpr@a[1]
Info: lval->indices->children.size() 1
Info: visitDims 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ae233abd40
Info: visitAssignStmtint
Info: visitExpr3
Info: visitIntLiteralExpr3
ret->type 0x55ae233abd70
Info: visitStatementAssign@a[2] = 9
Info: visitAssignStmtAssign@a[2] = 9
Info: visitExpr@a[2]
Info: visitLvalExpr@a[2]
Info: lval->indices->children.size() 1
Info: visitDims 2
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55ae233abda0
Info: visitAssignStmtint
Info: visitExpr9
Info: visitIntLiteralExpr9
ret->type 0x55ae233abdd0
Info: visitStatementAssign@a[3] = 2
Info: visitAssignStmtAssign@a[3] = 2
Info: visitExpr@a[3]
Info: visitLvalExpr@a[3]
Info: lval->indices->children.size() 1
Info: visitDims 3
Info: visitExpr3
Info: visitIntLiteralExpr3
ret->type 0x55ae233abe00
Info: visitAssignStmtint
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55ae233abe30
Info: visitStatementAssign@a[4] = 0
Info: visitAssignStmtAssign@a[4] = 0
Info: visitExpr@a[4]
Info: visitLvalExpr@a[4]
Info: lval->indices->children.size() 1
Info: visitDims 4
Info: visitExpr4
Info: visitIntLiteralExpr4
ret->type 0x55ae233abe60
Info: visitAssignStmtint
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ae233abe90
Info: visitStatementAssign@a[5] = 1
Info: visitAssignStmtAssign@a[5] = 1
Info: visitExpr@a[5]
Info: visitLvalExpr@a[5]
Info: lval->indices->children.size() 1
Info: visitDims 5
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x55ae233abec0
Info: visitAssignStmtint
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ae233abef0
Info: visitStatementAssign@a[6] = 6
Info: visitAssignStmtAssign@a[6] = 6
Info: visitExpr@a[6]
Info: visitLvalExpr@a[6]
Info: lval->indices->children.size() 1
Info: visitDims 6
Info: visitExpr6
Info: visitIntLiteralExpr6
ret->type 0x55ae233abf20
Info: visitAssignStmtint
Info: visitExpr6
Info: visitIntLiteralExpr6
ret->type 0x55ae233abf50
Info: visitStatementAssign@a[7] = 5
Info: visitAssignStmtAssign@a[7] = 5
Info: visitExpr@a[7]
Info: visitLvalExpr@a[7]
Info: lval->indices->children.size() 1
Info: visitDims 7
Info: visitExpr7
Info: visitIntLiteralExpr7
ret->type 0x55ae233abf80
Info: visitAssignStmtint
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x55ae233abfb0
Info: visitStatementAssign@a[8] = 7
Info: visitAssignStmtAssign@a[8] = 7
Info: visitExpr@a[8]
Info: visitLvalExpr@a[8]
Info: lval->indices->children.size() 1
Info: visitDims 8
Info: visitExpr8
Info: visitIntLiteralExpr8
ret->type 0x55ae233abfe0
Info: visitAssignStmtint
Info: visitExpr7
Info: visitIntLiteralExpr7
ret->type 0x55ae233ac010
Info: visitStatementAssign@a[9] = 8
Info: visitAssignStmtAssign@a[9] = 8
Info: visitExpr@a[9]
Info: visitLvalExpr@a[9]
Info: lval->indices->children.size() 1
Info: visitDims 9
Info: visitExpr9
Info: visitIntLiteralExpr9
ret->type 0x55ae233ac040
Info: visitAssignStmtint
Info: visitExpr8
Info: visitIntLiteralExpr8
ret->type 0x55ae233ac070
Info: visitVarDef int @i
Info: visitStatementAssign@i = 0
Info: visitAssignStmtAssign@i = 0
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmtint
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ae233ac0a0
Info: visitVarDef int @tmp
Info: visitStatementAssign@tmp = 9
Info: visitAssignStmtAssign@tmp = 9
Info: visitExpr@tmp
Info: visitLvalExpr@tmp
Info: visitAssignStmtint
Info: visitExpr9
Info: visitIntLiteralExpr9
ret->type 0x55ae233ac0d0
Info: visitStatementAssign@i = Call @QuickSort(@a, @i, @tmp)
Info: visitAssignStmtAssign@i = Call @QuickSort(@a, @i, @tmp)
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmtint
Info: visitExprCall @QuickSort(@a, @i, @tmp)
Info: visiCalltExprCall @QuickSort(@a, @i, @tmp)
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr@tmp
Info: visitLvalExpr@tmp
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ae233ac100
Info: visitReturnStmtReturn 0function has returnscope id4
ast: 
Program
  int @n#0
  int @QuickSort(int @arr#1[0], int @low#1, int @high#1)
    {
      If        @low#1<@high#1
        {
          int @i#3
          Assign@i#3 = @low#1
          int @k#3
          Assign@k#3 = @arr#1[@low#1]
          Assign@arr#1[@i#3] = @k#3
          int @tmp#3
          Assign@tmp#3 = @i#3-1
          Assign@tmp#3 = Call @QuickSort(@arr#1, @low#1, @tmp#3)
          Assign@tmp#3 = @i#3+1
          Assign@tmp#3 = Call @QuickSort(@arr#1, @tmp#3, @high#1)
        }
      Return 0
    }
  int @main()
    {
      Assign@n#0 = 10
      int @a#5
      Assign@a#5[0] = 4
      Assign@a#5[1] = 3
      Assign@a#5[2] = 9
      Assign@a#5[3] = 2
      Assign@a#5[4] = 0
      Assign@a#5[5] = 1
      Assign@a#5[6] = 6
      Assign@a#5[7] = 5
      Assign@a#5[8] = 7
      Assign@a#5[9] = 8
      int @i#5
      Assign@i#5 = 0
      int @tmp#5
      Assign@tmp#5 = 9
      Assign@i#5 = Call @QuickSort(@a#5, @i#5, @tmp#5)
      Return 0
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visit decl global var
visit decl global var done
visitFunction QuickSort
visitFunction param decl: arr#1
visitFunction param decl array
visitExpressionVal
visitFunction param decl: low#1
visitFunction param decl: high#1
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue low#1
visitExpression
visitExpressionLValue high#1
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionLValue low#1
visitStatement
visitExpression
visitExpressionLValue arr#1
visitIndex
visitExpression
visitExpressionLValue low#1
visitStatement
visitExpression
visitExpressionLValue k#3
visitIndex
visitExpression
visitExpressionLValue i#3
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue arr#1
visitExpressionLValue array ptr pass
visitExpression
visitExpressionLValue low#1
visitExpression
visitExpressionLValue tmp#3
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue arr#1
visitExpressionLValue array ptr pass
visitExpression
visitExpressionLValue tmp#3
visitExpression
visitExpressionLValue high#1
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function QuickSort has 35 regs
B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B3 
B3:
  prev: B1 B2 
  succ: 
B4:
  prev: 
  succ: 

B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B3 
B3:
  prev: B1 B2 
  succ: 

entryB0
B1
B2
B3
reverse_postorderB0
reverse_postorderB1
reverse_postorderB2
reverse_postorderB3
reverse_postorderB0
reverse_postorderB1
reverse_postorderB2
reverse_postorderB3
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 
  domed_by: B0 B1 
B2:
  doms: 
  domed_by: B0 B1 B2 
B3:
  doms: 
  domed_by: B0 B1 B3 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: B3 
B3:
  DF: 

visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visit decl array
visitExpressionVal
visit decl array store type done a#5 1
visit decl array done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#5
visitExpressionLValue array ptr pass
visitExpression
visitExpressionLValue i#5
visitExpression
visitExpressionLValue tmp#5
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 61 regs
B5:
  prev: 
  succ: 
B6:
  prev: 
  succ: 

B5:
  prev: 
  succ: 

entryB5
reverse_postorderB5
B5:
  doms: 
  domed_by: B5 

B5:
  DF: 

ir:
; module
@n#0 = global int, 4
define i32 @main(){
B5:
  %1 = 10
  %2 = loadaddr @n#0
  store i32 %1, ptr %2
  %3 = alloca int [10], 40
  %4 = 4
  %5 = 4
  %6 = 0
  %7 = mul i32 %6, %5
  %8 = add i32 %3, %7
  store i32 %4, ptr %8
  %9 = 3
  %10 = 4
  %11 = 1
  %12 = mul i32 %11, %10
  %13 = add i32 %3, %12
  store i32 %9, ptr %13
  %14 = 9
  %15 = 4
  %16 = 2
  %17 = mul i32 %16, %15
  %18 = add i32 %3, %17
  store i32 %14, ptr %18
  %19 = 2
  %20 = 4
  %21 = 3
  %22 = mul i32 %21, %20
  %23 = add i32 %3, %22
  store i32 %19, ptr %23
  %24 = 0
  %25 = 4
  %26 = 4
  %27 = mul i32 %26, %25
  %28 = add i32 %3, %27
  store i32 %24, ptr %28
  %29 = 1
  %30 = 4
  %31 = 5
  %32 = mul i32 %31, %30
  %33 = add i32 %3, %32
  store i32 %29, ptr %33
  %34 = 6
  %35 = 4
  %36 = 6
  %37 = mul i32 %36, %35
  %38 = add i32 %3, %37
  store i32 %34, ptr %38
  %39 = 5
  %40 = 4
  %41 = 7
  %42 = mul i32 %41, %40
  %43 = add i32 %3, %42
  store i32 %39, ptr %43
  %44 = 7
  %45 = 4
  %46 = 8
  %47 = mul i32 %46, %45
  %48 = add i32 %3, %47
  store i32 %44, ptr %48
  %49 = 8
  %50 = 4
  %51 = 9
  %52 = mul i32 %51, %50
  %53 = add i32 %3, %52
  store i32 %49, ptr %53
  %54 = alloca int, 4
  %55 = 0
  store i32 %55, ptr %54
  %56 = alloca int, 4
  %57 = 9
  store i32 %57, ptr %56
  %59 = load i32, ptr %54
  %60 = load i32, ptr %56
  %58 = call i32 @QuickSort(i32 %3, i32 %59, i32 %60)
  store i32 %58, ptr %54
  %61 = 0
  ret i32 %61

}
define i32 @QuickSort(i32, i32, i32){
B0:
  %4 = alloca int, 4
  store i32 %2, ptr %4
  %5 = alloca int, 4
  store i32 %3, ptr %5
  br label B1

B1:
  %6 = load i32, ptr %4
  %7 = load i32, ptr %5
  %8 = icmp slt i32 %6, %7
  br i32 %8, label B2, label B3

B2:
  %9 = alloca int, 4
  %10 = load i32, ptr %4
  store i32 %10, ptr %9
  %11 = alloca int, 4
  %12 = 4
  %13 = load i32, ptr %4
  %14 = mul i32 %13, %12
  %15 = add i32 %1, %14
  %16 = load i32, ptr %15
  store i32 %16, ptr %11
  %17 = load i32, ptr %11
  %18 = 4
  %19 = load i32, ptr %9
  %20 = mul i32 %19, %18
  %21 = add i32 %1, %20
  store i32 %17, ptr %21
  %22 = alloca int, 4
  %23 = load i32, ptr %9
  %24 = 1
  %25 = sub i32 %23, %24
  store i32 %25, ptr %22
  %27 = load i32, ptr %4
  %28 = load i32, ptr %22
  %26 = call i32 @QuickSort(i32 %1, i32 %27, i32 %28)
  store i32 %26, ptr %22
  %29 = load i32, ptr %9
  %30 = 1
  %31 = add i32 %29, %30
  store i32 %31, ptr %22
  %33 = load i32, ptr %22
  %34 = load i32, ptr %5
  %32 = call i32 @QuickSort(i32 %1, i32 %33, i32 %34)
  store i32 %32, ptr %22
  br label B3

B3:
  %35 = 0
  ret i32 %35

}
--------------------------- building riscv ---------------------------
riscv: 
?
QuickSort
QuickSort
after compute reg_used
after prologue
end of emitend
main
main
after compute reg_used
after prologue
end of emitend
