--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef loopCount = 
                        (initVal 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))))) ;))) 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef global = 
                        (initVal 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))))) ;))) 
        (compUnitItem 
            (funcDef 
                (funcType void) func ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) i0)) ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i1 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 1))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i2 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 2))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i3 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 3))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i4 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 4))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i5 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 5))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i6 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 6))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i7 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 7))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i8 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 8))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i9 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 9))))))))) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal global) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal i0)))))) ;)) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i10 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 10))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i11 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 11))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i12 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 12))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i13 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 13))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i14 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 14))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i15 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 15))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i16 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 16))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i17 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 17))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i18 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 18))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i19 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 19))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i20 = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 20))))))))) ;))) 
                    (blockItem 
                        (stmt return ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp func ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 100))))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitVarDecl: int start
visitVarDecl: ident: loopCount
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: global
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitCompUnit: funcDef
construct funct block: func
visitVarDecl: int start
visitVarDecl: ident: i1
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i2
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i3
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i4
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i5
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i6
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i7
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i8
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i9
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: i10
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i11
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i12
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i13
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i14
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i15
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i16
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i17
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i18
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i19
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i20
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitExprStmt
visitCall ident: func
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitVarDef int @loopCount = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x5644cfc31f20
Info: visitVarDef int @global = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x5644cfc31fa0
Info: visitFuncDefvoid @func(int @i0)
Info: visitParamDefint @i0
Info: visitBlock
Info: visitVarDef int @i1 = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x5644cfc32160
Info: visitVarDef int @i2 = 2
Info: visitExpr2
Info: visitAssignmentExpr2
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x5644cfc321e0
Info: visitVarDef int @i3 = 3
Info: visitExpr3
Info: visitAssignmentExpr3
Info: visitExpr3
Info: visitIntLiteralExpr3
ret->type 0x5644cfc32260
Info: visitVarDef int @i4 = 4
Info: visitExpr4
Info: visitAssignmentExpr4
Info: visitExpr4
Info: visitIntLiteralExpr4
ret->type 0x5644cfc322e0
Info: visitVarDef int @i5 = 5
Info: visitExpr5
Info: visitAssignmentExpr5
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x5644cfc323c0
Info: visitVarDef int @i6 = 6
Info: visitExpr6
Info: visitAssignmentExpr6
Info: visitExpr6
Info: visitIntLiteralExpr6
ret->type 0x5644cfc324a0
Info: visitVarDef int @i7 = 7
Info: visitExpr7
Info: visitAssignmentExpr7
Info: visitExpr7
Info: visitIntLiteralExpr7
ret->type 0x5644cfc32580
Info: visitVarDef int @i8 = 8
Info: visitExpr8
Info: visitAssignmentExpr8
Info: visitExpr8
Info: visitIntLiteralExpr8
ret->type 0x5644cfc32660
Info: visitVarDef int @i9 = 9
Info: visitExpr9
Info: visitAssignmentExpr9
Info: visitExpr9
Info: visitIntLiteralExpr9
ret->type 0x5644cfc32740
Info: visitStatementAssign@global = @i0
Info: visitAssignStmtAssign@global = @i0
Info: visitExpr@global
Info: visitLvalExpr@global
Info: visitAssignStmtint
Info: visitExpr@i0
Info: visitLvalExpr@i0
Info: visitVarDef int @i10 = 10
Info: visitExpr10
Info: visitAssignmentExpr10
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x5644cfc32820
Info: visitVarDef int @i11 = 11
Info: visitExpr11
Info: visitAssignmentExpr11
Info: visitExpr11
Info: visitIntLiteralExpr11
ret->type 0x5644cfc32900
Info: visitVarDef int @i12 = 12
Info: visitExpr12
Info: visitAssignmentExpr12
Info: visitExpr12
Info: visitIntLiteralExpr12
ret->type 0x5644cfc329e0
Info: visitVarDef int @i13 = 13
Info: visitExpr13
Info: visitAssignmentExpr13
Info: visitExpr13
Info: visitIntLiteralExpr13
ret->type 0x5644cfc32ac0
Info: visitVarDef int @i14 = 14
Info: visitExpr14
Info: visitAssignmentExpr14
Info: visitExpr14
Info: visitIntLiteralExpr14
ret->type 0x5644cfc32ba0
Info: visitVarDef int @i15 = 15
Info: visitExpr15
Info: visitAssignmentExpr15
Info: visitExpr15
Info: visitIntLiteralExpr15
ret->type 0x5644cfc32c80
Info: visitVarDef int @i16 = 16
Info: visitExpr16
Info: visitAssignmentExpr16
Info: visitExpr16
Info: visitIntLiteralExpr16
ret->type 0x5644cfc32d60
Info: visitVarDef int @i17 = 17
Info: visitExpr17
Info: visitAssignmentExpr17
Info: visitExpr17
Info: visitIntLiteralExpr17
ret->type 0x5644cfc32e40
Info: visitVarDef int @i18 = 18
Info: visitExpr18
Info: visitAssignmentExpr18
Info: visitExpr18
Info: visitIntLiteralExpr18
ret->type 0x5644cfc32f20
Info: visitVarDef int @i19 = 19
Info: visitExpr19
Info: visitAssignmentExpr19
Info: visitExpr19
Info: visitIntLiteralExpr19
ret->type 0x5644cfc33000
Info: visitVarDef int @i20 = 20
Info: visitExpr20
Info: visitAssignmentExpr20
Info: visitExpr20
Info: visitIntLiteralExpr20
ret->type 0x5644cfc330e0
Info: visitStatementReturn  nullptr_for_void_func
Info: visitReturnStmtReturn 0function has returnscope id1
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitStatementCall @func(100)
Info: visitExprStmtCall @func(100)
Info: visitExprCall @func(100)
Info: visiCalltExprCall @func(100)
Info: visitExpr100
Info: visitIntLiteralExpr100
ret->type 0x5644cfc332c0
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x5644cfc33340
Info: visitReturnStmtReturn 0function has returnscope id3
ast: 
Program
  int @loopCount#0 = 0
  int @global#0 = 0
  void @func(int @i0#1)
    {
      int @i1#2 = 1
      int @i2#2 = 2
      int @i3#2 = 3
      int @i4#2 = 4
      int @i5#2 = 5
      int @i6#2 = 6
      int @i7#2 = 7
      int @i8#2 = 8
      int @i9#2 = 9
      Assign@global#0 = @i0#1
      int @i10#2 = 10
      int @i11#2 = 11
      int @i12#2 = 12
      int @i13#2 = 13
      int @i14#2 = 14
      int @i15#2 = 15
      int @i16#2 = 16
      int @i17#2 = 17
      int @i18#2 = 18
      int @i19#2 = 19
      int @i20#2 = 20
      Return 0
    }
  int @main()
    {
      Call @func        100
      Return 0
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visit decl global var
visit_global_init
visitExpressionVal
visit decl global var done
visit decl global var
visit_global_init
visitExpressionVal
visit decl global var done
visitFunction func
visitFunction param decl: i0#1
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionLValue i0#1
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function func has 45 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 3 regs
B2:
  prev: 
  succ: 
B3:
  prev: 
  succ: 

B2:
  prev: 
  succ: 

entryB2
reverse_postorderB2
B2:
  doms: 
  domed_by: B2 

B2:
  DF: 

ir:
; module
@loopCount#0 = global int 0, 4
@global#0 = global int 0, 4
define i32 @main(){
B2:
  %2 = 100
  %1 = call@func(i32 %2)
  %3 = 0
  ret i32 %3

}
define void @func(i32){
B0:
  %4 = 1
  %6 = 2
  %8 = 3
  %10 = 4
  %12 = 5
  %14 = 6
  %16 = 7
  %18 = 8
  %20 = 9
  %22 = loadaddr @global#0
  store i32 %1, ptr %22
  %24 = 10
  %26 = 11
  %28 = 12
  %30 = 13
  %32 = 14
  %34 = 15
  %36 = 16
  %38 = 17
  %40 = 18
  %42 = 19
  %44 = 20
  %45 = 0
  ret i32 %45

}
---------------------------------ir after dce-------------------------------------
main
Info: bbBasicBlock has no String!
Info: LoadInt%2 = 100
Info: Call%1 = call@func(i32 %2)
Info: LoadInt%3 = 0
Info: Returnret i32 %3
func
Info: bbBasicBlock has no String!
Info: LoadInt%4 = 1
Info: LoadInt%6 = 2
Info: LoadInt%8 = 3
Info: LoadInt%10 = 4
Info: LoadInt%12 = 5
Info: LoadInt%14 = 6
Info: LoadInt%16 = 7
Info: LoadInt%18 = 8
Info: LoadInt%20 = 9
Info: LoadAddr%22 = loadaddr @global#0
Info: Storestore i32 %1, ptr %22
Info: LoadInt%24 = 10
Info: LoadInt%26 = 11
Info: LoadInt%28 = 12
Info: LoadInt%30 = 13
Info: LoadInt%32 = 14
Info: LoadInt%34 = 15
Info: LoadInt%36 = 16
Info: LoadInt%38 = 17
Info: LoadInt%40 = 18
Info: LoadInt%42 = 19
Info: LoadInt%44 = 20
Info: LoadInt%45 = 0
Info: Returnret i32 %45
dead var: 4
dead var: 6
dead var: 8
dead var: 10
dead var: 12
dead var: 14
dead var: 16
dead var: 18
dead var: 20
dead var: 24
dead var: 26
dead var: 28
dead var: 30
dead var: 32
dead var: 34
dead var: 36
dead var: 38
dead var: 40
dead var: 42
dead var: 44
; module
@loopCount#0 = global int 0, 4
@global#0 = global int 0, 4
define i32 @main(){
B2:
  %2 = 100
  %1 = call@func(i32 %2)
  %3 = 0
  ret i32 %3

}
define void @func(i32){
B0:
  %22 = loadaddr @global#0
  store i32 %1, ptr %22
  %45 = 0
  ret i32 %45

}
--------------------------- building riscv ---------------------------
riscv: 
    li T[-2], 100
    mv a1, T[-2]
    call func
    mv T[-1], a0
    li T[-3], 0
    mv a0, T[-3]
    ret
    la T[-22], global
    sw a1, 0(T[-22])
    li T[-45], 0
    mv a0, T[-45]
    ret
?
func
func Main()
func
after compute reg_used
after prologue
end of emitend
main
main Main()
main
after compute reg_used
after prologue
end of emitend
