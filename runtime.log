--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) FourWhile ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef a) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal a) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 5))))))) ;)) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef b) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef c) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal b) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 6))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal c) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 7))))))) ;)) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef d) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal d) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 10))))))) ;)) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal a)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 20))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal a) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal a))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 3))))))) ;)) 
                                    (blockItem 
                                        (stmt while ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal b)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 10))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal b) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal b))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) 
                                                    (blockItem 
                                                        (stmt while ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (eqExp 
                                                                            (eqExp 
                                                                                (relExp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal c))))))) == 
                                                                            (relExp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 7))))))))))) ) 
                                                            (stmt 
                                                                (block { 
                                                                    (blockItem 
                                                                        (stmt 
                                                                            (lVal c) = 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal c))))) - 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 1))))))) ;)) 
                                                                    (blockItem 
                                                                        (stmt while ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (eqExp 
                                                                                            (relExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal d)))))) < 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (number 
                                                                                                                    (intConst 20))))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (lVal d) = 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal d))))) + 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (number 
                                                                                                                    (intConst 3))))))) ;)) })))) 
                                                                    (blockItem 
                                                                        (stmt 
                                                                            (lVal d) = 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal d))))) - 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 1))))))) ;)) })))) 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal c) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal c))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) })))) 
                                    (blockItem 
                                        (stmt 
                                            (lVal b) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal b))))) - 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 2))))))) ;)) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp ( 
                                                (exp 
                                                    (addExp 
                                                        (addExp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (lVal a))))) + 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp ( 
                                                                        (exp 
                                                                            (addExp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (lVal b))))) + 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal d)))))) ))))) + 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal c)))))) )))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp FourWhile ( ))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: FourWhile
visitVarDecl: int start
visitVarDecl: ident: a
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: b
visitVarDecl: int start
visitVarDecl: ident: c
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: d
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitPrimaryExp_ exp
visitPrimaryExp_ exp
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitCall ident: FourWhile
visitCall args_list size: 0
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefint @FourWhile()
Info: visitBlock
Info: visitVarDef int @a
Info: visitStatementAssign@a = 5
Info: visitAssignStmtAssign@a = 5
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x55d9049dc570
Info: visitVarDef int @b
Info: visitVarDef int @c
Info: visitStatementAssign@b = 6
Info: visitAssignStmtAssign@b = 6
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmtint
Info: visitExpr6
Info: visitIntLiteralExpr6
ret->type 0x55d9049dc5a0
Info: visitStatementAssign@c = 7
Info: visitAssignStmtAssign@c = 7
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmtint
Info: visitExpr7
Info: visitIntLiteralExpr7
ret->type 0x55d9049dc5d0
Info: visitVarDef int @d
Info: visitStatementAssign@d = 10
Info: visitAssignStmtAssign@d = 10
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitAssignStmtint
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55d9049dc600
Info: visitStatementWhile
Info: visitExpr@a<20
Info: visitBinopExpr@a<20
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr20
Info: visitIntLiteralExpr20
ret->type 0x55d9049dc630
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@a = @a+3
Info: visitAssignStmtAssign@a = @a+3
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr@a+3
Info: visitBinopExpr@a+3
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr3
Info: visitIntLiteralExpr3
ret->type 0x55d9049dc540
Info: visitStatementWhile
Info: visitExpr@b<10
Info: visitBinopExpr@b<10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55d9049dc750
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@b = @b+1
Info: visitAssignStmtAssign@b = @b+1
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmtint
Info: visitExpr@b+1
Info: visitBinopExpr@b+1
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55d9049dc820
Info: visitStatementWhile
Info: visitExpr@c==7
Info: visitBinopExpr@c==7
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr7
Info: visitIntLiteralExpr7
ret->type 0x55d9049dc850
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@c = @c-1
Info: visitAssignStmtAssign@c = @c-1
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmtint
Info: visitExpr@c-1
Info: visitBinopExpr@c-1
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55d9049dc920
Info: visitStatementWhile
Info: visitExpr@d<20
Info: visitBinopExpr@d<20
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitExpr20
Info: visitIntLiteralExpr20
ret->type 0x55d9049dc950
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@d = @d+3
Info: visitAssignStmtAssign@d = @d+3
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitAssignStmtint
Info: visitExpr@d+3
Info: visitBinopExpr@d+3
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitExpr3
Info: visitIntLiteralExpr3
ret->type 0x55d9049dc9d0
Info: visitStatementAssign@d = @d-1
Info: visitAssignStmtAssign@d = @d-1
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitAssignStmtint
Info: visitExpr@d-1
Info: visitBinopExpr@d-1
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55d9049dca00
Info: visitStatementAssign@c = @c+1
Info: visitAssignStmtAssign@c = @c+1
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmtint
Info: visitExpr@c+1
Info: visitBinopExpr@c+1
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55d9049dca30
Info: visitStatementAssign@b = @b-2
Info: visitAssignStmtAssign@b = @b-2
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmtint
Info: visitExpr@b-2
Info: visitBinopExpr@b-2
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55d9049dca60
Info: visitStatementReturn @a+@b+@d+@c
Info: visitExpr@a+@b+@d+@c
Info: visitBinopExpr@a+@b+@d+@c
Info: visitExpr@a+@b+@d
Info: visitBinopExpr@a+@b+@d
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@b+@d
Info: visitBinopExpr@b+@d
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitReturnStmtReturn @a#2+@b#2+@d#2+@c#2function has returnscope id1
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitStatementReturn Call @FourWhile()
Info: visitExprCall @FourWhile()
Info: visiCalltExprCall @FourWhile()
Info: visitReturnStmtReturn Call @FourWhile()function has returnscope id11
ast: 
Program
  int @FourWhile()
    {
      int @a#2
      Assign@a#2 = 5
      int @b#2
      int @c#2
      Assign@b#2 = 6
      Assign@c#2 = 7
      int @d#2
      Assign@d#2 = 10
      While        @a#2<20
        {
          Assign@a#2 = @a#2+3
          While            @b#2<10
            {
              Assign@b#2 = @b#2+1
              While                @c#2==7
                {
                  Assign@c#2 = @c#2-1
                  While                    @d#2<20
                    {
                      Assign@d#2 = @d#2+3
                    }
                  Assign@d#2 = @d#2-1
                }
              Assign@c#2 = @c#2+1
            }
          Assign@b#2 = @b#2-2
        }
      Return @a#2+@b#2+@d#2+@c#2
    }
  int @main()
    {
      Return Call @FourWhile()
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visitFunction FourWhile
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue b#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue b#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue d#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue d#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue d#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue b#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue a#2
visitExpression
visitExpression
visitExpressionLValue b#2
visitExpression
visitExpressionLValue d#2
visitExpression
visitExpressionLValue c#2
function FourWhile has 48 regs
B0:
  prev: 
  succ: B1 
B1:
  prev: B0 B6 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 
  succ: 
B4:
  prev: B2 B9 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B7 
B6:
  prev: B4 
  succ: B1 
B7:
  prev: B5 B12 
  succ: B8 B9 
B8:
  prev: B7 
  succ: B10 
B9:
  prev: B7 
  succ: B4 
B10:
  prev: B8 B11 
  succ: B11 B12 
B11:
  prev: B10 
  succ: B10 
B12:
  prev: B10 
  succ: B7 
B13:
  prev: 
  succ: 

B0:
  prev: 
  succ: B1 
B1:
  prev: B0 B6 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 
  succ: 
B4:
  prev: B2 B9 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B7 
B6:
  prev: B4 
  succ: B1 
B7:
  prev: B5 B12 
  succ: B8 B9 
B8:
  prev: B7 
  succ: B10 
B9:
  prev: B7 
  succ: B4 
B10:
  prev: B8 B11 
  succ: B11 B12 
B11:
  prev: B10 
  succ: B10 
B12:
  prev: B10 
  succ: B7 

entryB0
B1
B2
B3
B4
B5
B6
B7
B8
B9
B10
B11
B12
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB2
reverse_postorderB4
reverse_postorderB6
reverse_postorderB5
reverse_postorderB7
reverse_postorderB9
reverse_postorderB8
reverse_postorderB10
reverse_postorderB12
reverse_postorderB11
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB2
reverse_postorderB4
reverse_postorderB6
reverse_postorderB5
reverse_postorderB7
reverse_postorderB9
reverse_postorderB8
reverse_postorderB10
reverse_postorderB12
reverse_postorderB11
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 
  domed_by: B0 B1 
B2:
  doms: B4 
  domed_by: B0 B1 B2 
B3:
  doms: 
  domed_by: B0 B1 B3 
B4:
  doms: B5 B6 
  domed_by: B0 B1 B2 B4 
B5:
  doms: B7 
  domed_by: B0 B1 B2 B4 B5 
B6:
  doms: 
  domed_by: B0 B1 B2 B4 B6 
B7:
  doms: B8 B9 
  domed_by: B0 B1 B2 B4 B5 B7 
B8:
  doms: B10 
  domed_by: B0 B1 B2 B4 B5 B7 B8 
B9:
  doms: 
  domed_by: B0 B1 B2 B4 B5 B7 B9 
B10:
  doms: B11 B12 
  domed_by: B0 B1 B2 B4 B5 B7 B8 B10 
B11:
  doms: 
  domed_by: B0 B1 B2 B4 B5 B7 B8 B10 B11 
B12:
  doms: 
  domed_by: B0 B1 B2 B4 B5 B7 B8 B10 B12 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: B1 
B3:
  DF: 
B4:
  DF: B1 
B5:
  DF: B4 
B6:
  DF: B1 
B7:
  DF: B4 
B8:
  DF: B7 
B9:
  DF: B4 
B10:
  DF: B7 
B11:
  DF: B10 
B12:
  DF: B7 

visitFunction main
visitBlock 
visitStatement
visitExpression
function main has 1 regs
B14:
  prev: 
  succ: 
B15:
  prev: 
  succ: 

B14:
  prev: 
  succ: 

entryB14
reverse_postorderB14
B14:
  doms: 
  domed_by: B14 

B14:
  DF: 

ir:
; module
define i32 @main(){
B14:
  %1 = call i32 @FourWhile()
  ret i32 %1

}
define i32 @FourWhile(){
B0:
  %1 = alloca int, 4
  %2 = 5
  store i32 %2, ptr %1
  %3 = alloca int, 4
  %4 = alloca int, 4
  %5 = 6
  store i32 %5, ptr %3
  %6 = 7
  store i32 %6, ptr %4
  %7 = alloca int, 4
  %8 = 10
  store i32 %8, ptr %7
  br label B1

B1:
  %9 = load i32, ptr %1
  %10 = 20
  %11 = icmp slt i32 %9, %10
  br i32 %11, label B2, label B3

B2:
  %12 = load i32, ptr %1
  %13 = 3
  %14 = add i32 %12, %13
  store i32 %14, ptr %1
  br label B4

B3:
  %42 = load i32, ptr %1
  %43 = load i32, ptr %3
  %44 = load i32, ptr %7
  %45 = add i32 %43, %44
  %46 = add i32 %42, %45
  %47 = load i32, ptr %4
  %48 = add i32 %46, %47
  ret i32 %48

B4:
  %15 = load i32, ptr %3
  %16 = 10
  %17 = icmp slt i32 %15, %16
  br i32 %17, label B5, label B6

B5:
  %18 = load i32, ptr %3
  %19 = 1
  %20 = add i32 %18, %19
  store i32 %20, ptr %3
  br label B7

B6:
  %39 = load i32, ptr %3
  %40 = 2
  %41 = sub i32 %39, %40
  store i32 %41, ptr %3
  br label B1

B7:
  %21 = load i32, ptr %4
  %22 = 7
  %23 = icmp eq i32 %21, %22
  br i32 %23, label B8, label B9

B8:
  %24 = load i32, ptr %4
  %25 = 1
  %26 = sub i32 %24, %25
  store i32 %26, ptr %4
  br label B10

B9:
  %36 = load i32, ptr %4
  %37 = 1
  %38 = add i32 %36, %37
  store i32 %38, ptr %4
  br label B4

B10:
  %27 = load i32, ptr %7
  %28 = 20
  %29 = icmp slt i32 %27, %28
  br i32 %29, label B11, label B12

B11:
  %30 = load i32, ptr %7
  %31 = 3
  %32 = add i32 %30, %31
  store i32 %32, ptr %7
  br label B10

B12:
  %33 = load i32, ptr %7
  %34 = 1
  %35 = sub i32 %33, %34
  store i32 %35, ptr %7
  br label B7

}
--------------------------- building riscv ---------------------------
riscv: 
?
FourWhile
FourWhile
after compute reg_used
after prologue
end of emitend
main
main
after compute reg_used
after prologue
end of emitend
