--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef c = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 4))))))))) ;))) 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal c)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 75))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef d = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (number 
                                                                                (intConst 42))))))))) ;))) 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal c)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 100))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal c) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal c))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 42))))))) ;)) 
                                                    (blockItem 
                                                        (stmt if ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (eqExp 
                                                                            (relExp 
                                                                                (relExp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal c)))))) > 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 99))))))))))) ) 
                                                            (stmt 
                                                                (block { 
                                                                    (blockItem 
                                                                        (decl 
                                                                            (varDecl 
                                                                                (bType int) 
                                                                                (varDef e = 
                                                                                    (initVal 
                                                                                        (exp 
                                                                                            (addExp 
                                                                                                (mulExp 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (number 
                                                                                                                (intConst 84))))))))) ;))) 
                                                                    (blockItem 
                                                                        (stmt 
                                                                            (lVal c) = 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 168))))))) ;)) })))) })))) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal c)))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: c
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: d
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: e
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitBlock done!
visitBlock done!
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitVarDef int @c = 4
Info: visitExpr4
Info: visitAssignmentExpr4
Info: visitExpr4
Info: visitIntLiteralExpr4
ret->type 0x5560588058d0
Info: visitStatementIfElse
Info: visitExpr@c<75
Info: visitBinopExpr@c<75
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr75
Info: visitIntLiteralExpr75
ret->type 0x556058805900
Info: visitStatement
Info: visitBlock
Info: visitVarDef int @d = 42
Info: visitExpr42
Info: visitAssignmentExpr42
Info: visitExpr42
Info: visitIntLiteralExpr42
ret->type 0x556058805930
Info: visitStatementIfElse
Info: visitExpr@c<100
Info: visitBinopExpr@c<100
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr100
Info: visitIntLiteralExpr100
ret->type 0x556058805960
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@c = @c+42
Info: visitAssignStmtAssign@c = @c+42
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmtint
Info: visitExpr@c+42
Info: visitBinopExpr@c+42
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr42
Info: visitIntLiteralExpr42
ret->type 0x5560588058a0
Info: visitStatementIfElse
Info: visitExpr@c>99
Info: visitBinopExpr@c>99
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr99
Info: visitIntLiteralExpr99
ret->type 0x556058805bc0
Info: visitStatement
Info: visitBlock
Info: visitVarDef int @e = 84
Info: visitExpr84
Info: visitAssignmentExpr84
Info: visitExpr84
Info: visitIntLiteralExpr84
ret->type 0x556058805bf0
Info: visitStatementAssign@c = 168
Info: visitAssignStmtAssign@c = 168
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmtint
Info: visitExpr168
Info: visitIntLiteralExpr168
ret->type 0x556058805c70
Info: visitStatementReturn @c
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitReturnStmtReturn @c#2function has returnscope id1
ast: 
Program
  int @main()
    {
      int @c#2 = 4
      If        @c#2<75
        {
          int @d#3 = 42
          If            @c#2<100
            {
              Assign@c#2 = @c#2+42
              If                @c#2>99
                {
                  int @e#5 = 84
                  Assign@c#2 = 168
                }
            }
        }
      Return @c#2
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionLValue c#2
function main has 20 regs
B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 B6 
  succ: 
B4:
  prev: B2 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B7 
B6:
  prev: B4 B9 
  succ: B3 
B7:
  prev: B5 
  succ: B8 B9 
B8:
  prev: B7 
  succ: B9 
B9:
  prev: B7 B8 
  succ: B6 
B10:
  prev: 
  succ: 

B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 B6 
  succ: 
B4:
  prev: B2 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B7 
B6:
  prev: B4 B9 
  succ: B3 
B7:
  prev: B5 
  succ: B8 B9 
B8:
  prev: B7 
  succ: B9 
B9:
  prev: B7 B8 
  succ: B6 

entryB0
B1
B2
B3
B4
B5
B6
B7
B8
B9
reverse_postorderB0
reverse_postorderB1
reverse_postorderB2
reverse_postorderB4
reverse_postorderB5
reverse_postorderB7
reverse_postorderB8
reverse_postorderB9
reverse_postorderB6
reverse_postorderB3
reverse_postorderB0
reverse_postorderB1
reverse_postorderB2
reverse_postorderB4
reverse_postorderB5
reverse_postorderB7
reverse_postorderB8
reverse_postorderB9
reverse_postorderB6
reverse_postorderB3
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 
  domed_by: B0 B1 
B2:
  doms: B4 
  domed_by: B0 B1 B2 
B3:
  doms: 
  domed_by: B0 B1 B3 
B4:
  doms: B5 B6 
  domed_by: B0 B1 B2 B4 
B5:
  doms: B7 
  domed_by: B0 B1 B2 B4 B5 
B6:
  doms: 
  domed_by: B0 B1 B2 B4 B6 
B7:
  doms: B8 B9 
  domed_by: B0 B1 B2 B4 B5 B7 
B8:
  doms: 
  domed_by: B0 B1 B2 B4 B5 B7 B8 
B9:
  doms: 
  domed_by: B0 B1 B2 B4 B5 B7 B9 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: B3 
B3:
  DF: 
B4:
  DF: B3 
B5:
  DF: B6 
B6:
  DF: B3 
B7:
  DF: B6 
B8:
  DF: B9 
B9:
  DF: B6 

1____________________________________________________
dead code elimination ----------------------------------------------------------
main
B0
LoadInt
Other Instr
B1
LoadInt
Binary
Other Instr
B2
LoadInt
Other Instr
B3
Phi
Phi
Phi
Return
B4
LoadInt
Binary
Other Instr
B5
LoadInt
Binary
Other Instr
B6
Phi
Phi
Other Instr
B7
LoadInt
Binary
Other Instr
B8
LoadInt
LoadInt
Other Instr
B9
Phi
Phi
Other Instr
dead code elimination ----------------------------------------------------------
ir:
; module
define i32 @main(){
B0:
  %r2 = add i32 0, 4 ; loadint
  br label %B1

B1:
  %r4 = add i32 0, 75 ; loadint
  %r5 = icmp slt i32 %r2, %r4
  br i1 %r5, label %B2, label %B3

B2:
  %r7 = add i32 0, 42 ; loadint
  br label %B4

B3:
  %r25 = phi i32 [ %r23, %B6 ]
  %r26 = phi i32 [ %r7, %B6 ]
  %r27 = phi i32 [ %r2, %B1 ], [ %r24, %B6 ]
  ret i32 %r27

B4:
  %r9 = add i32 0, 100 ; loadint
  %r10 = icmp slt i32 %r2, %r9
  br i1 %r10, label %B5, label %B6

B5:
  %r12 = add i32 0, 42 ; loadint
  %r13 = add i32 %r2, %r12
  br label %B7

B6:
  %r23 = phi i32 [ %r21, %B9 ]
  %r24 = phi i32 [ %r2, %B4 ], [ %r22, %B9 ]
  br label %B3

B7:
  %r15 = add i32 0, 99 ; loadint
  %r16 = icmp sgt i32 %r13, %r15
  br i1 %r16, label %B8, label %B9

B8:
  %r18 = add i32 0, 84 ; loadint
  %r19 = add i32 0, 168 ; loadint
  br label %B9

B9:
  %r21 = phi i32 [ %r18, %B8 ]
  %r22 = phi i32 [ %r13, %B7 ], [ %r19, %B8 ]
  br label %B6

}
--------------------------- building riscv ---------------------------
riscv: 
T[-23] B7
T[-7] B7
T[-2] B2
T[-24] B7
T[-21] B10
T[-2] B5
T[-22] B10
T[-18] B9
T[-13] B8
T[-19] B9
    li T[-2], 4
    j B2
    li T[-4], 75
    slt T[-5], T[-2], T[-4]
    beq x0, T[-5], B4
    j B3
    li T[-7], 42
    j B5
    phi T[-25] = T[-23] B7
[ T[-23], B7] 
    phi T[-26] = T[-7] B7
[ T[-7], B7] 
    phi T[-27] = T[-2] B2
[ T[-2], B2] T[-24] B7
[ T[-24], B7] 
    mv a0, T[-27]
    ret
    li T[-9], 100
    slt T[-10], T[-2], T[-9]
    beq x0, T[-10], B7
    j B6
    li T[-12], 42
    add T[-13], T[-2], T[-12]
    j B8
    phi T[-23] = T[-21] B10
[ T[-21], B10] 
    phi T[-24] = T[-2] B5
[ T[-2], B5] T[-22] B10
[ T[-22], B10] 
    j B4
    li T[-15], 99
    sgt T[-16], T[-13], T[-15]
    beq x0, T[-16], B10
    j B9
    li T[-18], 84
    li T[-19], 168
    j B10
    phi T[-21] = T[-18] B9
[ T[-18], B9] 
    phi T[-22] = T[-13] B8
[ T[-13], B8] T[-19] B9
[ T[-19], B9] 
    j B7
?
main
main Main()
main
after compute reg_used
after prologue
end of emitend
