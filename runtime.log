--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) get_one ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) a)) ) 
                (block { 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 1))))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) deepWhileBr ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) a) , 
                    (funcFParam 
                        (bType int) b)) ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef c) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal c) = 
                            (exp 
                                (addExp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (lVal a))))) + 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal b)))))) ;)) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal c)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 75))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef d) ;))) 
                                    (blockItem 
                                        (stmt 
                                            (lVal d) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 42))))))) ;)) 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal c)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 100))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal c) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal c))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal d)))))) ;)) })))) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp ( 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal c)))))) )))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef p) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal p) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 2))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal p) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp deepWhileBr ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal p))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal p)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putint ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal p)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: get_one
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: deepWhileBr
visitVarDecl: int start
visitVarDecl: ident: c
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: d
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitAssign done!
visitBlock done!
visitBlock done!
visitPrimaryExp_ exp
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: p
visitPrimaryExp_ number
visitAssign done!
visitCall ident: deepWhileBr
visitFuncRParams
visitCall args_list size: 2
visitAssign done!
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitCall args_list size: 1
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefint @get_one(int @a)
Info: visitParamDefint @a
Info: visitBlock
Info: visitStatementReturn 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55815334bf90
Info: visitReturnStmtReturn 1function has returnscope id1
Info: visitFuncDefint @deepWhileBr(int @a, int @b)
Info: visitParamDefint @a
Info: visitParamDefint @b
Info: visitBlock
Info: visitVarDef int @c
Info: visitStatementAssign@c = @a+@b
Info: visitAssignStmtAssign@c = @a+@b
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmtint
Info: visitExpr@a+@b
Info: visitBinopExpr@a+@b
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitStatementWhile
Info: visitExpr@c<75
Info: visitBinopExpr@c<75
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr75
Info: visitIntLiteralExpr75
ret->type 0x55815334c040
Info: visitStatement
Info: visitBlock
Info: visitVarDef int @d
Info: visitStatementAssign@d = 42
Info: visitAssignStmtAssign@d = 42
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitAssignStmtint
Info: visitExpr42
Info: visitIntLiteralExpr42
ret->type 0x55815334be50
Info: visitStatementIfElse
Info: visitExpr@c<100
Info: visitBinopExpr@c<100
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr100
Info: visitIntLiteralExpr100
ret->type 0x55815334bfc0
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@c = @c+@d
Info: visitAssignStmtAssign@c = @c+@d
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmtint
Info: visitExpr@c+@d
Info: visitBinopExpr@c+@d
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitStatementReturn @c
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitReturnStmtReturn @c#4function has returnscope id3
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitVarDef int @p
Info: visitStatementAssign@p = 2
Info: visitAssignStmtAssign@p = 2
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitAssignStmtint
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55815334c250
Info: visitStatementAssign@p = Call @deepWhileBr(@p, @p)
Info: visitAssignStmtAssign@p = Call @deepWhileBr(@p, @p)
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitAssignStmtint
Info: visitExprCall @deepWhileBr(@p, @p)
Info: visiCalltExprCall @deepWhileBr(@p, @p)
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitStatementCall @putint(@p)
Info: visitExprStmtCall @putint(@p)
Info: visitExprCall @putint(@p)
Info: visiCalltExprCall @putint(@p)
Info: use of undeclared function putint
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55815334c330
Info: visitReturnStmtReturn 0function has returnscope id8
ast: 
Program
  int @get_one(int @a#1)
    {
      Return 1
    }
  int @deepWhileBr(int @a#3, int @b#3)
    {
      int @c#4
      Assign@c#4 = @a#3+@b#3
      While        @c#4<75
        {
          int @d#6
          Assign@d#6 = 42
          If            @c#4<100
            {
              Assign@c#4 = @c#4+@d#6
            }
        }
      Return @c#4
    }
  int @main()
    {
      int @p#9
      Assign@p#9 = 2
      Assign@p#9 = Call @deepWhileBr(@p#9, @p#9)
      Call @putint
        @p#9
      Return 0
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visitFunction get_one
visitFunction param decl: a#1
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function get_one has 3 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visitFunction deepWhileBr
visitFunction param decl: a#3
visitFunction param decl: b#3
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#3
visitExpression
visitExpressionLValue b#3
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#4
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#4
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#4
visitExpression
visitExpressionLValue d#6
visitStatement
visitExpression
visitExpressionLValue c#4
function deepWhileBr has 20 regs
B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B8 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B8 
B8:
  prev: B6 B7 
  succ: B3 
B9:
  prev: 
  succ: 

B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B8 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B8 
B8:
  prev: B6 B7 
  succ: B3 

entryB2
B3
B4
B5
B6
B7
B8
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB7
reverse_postorderB8
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB7
reverse_postorderB8
B2:
  doms: B3 
  domed_by: B2 
B3:
  doms: B4 B5 
  domed_by: B2 B3 
B4:
  doms: B6 
  domed_by: B2 B3 B4 
B5:
  doms: 
  domed_by: B2 B3 B5 
B6:
  doms: B7 B8 
  domed_by: B2 B3 B4 B6 
B7:
  doms: 
  domed_by: B2 B3 B4 B6 B7 
B8:
  doms: 
  domed_by: B2 B3 B4 B6 B8 

B2:
  DF: 
B3:
  DF: 
B4:
  DF: B3 
B5:
  DF: 
B6:
  DF: B3 
B7:
  DF: B8 
B8:
  DF: B3 

visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue p#9
visitExpression
visitExpressionLValue p#9
visitStatement
visitExpression
visitExpression
visitExpressionLValue p#9
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 8 regs
B10:
  prev: 
  succ: 
B11:
  prev: 
  succ: 

B10:
  prev: 
  succ: 

entryB10
reverse_postorderB10
B10:
  doms: 
  domed_by: B10 

B10:
  DF: 

ir:
; module
define i32 @main(){
B10:
  %2 = 2
  %3 = call i32 @deepWhileBr(i32 %2i32 %2)
  %6 = call i32 @putint(i32 %3)
  %8 = 0
  ret i32 %8

}
define i32 @deepWhileBr(i32, i32){
B2:
  %8 = add i32 %1, %2
  br label B3

B3:
  %9 = phi i32 [ %21889, B2 ], [ %13, B8 ]
  %10 = 75
  %11 = icmp slt i32 %8, %10
  br i32 %11, label B4, label B5

B4:
  %13 = 42
  br label B6

B5:
  ret i32 %8

B6:
  %15 = 100
  %16 = icmp slt i32 %8, %15
  br i32 %16, label B7, label B8

B7:
  %19 = add i32 %8, %13
  br label B8

B8:
  %10 = phi i32 [ %8, B6 ], [ %19, B7 ]
  br label B3

}
define i32 @get_one(i32){
B0:
  %3 = 1
  ret i32 %3

}
--------------------------- building riscv ---------------------------
riscv: 
T[-21889] B3
T[-13] B9
T[-8] B7
T[-19] B8
