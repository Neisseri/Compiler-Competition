--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType void) init ( ) 
                (block { }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef t = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 1))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef c = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 1))))))))) ;))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal t)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal t) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 0))))))) ;)) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef i = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (number 
                                                                                (intConst 0))))))))) ;))) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp init ( ))))) ;)) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef k = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (number 
                                                                                (intConst 0))))))))) ;))) 
                                    (blockItem 
                                        (stmt while ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal i)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 3))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (decl 
                                                            (varDecl 
                                                                (bType int) 
                                                                (varDef a = 
                                                                    (initVal 
                                                                        (exp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (number 
                                                                                                (intConst 1))))))))) ;))) 
                                                    (blockItem 
                                                        (decl 
                                                            (varDecl 
                                                                (bType int) 
                                                                (varDef b = 
                                                                    (initVal 
                                                                        (exp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (number 
                                                                                                (intConst 1))))))))) ;))) 
                                                    (blockItem 
                                                        (stmt if ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (eqExp 
                                                                            (relExp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 1))))))))))) ) 
                                                            (stmt 
                                                                (block { 
                                                                    (blockItem 
                                                                        (decl 
                                                                            (varDecl 
                                                                                (bType int) 
                                                                                (varDef loc = 
                                                                                    (initVal 
                                                                                        (exp 
                                                                                            (addExp 
                                                                                                (mulExp 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (lVal a)))))))) ;))) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (lAndExp 
                                                                                            (lAndExp 
                                                                                                (eqExp 
                                                                                                    (eqExp 
                                                                                                        (relExp 
                                                                                                            (addExp 
                                                                                                                (mulExp 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (lVal c))))))) != 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp - 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (number 
                                                                                                                                (intConst 1)))))))))) && 
                                                                                            (eqExp 
                                                                                                (eqExp 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (lVal c))))))) != 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp - 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (number 
                                                                                                                            (intConst 1)))))))))) && 
                                                                                        (eqExp 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (number 
                                                                                                                    (intConst 1))))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (decl 
                                                                                            (varDecl 
                                                                                                (bType int) 
                                                                                                (varDef flag = 
                                                                                                    (initVal 
                                                                                                        (exp 
                                                                                                            (addExp 
                                                                                                                (mulExp 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (number 
                                                                                                                                (intConst 1))))))))) ;))) 
                                                                                    (blockItem 
                                                                                        (decl 
                                                                                            (varDecl 
                                                                                                (bType int) 
                                                                                                (varDef tmp = 
                                                                                                    (initVal 
                                                                                                        (exp 
                                                                                                            (addExp 
                                                                                                                (mulExp 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (number 
                                                                                                                                (intConst 1))))))))) ;))) })))) })))) 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal i) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal i))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) })))) 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))))))) ) 
                                            (stmt 
                                                (block { })))) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: init
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: t
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: c
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: i
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitExprStmt
visitCall ident: init
visitCall args_list size: 0
visitVarDecl: int start
visitVarDecl: ident: k
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: a
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: b
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: loc
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: flag
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: tmp
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitBlock done!
visitBlock done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitPrimaryExp_ number
visit block stmt
visitBlock done!
visitBlock done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefvoid @init()
Info: visitBlock
Info: function init has no returnscope id1
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitVarDef i32 @t = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a3e40
Info: visitVarDef i32 @c = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a3f50
Info: visitStatementWhile
Info: visitExpr@t
Info: visitLvalExpr@t
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@t = 0
Info: visitAssignStmtAssign@t = 0
Info: visitExpr@t
Info: visitLvalExpr@t
Info: visitAssignStmti32
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ec749a3d70
Info: visitVarDef i32 @i = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ec749a3fd0
Info: visitStatementCall @init()
Info: visitExprStmtCall @init()
Info: visitExprCall @init()
Info: visiCalltExprCall @init()
Info: visitVarDef i32 @k = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ec749a4140
Info: visitStatementWhile
Info: visitExpr@i<3
Info: visitBinopExpr@i<3
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr3
Info: visitIntLiteralExpr3
ret->type 0x55ec749a41c0
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @a = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a4290
Info: visitVarDef i32 @b = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a4310
Info: visitStatementIfElse
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a43f0
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @loc = @a
Info: visitExpr@a
Info: visitAssignmentExpr@a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitStatementIfElse
Info: visitExpr@c!=-1&&@c!=-1&&1
Info: visitBinopExpr@c!=-1&&@c!=-1&&1
Info: visitExpr@c!=-1&&@c!=-1
Info: visitBinopExpr@c!=-1&&@c!=-1
Info: visitExpr@c!=-1
Info: visitBinopExpr@c!=-1
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a4470
Info: visitExpr@c!=-1
Info: visitBinopExpr@c!=-1
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a45a0
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a45d0
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @flag = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a4600
Info: visitVarDef i32 @tmp = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a4690
Info: visitStatementAssign@i = @i+1
Info: visitAssignStmtAssign@i = @i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmti32
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a4770
Info: visitStatementIfElse
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ec749a47a0
Info: visitStatement
Info: visitBlock
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ec749a47d0
Info: visitReturnStmtReturn 0function has returnscope id3
ast: 
Program
  void @init()
    {
      Return 0
    }
  i32 @main()
    {
      i32 @t#4 = 1
      i32 @c#4 = 1
      While        @t#4        {
          Assign@t#4 = 0
          i32 @i#6 = 0
          Call @init            
          i32 @k#6 = 0
          While            @i#6<3
            {
              i32 @a#8 = 1
              i32 @b#8 = 1
              If                1
                {
                  i32 @loc#9 = @a#8
                  If                    @c#4!=-1&&@c#4!=-1&&1
                    {
                      i32 @flag#10 = 1
                      i32 @tmp#10 = 1
                    }
                }
              Assign@i#6 = @i#6+1
            }
          If            1
            {
            }
        }
      Return 0
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visitFunction init
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function init has 1 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionLValue t#4
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#6
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpressionLValue a#8
visitStatement
visitExpression
visitExpression
visitExpression
visitExpression
visitExpressionLValue c#4
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue c#4
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#6
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 47 regs
B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B23 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 B11 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 
  succ: B21 
B9:
  prev: B7 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 B20 
  succ: B6 
B12:
  prev: B10 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B15 
B14:
  prev: B12 
  succ: B15 
B15:
  prev: B13 B14 
  succ: B16 B17 
B16:
  prev: B15 
  succ: B18 
B17:
  prev: B15 
  succ: B18 
B18:
  prev: B16 B17 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B20 
B20:
  prev: B18 B19 
  succ: B11 
B21:
  prev: B8 
  succ: B22 B23 
B22:
  prev: B21 
  succ: B23 
B23:
  prev: B21 B22 
  succ: B3 
B24:
  prev: 
  succ: 

B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B23 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 B11 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 
  succ: B21 
B9:
  prev: B7 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 B20 
  succ: B6 
B12:
  prev: B10 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B15 
B14:
  prev: B12 
  succ: B15 
B15:
  prev: B13 B14 
  succ: B16 B17 
B16:
  prev: B15 
  succ: B18 
B17:
  prev: B15 
  succ: B18 
B18:
  prev: B16 B17 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B20 
B20:
  prev: B18 B19 
  succ: B11 
B21:
  prev: B8 
  succ: B22 B23 
B22:
  prev: B21 
  succ: B23 
B23:
  prev: B21 B22 
  succ: B3 

entryB2
B3
B4
B5
B6
B7
B8
B9
B10
B11
B12
B13
B14
B15
B16
B17
B18
B19
B20
B21
B22
B23
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB8
reverse_postorderB21
reverse_postorderB22
reverse_postorderB23
reverse_postorderB7
reverse_postorderB9
reverse_postorderB10
reverse_postorderB12
reverse_postorderB14
reverse_postorderB13
reverse_postorderB15
reverse_postorderB17
reverse_postorderB16
reverse_postorderB18
reverse_postorderB19
reverse_postorderB20
reverse_postorderB11
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB8
reverse_postorderB21
reverse_postorderB22
reverse_postorderB23
reverse_postorderB7
reverse_postorderB9
reverse_postorderB10
reverse_postorderB12
reverse_postorderB14
reverse_postorderB13
reverse_postorderB15
reverse_postorderB17
reverse_postorderB16
reverse_postorderB18
reverse_postorderB19
reverse_postorderB20
reverse_postorderB11
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B6 func: main
compute_dom_fro bb: B6 func: main
compute_dom_fro bb: B6 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B11 func: main
compute_dom_fro bb: B15 func: main
compute_dom_fro bb: B15 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B20 func: main
compute_dom_fro bb: B23 func: main
B2:
  doms: B3 
  domed_by: B2 
B3:
  doms: B4 B5 
  domed_by: B2 B3 
B4:
  doms: B6 
  domed_by: B2 B3 B4 
B5:
  doms: 
  domed_by: B2 B3 B5 
B6:
  doms: B7 B8 
  domed_by: B2 B3 B4 B6 
B7:
  doms: B9 
  domed_by: B2 B3 B4 B6 B7 
B8:
  doms: B21 
  domed_by: B2 B3 B4 B6 B8 
B9:
  doms: B10 B11 
  domed_by: B2 B3 B4 B6 B7 B9 
B10:
  doms: B12 
  domed_by: B2 B3 B4 B6 B7 B9 B10 
B11:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B11 
B12:
  doms: B13 B14 B15 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 
B13:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B13 
B14:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B14 
B15:
  doms: B16 B17 B18 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 
B16:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B16 
B17:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B17 
B18:
  doms: B19 B20 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B18 
B19:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B18 B19 
B20:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B15 B18 B20 
B21:
  doms: B22 B23 
  domed_by: B2 B3 B4 B6 B8 B21 
B22:
  doms: 
  domed_by: B2 B3 B4 B6 B8 B21 B22 
B23:
  doms: 
  domed_by: B2 B3 B4 B6 B8 B21 B23 

B2:
  DF: 
B3:
  DF: 
B4:
  DF: B3 
B5:
  DF: 
B6:
  DF: B3 
B7:
  DF: B6 
B8:
  DF: B3 
B9:
  DF: B6 
B10:
  DF: B11 
B11:
  DF: B6 
B12:
  DF: B11 
B13:
  DF: B15 
B14:
  DF: B15 
B15:
  DF: B11 
B16:
  DF: B18 
B17:
  DF: B18 
B18:
  DF: B11 
B19:
  DF: B20 
B20:
  DF: B11 
B21:
  DF: B3 
B22:
  DF: B23 
B23:
  DF: B3 

ir_origin:
; module
define i32 @main(){
B2:
  %r1 = alloca i32, i32 4
  %r2 = add i32 0, 1 ; loadint
  store t#4 i32 %r2, ptr %r1
  %r3 = alloca i32, i32 4
  %r4 = add i32 0, 1 ; loadint
  store c#4 i32 %r4, ptr %r3
  br label %B3

B3:
  %r5 = load t#4 i32, ptr %r1
  br i1 %r5, label %B4, label %B5

B4:
  %r6 = add i32 0, 0 ; loadint
  store t#4 i32 %r6, ptr %r1
  %r7 = alloca i32, i32 4
  %r8 = add i32 0, 0 ; loadint
  store i#6 i32 %r8, ptr %r7
  %r9 = call i32 @init()
  %r10 = alloca i32, i32 4
  %r11 = add i32 0, 0 ; loadint
  store k#6 i32 %r11, ptr %r10
  br label %B6

B5:
  %r47 = add i32 0, 0 ; loadint
  ret i32 %r47

B6:
  %r12 = load i#6 i32, ptr %r7
  %r13 = add i32 0, 3 ; loadint
  %r14 = icmp slt i32 %r12, %r13
  br i1 %r14, label %B7, label %B8

B7:
  %r15 = alloca i32, i32 4
  %r16 = add i32 0, 1 ; loadint
  store a#8 i32 %r16, ptr %r15
  %r17 = alloca i32, i32 4
  %r18 = add i32 0, 1 ; loadint
  store b#8 i32 %r18, ptr %r17
  br label %B9

B8:
  br label %B21

B9:
  %r19 = add i32 0, 1 ; loadint
  br i1 %r19, label %B10, label %B11

B10:
  %r20 = alloca i32, i32 4
  %r21 = load a#8 i32, ptr %r15
  store loc#9 i32 %r21, ptr %r20
  br label %B12

B11:
  %r43 = load i#6 i32, ptr %r7
  %r44 = add i32 0, 1 ; loadint
  %r45 = add i32 %r43, %r44
  store i#6 i32 %r45, ptr %r7
  br label %B6

B12:
  %r22 = alloca i32, i32 4
  %r23 = alloca i32, i32 4
  %r24 = load c#4 i32, ptr %r3
  %r25 = add i32 0, 1 ; loadint
  %r27 = add i32 0, 0 ; loadint
  %r26 = sub i32 %r27, %r25
  %r28 = icmp ne i32 %r24, %r26
  br i1 %r28, label %B13, label %B14

B13:
  %r29 = load c#4 i32, ptr %r3
  %r30 = add i32 0, 1 ; loadint
  %r32 = add i32 0, 0 ; loadint
  %r31 = sub i32 %r32, %r30
  %r33 = icmp ne i32 %r29, %r31
  store logic_expr@#23 i32 %r33, ptr %r23
  br label %B15

B14:
  %r34 = add i32 0, 0 ; loadint
  store logic_expr@#23 i32 %r34, ptr %r23
  br label %B15

B15:
  %r35 = load logic_expr@#23 i32, ptr %r23
  br i1 %r35, label %B16, label %B17

B16:
  %r36 = add i32 0, 1 ; loadint
  store logic_expr@#22 i32 %r36, ptr %r22
  br label %B18

B17:
  %r37 = add i32 0, 0 ; loadint
  store logic_expr@#22 i32 %r37, ptr %r22
  br label %B18

B18:
  %r38 = load logic_expr@#22 i32, ptr %r22
  br i1 %r38, label %B19, label %B20

B19:
  %r39 = alloca i32, i32 4
  %r40 = add i32 0, 1 ; loadint
  store flag#10 i32 %r40, ptr %r39
  %r41 = alloca i32, i32 4
  %r42 = add i32 0, 1 ; loadint
  store tmp#10 i32 %r42, ptr %r41
  br label %B20

B20:
  br label %B11

B21:
  %r46 = add i32 0, 1 ; loadint
  br i1 %r46, label %B22, label %B23

B22:
  br label %B23

B23:
  br label %B3

}
define void @init(){
B0:
  %r1 = add i32 0, 0 ; loadint
  ret i32 %r1

}
---------------------------------ir after mem2reg-------------------------------------
; module
define i32 @main(){
B2:
  %r2 = add i32 0, 1 ; loadint
  %r4 = add i32 0, 1 ; loadint
  br label %B3

B3:
  %r74 = phi i32 [ %r73, %B23 ]
  %r70 = phi i32 [ %r2, %B2 ], [ %r6, %B23 ]
  %r69 = phi i32 [ %r68, %B23 ]
  %r65 = phi i32 [ %r64, %B23 ]
  %r61 = phi i32 [ %r60, %B23 ]
  %r58 = phi i32 [ %r11, %B23 ]
  %r56 = phi i32 [ %r57, %B23 ]
  %r55 = phi i32 [ %r54, %B23 ]
  %r51 = phi i32 [ %r50, %B23 ]
  %r49 = phi i32 [ %r48, %B23 ]
  br i1 %r70, label %B4, label %B5

B4:
  %r6 = add i32 0, 0 ; loadint
  %r8 = add i32 0, 0 ; loadint
  %r9 = call i32 @init()
  %r11 = add i32 0, 0 ; loadint
  br label %B6

B5:
  %r47 = add i32 0, 0 ; loadint
  ret i32 %r47

B6:
  %r73 = phi i32 [ %r74, %B4 ], [ %r72, %B11 ]
  %r68 = phi i32 [ %r69, %B4 ], [ %r67, %B11 ]
  %r64 = phi i32 [ %r65, %B4 ], [ %r63, %B11 ]
  %r60 = phi i32 [ %r61, %B4 ], [ %r59, %B11 ]
  %r57 = phi i32 [ %r8, %B4 ], [ %r45, %B11 ]
  %r54 = phi i32 [ %r55, %B4 ], [ %r53, %B11 ]
  %r50 = phi i32 [ %r51, %B4 ], [ %r18, %B11 ]
  %r48 = phi i32 [ %r49, %B4 ], [ %r16, %B11 ]
  %r13 = add i32 0, 3 ; loadint
  %r14 = icmp slt i32 %r57, %r13
  br i1 %r14, label %B7, label %B8

B7:
  %r16 = add i32 0, 1 ; loadint
  %r18 = add i32 0, 1 ; loadint
  br label %B9

B8:
  br label %B21

B9:
  %r19 = add i32 0, 1 ; loadint
  br i1 %r19, label %B10, label %B11

B10:
  br label %B12

B11:
  %r72 = phi i32 [ %r73, %B9 ], [ %r71, %B20 ]
  %r67 = phi i32 [ %r68, %B9 ], [ %r66, %B20 ]
  %r63 = phi i32 [ %r64, %B9 ], [ %r62, %B20 ]
  %r59 = phi i32 [ %r60, %B9 ], [ %r16, %B20 ]
  %r53 = phi i32 [ %r54, %B9 ], [ %r52, %B20 ]
  %r44 = add i32 0, 1 ; loadint
  %r45 = add i32 %r57, %r44
  br label %B6

B12:
  %r25 = add i32 0, 1 ; loadint
  %r27 = add i32 0, 0 ; loadint
  %r26 = sub i32 %r27, %r25
  %r28 = icmp ne i32 %r4, %r26
  br i1 %r28, label %B13, label %B14

B13:
  %r30 = add i32 0, 1 ; loadint
  %r32 = add i32 0, 0 ; loadint
  %r31 = sub i32 %r32, %r30
  %r33 = icmp ne i32 %r4, %r31
  br label %B15

B14:
  %r34 = add i32 0, 0 ; loadint
  br label %B15

B15:
  %r66 = phi i32 [ %r33, %B13 ], [ %r34, %B14 ]
  br i1 %r66, label %B16, label %B17

B16:
  %r36 = add i32 0, 1 ; loadint
  br label %B18

B17:
  %r37 = add i32 0, 0 ; loadint
  br label %B18

B18:
  %r62 = phi i32 [ %r36, %B16 ], [ %r37, %B17 ]
  br i1 %r62, label %B19, label %B20

B19:
  %r40 = add i32 0, 1 ; loadint
  %r42 = add i32 0, 1 ; loadint
  br label %B20

B20:
  %r71 = phi i32 [ %r73, %B18 ], [ %r42, %B19 ]
  %r52 = phi i32 [ %r54, %B18 ], [ %r40, %B19 ]
  br label %B11

B21:
  %r46 = add i32 0, 1 ; loadint
  br i1 %r46, label %B22, label %B23

B22:
  br label %B23

B23:
  br label %B3

}
define void @init(){
B0:
  %r1 = add i32 0, 0 ; loadint
  ret i32 %r1

}
---------------------------------ir -------------------------------------
; module
define i32 @main(){
B2:
  %r2 = add i32 0, 1 ; loadint
  %r4 = add i32 0, 1 ; loadint
  br label %B3

B3:
  %r74 = phi i32 [ %r73, %B23 ]
  %r70 = phi i32 [ %r2, %B2 ], [ %r6, %B23 ]
  %r69 = phi i32 [ %r68, %B23 ]
  %r65 = phi i32 [ %r64, %B23 ]
  %r61 = phi i32 [ %r60, %B23 ]
  %r58 = phi i32 [ %r11, %B23 ]
  %r56 = phi i32 [ %r57, %B23 ]
  %r55 = phi i32 [ %r54, %B23 ]
  %r51 = phi i32 [ %r50, %B23 ]
  %r49 = phi i32 [ %r48, %B23 ]
  br i1 %r70, label %B4, label %B5

B4:
  %r6 = add i32 0, 0 ; loadint
  %r8 = add i32 0, 0 ; loadint
  %r9 = call i32 @init()
  %r11 = add i32 0, 0 ; loadint
  br label %B6

B5:
  %r47 = add i32 0, 0 ; loadint
  ret i32 %r47

B6:
  %r73 = phi i32 [ %r74, %B4 ], [ %r72, %B11 ]
  %r68 = phi i32 [ %r69, %B4 ], [ %r67, %B11 ]
  %r64 = phi i32 [ %r65, %B4 ], [ %r63, %B11 ]
  %r60 = phi i32 [ %r61, %B4 ], [ %r59, %B11 ]
  %r57 = phi i32 [ %r8, %B4 ], [ %r45, %B11 ]
  %r54 = phi i32 [ %r55, %B4 ], [ %r53, %B11 ]
  %r50 = phi i32 [ %r51, %B4 ], [ %r18, %B11 ]
  %r48 = phi i32 [ %r49, %B4 ], [ %r16, %B11 ]
  %r13 = add i32 0, 3 ; loadint
  %r14 = icmp slt i32 %r57, %r13
  br i1 %r14, label %B7, label %B8

B7:
  %r16 = add i32 0, 1 ; loadint
  %r18 = add i32 0, 1 ; loadint
  br label %B9

B8:
  br label %B21

B9:
  %r19 = add i32 0, 1 ; loadint
  br i1 %r19, label %B10, label %B11

B10:
  br label %B12

B11:
  %r72 = phi i32 [ %r73, %B9 ], [ %r71, %B20 ]
  %r67 = phi i32 [ %r68, %B9 ], [ %r66, %B20 ]
  %r63 = phi i32 [ %r64, %B9 ], [ %r62, %B20 ]
  %r59 = phi i32 [ %r60, %B9 ], [ %r16, %B20 ]
  %r53 = phi i32 [ %r54, %B9 ], [ %r52, %B20 ]
  %r44 = add i32 0, 1 ; loadint
  %r45 = add i32 %r57, %r44
  br label %B6

B12:
  %r25 = add i32 0, 1 ; loadint
  %r27 = add i32 0, 0 ; loadint
  %r26 = sub i32 %r27, %r25
  %r28 = icmp ne i32 %r4, %r26
  br i1 %r28, label %B13, label %B14

B13:
  %r30 = add i32 0, 1 ; loadint
  %r32 = add i32 0, 0 ; loadint
  %r31 = sub i32 %r32, %r30
  %r33 = icmp ne i32 %r4, %r31
  br label %B15

B14:
  %r34 = add i32 0, 0 ; loadint
  br label %B15

B15:
  %r66 = phi i32 [ %r33, %B13 ], [ %r34, %B14 ]
  br i1 %r66, label %B16, label %B17

B16:
  %r36 = add i32 0, 1 ; loadint
  br label %B18

B17:
  %r37 = add i32 0, 0 ; loadint
  br label %B18

B18:
  %r62 = phi i32 [ %r36, %B16 ], [ %r37, %B17 ]
  br i1 %r62, label %B19, label %B20

B19:
  %r40 = add i32 0, 1 ; loadint
  %r42 = add i32 0, 1 ; loadint
  br label %B20

B20:
  %r71 = phi i32 [ %r73, %B18 ], [ %r42, %B19 ]
  %r52 = phi i32 [ %r54, %B18 ], [ %r40, %B19 ]
  br label %B11

B21:
  %r46 = add i32 0, 1 ; loadint
  br i1 %r46, label %B22, label %B23

B22:
  br label %B23

B23:
  br label %B3

}
define void @init(){
B0:
  %r1 = add i32 0, 0 ; loadint
  ret i32 %r1

}
--------------------------- building riscv ---------------------------
---------------------------------ir after resolve phi-------------------------------------
init:
B23:

B24:
    li T[-1], 0
    mv a0, T[-1]
    ret

---------------------------------ir after resolve phi end --------------------------------
---------------------------------ir after resolve phi-------------------------------------
main:
B0:

B1:
    li T[-2], 1
    li T[-4], 1
    mv T[-70], T[-2]
    j B2

B2:
    beq x0, T[-70], B4
    j B3

B3:
    li T[-6], 0
    li T[-8], 0
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    call init
    mv T[-9], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    li T[-11], 0
    mv T[-73], T[-74]
    mv T[-68], T[-69]
    mv T[-64], T[-65]
    mv T[-60], T[-61]
    mv T[-57], T[-8]
    mv T[-54], T[-55]
    mv T[-50], T[-51]
    mv T[-48], T[-49]
    j B5

B4:
    li T[-47], 0
    mv a0, T[-47]
    ret

B5:
    li T[-13], 3
    slt T[-14], T[-57], T[-13]
    beq x0, T[-14], B7
    j B6

B6:
    li T[-16], 1
    li T[-18], 1
    j B8

B7:
    j B20

B8:
    li T[-19], 1
    mv T[-72], T[-73]
    mv T[-67], T[-68]
    mv T[-63], T[-64]
    mv T[-59], T[-60]
    mv T[-53], T[-54]
    beq x0, T[-19], B10
    j B9

B9:
    j B11

B10:
    li T[-44], 1
    add T[-45], T[-57], T[-44]
    mv T[-73], T[-72]
    mv T[-68], T[-67]
    mv T[-64], T[-63]
    mv T[-60], T[-59]
    mv T[-57], T[-45]
    mv T[-54], T[-53]
    mv T[-50], T[-18]
    mv T[-48], T[-16]
    j B5

B11:
    li T[-25], 1
    li T[-27], 0
    sub T[-26], T[-27], T[-25]
    sub T[-28], T[-4], T[-26]
    snez T[-28], T[-28]
    beq x0, T[-28], B13
    j B12

B12:
    li T[-30], 1
    li T[-32], 0
    sub T[-31], T[-32], T[-30]
    sub T[-33], T[-4], T[-31]
    snez T[-33], T[-33]
    mv T[-66], T[-33]
    j B14

B13:
    li T[-34], 0
    mv T[-66], T[-34]
    j B14

B14:
    beq x0, T[-66], B16
    j B15

B15:
    li T[-36], 1
    mv T[-62], T[-36]
    j B17

B16:
    li T[-37], 0
    mv T[-62], T[-37]
    j B17

B17:
    mv T[-71], T[-73]
    mv T[-52], T[-54]
    beq x0, T[-62], B19
    j B18

B18:
    li T[-40], 1
    li T[-42], 1
    mv T[-71], T[-42]
    mv T[-52], T[-40]
    j B19

B19:
    mv T[-72], T[-71]
    mv T[-67], T[-66]
    mv T[-63], T[-62]
    mv T[-59], T[-16]
    mv T[-53], T[-52]
    j B10

B20:
    li T[-46], 1
    beq x0, T[-46], B22
    j B21

B21:
    j B22

B22:
    mv T[-74], T[-73]
    mv T[-70], T[-6]
    mv T[-69], T[-68]
    mv T[-65], T[-64]
    mv T[-61], T[-60]
    mv T[-58], T[-11]
    mv T[-56], T[-57]
    mv T[-55], T[-54]
    mv T[-51], T[-50]
    mv T[-49], T[-48]
    j B2

---------------------------------ir after resolve phi end --------------------------------
