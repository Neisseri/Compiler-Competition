--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef c = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 4))))))))) ;))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal c)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 75))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef d) ;))) 
                                    (blockItem 
                                        (stmt 
                                            (lVal d) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 42))))))) ;)) 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal c)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 100))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal c) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal c))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 42))))))) ;)) 
                                                    (blockItem 
                                                        (stmt if ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (eqExp 
                                                                            (relExp 
                                                                                (relExp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal c)))))) > 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 99))))))))))) ) 
                                                            (stmt 
                                                                (block { 
                                                                    (blockItem 
                                                                        (decl 
                                                                            (varDecl 
                                                                                (bType int) 
                                                                                (varDef e) ;))) 
                                                                    (blockItem 
                                                                        (stmt 
                                                                            (lVal e) = 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 84))))))) ;)) 
                                                                    (blockItem 
                                                                        (stmt 
                                                                            (lVal c) = 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 168))))))) ;)) })))) })))) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp ( 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal c)))))) )))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: c
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: d
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: e
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitBlock done!
visitBlock done!
visitPrimaryExp_ exp
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitVarDef i32 @c = 4
Info: visitExpr4
Info: visitAssignmentExpr4
Info: visitExpr4
Info: visitIntLiteralExpr4
ret->type 0x56344fa77d50
Info: visitStatementWhile
Info: visitExpr@c<75
Info: visitBinopExpr@c<75
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr75
Info: visitIntLiteralExpr75
ret->type 0x56344fa77d80
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @d
Info: visitStatementAssign@d = 42
Info: visitAssignStmtAssign@d = 42
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitAssignStmti32
Info: visitExpr42
Info: visitIntLiteralExpr42
ret->type 0x56344fa77d20
Info: visitStatementIfElse
Info: visitExpr@c<100
Info: visitBinopExpr@c<100
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr100
Info: visitIntLiteralExpr100
ret->type 0x56344fa77e00
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@c = @c+42
Info: visitAssignStmtAssign@c = @c+42
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmti32
Info: visitExpr@c+42
Info: visitBinopExpr@c+42
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr42
Info: visitIntLiteralExpr42
ret->type 0x56344fa77e80
Info: visitStatementIfElse
Info: visitExpr@c>99
Info: visitBinopExpr@c>99
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr99
Info: visitIntLiteralExpr99
ret->type 0x56344fa7a070
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @e
Info: visitStatementAssign@e = 84
Info: visitAssignStmtAssign@e = 84
Info: visitExpr@e
Info: visitLvalExpr@e
Info: visitAssignStmti32
Info: visitExpr84
Info: visitIntLiteralExpr84
ret->type 0x56344fa7a0a0
Info: visitStatementAssign@c = 168
Info: visitAssignStmtAssign@c = 168
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmti32
Info: visitExpr168
Info: visitIntLiteralExpr168
ret->type 0x56344fa7a120
Info: visitStatementReturn @c
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitReturnStmtReturn @c#2function has returnscope id1
ast: 
Program
  i32 @main()
    {
      i32 @c#2 = 4
      While        @c#2<75
        {
          i32 @d#4
          Assign@d#4 = 42
          If            @c#2<100
            {
              Assign@c#2 = @c#2+42
              If                @c#2>99
                {
                  i32 @e#6
                  Assign@e#6 = 84
                  Assign@c#2 = 168
                }
            }
        }
      Return @c#2
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionLValue c#2
function main has 20 regs
B0:
  prev: 
  succ: B1 
B1:
  prev: B0 B6 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 
  succ: 
B4:
  prev: B2 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B7 
B6:
  prev: B4 B9 
  succ: B1 
B7:
  prev: B5 
  succ: B8 B9 
B8:
  prev: B7 
  succ: B9 
B9:
  prev: B7 B8 
  succ: B6 
B10:
  prev: 
  succ: 

B0:
  prev: 
  succ: B1 
B1:
  prev: B0 B6 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 
  succ: 
B4:
  prev: B2 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B7 
B6:
  prev: B4 B9 
  succ: B1 
B7:
  prev: B5 
  succ: B8 B9 
B8:
  prev: B7 
  succ: B9 
B9:
  prev: B7 B8 
  succ: B6 

entryB0
B1
B2
B3
B4
B5
B6
B7
B8
B9
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB2
reverse_postorderB4
reverse_postorderB5
reverse_postorderB7
reverse_postorderB8
reverse_postorderB9
reverse_postorderB6
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB2
reverse_postorderB4
reverse_postorderB5
reverse_postorderB7
reverse_postorderB8
reverse_postorderB9
reverse_postorderB6
compute_dom_fro bb: B1 func: main
compute_dom_fro bb: B1 func: main
compute_dom_fro bb: B1 func: main
compute_dom_fro bb: B6 func: main
compute_dom_fro bb: B6 func: main
compute_dom_fro bb: B6 func: main
compute_dom_fro bb: B9 func: main
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 
  domed_by: B0 B1 
B2:
  doms: B4 
  domed_by: B0 B1 B2 
B3:
  doms: 
  domed_by: B0 B1 B3 
B4:
  doms: B5 B6 
  domed_by: B0 B1 B2 B4 
B5:
  doms: B7 
  domed_by: B0 B1 B2 B4 B5 
B6:
  doms: 
  domed_by: B0 B1 B2 B4 B6 
B7:
  doms: B8 B9 
  domed_by: B0 B1 B2 B4 B5 B7 
B8:
  doms: 
  domed_by: B0 B1 B2 B4 B5 B7 B8 
B9:
  doms: 
  domed_by: B0 B1 B2 B4 B5 B7 B9 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: B1 
B3:
  DF: 
B4:
  DF: B1 
B5:
  DF: B6 
B6:
  DF: B1 
B7:
  DF: B6 
B8:
  DF: B9 
B9:
  DF: B6 

ir_origin:
; module
define i32 @main(){
B0:
  %r1 = alloca i32, i32 4
  %r2 = add i32 0, 4 ; loadint
  store i32 %r2, ptr %r1
  br label %B1

B1:
  %r3 = load i32, ptr %r1
  %r4 = add i32 0, 75 ; loadint
  %r5 = icmp slt i32 %r3, %r4
  br i1 %r5, label %B2, label %B3

B2:
  %r6 = alloca i32, i32 4
  %r7 = add i32 0, 42 ; loadint
  store i32 %r7, ptr %r6
  br label %B4

B3:
  %r20 = load i32, ptr %r1
  ret i32 %r20

B4:
  %r8 = load i32, ptr %r1
  %r9 = add i32 0, 100 ; loadint
  %r10 = icmp slt i32 %r8, %r9
  br i1 %r10, label %B5, label %B6

B5:
  %r11 = load i32, ptr %r1
  %r12 = add i32 0, 42 ; loadint
  %r13 = add i32 %r11, %r12
  store i32 %r13, ptr %r1
  br label %B7

B6:
  br label %B1

B7:
  %r14 = load i32, ptr %r1
  %r15 = add i32 0, 99 ; loadint
  %r16 = icmp sgt i32 %r14, %r15
  br i1 %r16, label %B8, label %B9

B8:
  %r17 = alloca i32, i32 4
  %r18 = add i32 0, 84 ; loadint
  store i32 %r18, ptr %r17
  %r19 = add i32 0, 168 ; loadint
  store i32 %r19, ptr %r1
  br label %B9

B9:
  br label %B6

}
---------------------------------ir after mem2reg-------------------------------------
; module
define i32 @main(){
B0:
  %r2 = add i32 0, 4 ; loadint
  br label %B1

B1:
  %r27 = phi i32 [ %r1, %B0 ], [ %r26, %B6 ]
  %r24 = phi i32 [ %r1, %B0 ], [ %r7, %B6 ]
  %r22 = phi i32 [ %r2, %B0 ], [ %r21, %B6 ]
  %r4 = add i32 0, 75 ; loadint
  %r5 = icmp slt i32 %r22, %r4
  br i1 %r5, label %B2, label %B3

B2:
  %r7 = add i32 0, 42 ; loadint
  br label %B4

B3:
  ret i32 %r22

B4:
  %r9 = add i32 0, 100 ; loadint
  %r10 = icmp slt i32 %r22, %r9
  br i1 %r10, label %B5, label %B6

B5:
  %r12 = add i32 0, 42 ; loadint
  %r13 = add i32 %r22, %r12
  br label %B7

B6:
  %r26 = phi i32 [ %r27, %B4 ], [ %r25, %B9 ]
  %r21 = phi i32 [ %r22, %B4 ], [ %r23, %B9 ]
  br label %B1

B7:
  %r15 = add i32 0, 99 ; loadint
  %r16 = icmp sgt i32 %r13, %r15
  br i1 %r16, label %B8, label %B9

B8:
  %r18 = add i32 0, 84 ; loadint
  %r19 = add i32 0, 168 ; loadint
  br label %B9

B9:
  %r25 = phi i32 [ %r27, %B7 ], [ %r18, %B8 ]
  %r23 = phi i32 [ %r13, %B7 ], [ %r19, %B8 ]
  br label %B6

}
---------------------------------ir -------------------------------------
; module
define i32 @main(){
B0:
  %r2 = add i32 0, 4 ; loadint
  br label %B1

B1:
  %r27 = phi i32 [ %r1, %B0 ], [ %r26, %B6 ]
  %r24 = phi i32 [ %r1, %B0 ], [ %r7, %B6 ]
  %r22 = phi i32 [ %r2, %B0 ], [ %r21, %B6 ]
  %r4 = add i32 0, 75 ; loadint
  %r5 = icmp slt i32 %r22, %r4
  br i1 %r5, label %B2, label %B3

B2:
  %r7 = add i32 0, 42 ; loadint
  br label %B4

B3:
  ret i32 %r22

B4:
  %r9 = add i32 0, 100 ; loadint
  %r10 = icmp slt i32 %r22, %r9
  br i1 %r10, label %B5, label %B6

B5:
  %r12 = add i32 0, 42 ; loadint
  %r13 = add i32 %r22, %r12
  br label %B7

B6:
  %r26 = phi i32 [ %r27, %B4 ], [ %r25, %B9 ]
  %r21 = phi i32 [ %r22, %B4 ], [ %r23, %B9 ]
  br label %B1

B7:
  %r15 = add i32 0, 99 ; loadint
  %r16 = icmp sgt i32 %r13, %r15
  br i1 %r16, label %B8, label %B9

B8:
  %r18 = add i32 0, 84 ; loadint
  %r19 = add i32 0, 168 ; loadint
  br label %B9

B9:
  %r25 = phi i32 [ %r27, %B7 ], [ %r18, %B8 ]
  %r23 = phi i32 [ %r13, %B7 ], [ %r19, %B8 ]
  br label %B6

}
--------------------------- building riscv ---------------------------
riscv: 
T[-1] B1
T[-26] B7
T[-1] B1
T[-7] B7
T[-2] B1
T[-21] B7
T[-27] B5
T[-25] B10
T[-22] B5
T[-23] B10
T[-27] B8
T[-18] B9
T[-13] B8
T[-19] B9
    li T[-2], 4
    j B2
    phi T[-27] = T[-1] B1
[ T[-1], B1] T[-26] B7
[ T[-26], B7] 
    phi T[-24] = T[-1] B1
[ T[-1], B1] T[-7] B7
[ T[-7], B7] 
    phi T[-22] = T[-2] B1
[ T[-2], B1] T[-21] B7
[ T[-21], B7] 
    li T[-4], 75
    slt T[-5], T[-22], T[-4]
    beq x0, T[-5], B4
    j B3
    li T[-7], 42
    j B5
    mv a0, T[-22]
    ret
    li T[-9], 100
    slt T[-10], T[-22], T[-9]
    beq x0, T[-10], B7
    j B6
    li T[-12], 42
    add T[-13], T[-22], T[-12]
    j B8
    phi T[-26] = T[-27] B5
[ T[-27], B5] T[-25] B10
[ T[-25], B10] 
    phi T[-21] = T[-22] B5
[ T[-22], B5] T[-23] B10
[ T[-23], B10] 
    j B2
    li T[-15], 99
    sgt T[-16], T[-13], T[-15]
    beq x0, T[-16], B10
    j B9
    li T[-18], 84
    li T[-19], 168
    j B10
    phi T[-25] = T[-27] B8
[ T[-27], B8] T[-18] B9
[ T[-18], B9] 
    phi T[-23] = T[-13] B8
[ T[-13], B8] T[-19] B9
[ T[-19], B9] 
    j B7
?
main
main Main()
main do_liveness_analysis() done
main Build() done
spill reg MkWorklist insert T[-27]
spill reg MkWorklist insert T[-26]
spill reg MkWorklist insert T[-25]
spill reg MkWorklist insert T[-24]
spill reg MkWorklist insert T[-23]
spill reg MkWorklist insert T[-22]
spill reg MkWorklist insert T[-21]
spill reg MkWorklist insert T[-19]
spill reg MkWorklist insert T[-18]
spill reg MkWorklist insert T[-16]
spill reg MkWorklist insert T[-15]
spill reg MkWorklist insert T[-13]
spill reg MkWorklist insert T[-12]
spill reg MkWorklist insert T[-10]
spill reg MkWorklist insert T[-9]
spill reg MkWorklist insert T[-7]
spill reg MkWorklist insert T[-5]
spill reg MkWorklist insert T[-4]
spill reg MkWorklist insert T[-2]
spill reg MkWorklist insert T[-1]
main MkWorklist() done
main Coalesce()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main SelectSpill()
main Simplify()
main AssignColors() done
replace regs

main
after compute reg_used
after prologue
end of emitend
