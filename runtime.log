--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) ifElseIf ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef a) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal a) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 5))))))) ;)) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef b) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal b) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 10))))))) ;)) 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lOrExp 
                                        (lAndExp 
                                            (eqExp 
                                                (eqExp 
                                                    (relExp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal a))))))) == 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 6)))))))))) || 
                                    (lAndExp 
                                        (eqExp 
                                            (eqExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal b))))))) == 
                                            (relExp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 0xb))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt return 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal a)))))) ;)) })) else 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (lAndExp 
                                                            (eqExp 
                                                                (eqExp 
                                                                    (relExp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal b))))))) == 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (number 
                                                                                        (intConst 10))))))))) && 
                                                        (eqExp 
                                                            (eqExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal a))))))) == 
                                                            (relExp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))))))) ) 
                                            (stmt 
                                                (lVal a) = 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 25))))))) ;) else 
                                            (stmt if ( 
                                                (cond 
                                                    (lOrExp 
                                                        (lAndExp 
                                                            (lAndExp 
                                                                (eqExp 
                                                                    (eqExp 
                                                                        (relExp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal b))))))) == 
                                                                    (relExp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 10))))))))) && 
                                                            (eqExp 
                                                                (eqExp 
                                                                    (relExp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal a))))))) == 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp - 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 5)))))))))))) ) 
                                                (stmt 
                                                    (lVal a) = 
                                                    (exp 
                                                        (addExp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (lVal a))))) + 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 15))))))) ;) else 
                                                (stmt 
                                                    (lVal a) = 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp - 
                                                                    (unaryExp + 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal a)))))))) ;)))) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal a)))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putint ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp ifElseIf ( ))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: ifElseIf
visitVarDecl: int start
visitVarDecl: ident: a
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: b
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitBlock done!
visit block stmt
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitAssign done!
visitBlock done!
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitCall ident: ifElseIf
visitCall args_list size: 0
visitCall args_list size: 1
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefi32 @ifElseIf()
Info: visitBlock
Info: visitVarDef i32 @a
Info: visitStatementAssign@a = 5
Info: visitAssignStmtAssign@a = 5
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmti32
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x559c2b67eed0
Info: visitVarDef i32 @b
Info: visitStatementAssign@b = 10
Info: visitAssignStmtAssign@b = 10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmti32
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x559c2b67ef50
Info: visitStatementIfElse
Info: visitExpr@a==6||@b==11
Info: visitBinopExpr@a==6||@b==11
Info: visitExpr@a==6
Info: visitBinopExpr@a==6
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr6
Info: visitIntLiteralExpr6
ret->type 0x559c2b67efd0
Info: visitExpr@b==11
Info: visitBinopExpr@b==11
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr11
Info: visitIntLiteralExpr11
ret->type 0x559c2b67f000
Info: visitStatement
Info: visitBlock
Info: visitStatementReturn @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitReturnStmtReturn @a#2function has returnscope id1
Info: visitStatement
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@b==10&&@a==1
Info: visitBinopExpr@b==10&&@a==1
Info: visitExpr@b==10
Info: visitBinopExpr@b==10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x559c2b67f080
Info: visitExpr@a==1
Info: visitBinopExpr@a==1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x559c2b67f100
Info: visitStatementAssign@a = 25
Info: visitAssignStmtAssign@a = 25
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmti32
Info: visitExpr25
Info: visitIntLiteralExpr25
ret->type 0x559c2b67f130
Info: visitStatementIfElse
Info: visitExpr@b==10&&@a==-5
Info: visitBinopExpr@b==10&&@a==-5
Info: visitExpr@b==10
Info: visitBinopExpr@b==10
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x559c2b67f160
Info: visitExpr@a==-5
Info: visitBinopExpr@a==-5
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr-5
Info: visitUnonExpr-5
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x559c2b67f190
Info: visitStatementAssign@a = @a+15
Info: visitAssignStmtAssign@a = @a+15
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmti32
Info: visitExpr@a+15
Info: visitBinopExpr@a+15
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr15
Info: visitIntLiteralExpr15
ret->type 0x559c2b67f1c0
Info: visitStatementAssign@a = -+@a
Info: visitAssignStmtAssign@a = -+@a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmti32
Info: visitExpr-+@a
Info: visitUnonExpr-+@a
Info: visitExpr+@a
Info: visitUnonExpr+@a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitStatementReturn @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitReturnStmtReturn @a#2function has returnscope id1
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitStatementCall @putint(Call @ifElseIf())
Info: visitExprStmtCall @putint(Call @ifElseIf())
Info: visitExprCall @putint(Call @ifElseIf())
Info: visiCalltExprCall @putint(Call @ifElseIf())
Info: use of undeclared function putint
Info: visitExprCall @ifElseIf()
Info: visiCalltExprCall @ifElseIf()
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x559c2b67f1f0
Info: visitReturnStmtReturn 0function has returnscope id5
ast: 
Program
  i32 @ifElseIf()
    {
      i32 @a#2
      Assign@a#2 = 5
      i32 @b#2
      Assign@b#2 = 10
      If        @a#2==6||@b#2==11
        {
          Return @a#2
        }
      Else
        {
          If            @b#2==10&&@a#2==1
            Assign@a#2 = 25
          Else
            If              @b#2==10&&@a#2==-5
              Assign@a#2 = @a#2+15
            Else
              Assign@a#2 = -+@a#2
        }
      Return @a#2
    }
  i32 @main()
    {
      Call @putint        Call @ifElseIf()
      Return 0
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visitFunction ifElseIf
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue a#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue b#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionLValue a#2
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue b#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue a#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue b#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue a#2
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue a#2
visitStatement
visitExpression
visitExpressionLValue a#2
function ifElseIf has 42 regs
B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 
  succ: B4 
B4:
  prev: B2 B3 
  succ: B5 B6 
B5:
  prev: B4 
  succ: 
B6:
  prev: B4 
  succ: B9 
B7:
  prev: B8 B15 
  succ: 
B8:
  prev: 
  succ: B7 
B9:
  prev: B6 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 
  succ: B12 
B12:
  prev: B10 B11 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B15 
B14:
  prev: B12 
  succ: B16 
B15:
  prev: B13 B22 
  succ: B7 
B16:
  prev: B14 
  succ: B17 B18 
B17:
  prev: B16 
  succ: B19 
B18:
  prev: B16 
  succ: B19 
B19:
  prev: B17 B18 
  succ: B20 B21 
B20:
  prev: B19 
  succ: B22 
B21:
  prev: B19 
  succ: B22 
B22:
  prev: B20 B21 
  succ: B15 
B23:
  prev: 
  succ: 

B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 
  succ: B4 
B4:
  prev: B2 B3 
  succ: B5 B6 
B5:
  prev: B4 
  succ: 
B6:
  prev: B4 
  succ: B9 
B7:
  prev: B15 
  succ: 
B9:
  prev: B6 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 
  succ: B12 
B12:
  prev: B10 B11 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B15 
B14:
  prev: B12 
  succ: B16 
B15:
  prev: B13 B22 
  succ: B7 
B16:
  prev: B14 
  succ: B17 B18 
B17:
  prev: B16 
  succ: B19 
B18:
  prev: B16 
  succ: B19 
B19:
  prev: B17 B18 
  succ: B20 B21 
B20:
  prev: B19 
  succ: B22 
B21:
  prev: B19 
  succ: B22 
B22:
  prev: B20 B21 
  succ: B15 

entryB0
B1
B2
B3
B4
B5
B6
B7
B9
B10
B11
B12
B13
B14
B15
B16
B17
B18
B19
B20
B21
B22
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB2
reverse_postorderB4
reverse_postorderB6
reverse_postorderB9
reverse_postorderB11
reverse_postorderB10
reverse_postorderB12
reverse_postorderB14
reverse_postorderB16
reverse_postorderB18
reverse_postorderB17
reverse_postorderB19
reverse_postorderB21
reverse_postorderB20
reverse_postorderB22
reverse_postorderB13
reverse_postorderB15
reverse_postorderB7
reverse_postorderB5
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB2
reverse_postorderB4
reverse_postorderB6
reverse_postorderB9
reverse_postorderB11
reverse_postorderB10
reverse_postorderB12
reverse_postorderB14
reverse_postorderB16
reverse_postorderB18
reverse_postorderB17
reverse_postorderB19
reverse_postorderB21
reverse_postorderB20
reverse_postorderB22
reverse_postorderB13
reverse_postorderB15
reverse_postorderB7
reverse_postorderB5
compute_dom_fro bb: B4 func: ifElseIf
compute_dom_fro bb: B4 func: ifElseIf
compute_dom_fro bb: B12 func: ifElseIf
compute_dom_fro bb: B12 func: ifElseIf
compute_dom_fro bb: B15 func: ifElseIf
compute_dom_fro bb: B15 func: ifElseIf
compute_dom_fro bb: B15 func: ifElseIf
compute_dom_fro bb: B15 func: ifElseIf
compute_dom_fro bb: B15 func: ifElseIf
compute_dom_fro bb: B19 func: ifElseIf
compute_dom_fro bb: B19 func: ifElseIf
compute_dom_fro bb: B22 func: ifElseIf
compute_dom_fro bb: B22 func: ifElseIf
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 B4 
  domed_by: B0 B1 
B2:
  doms: 
  domed_by: B0 B1 B2 
B3:
  doms: 
  domed_by: B0 B1 B3 
B4:
  doms: B5 B6 
  domed_by: B0 B1 B4 
B5:
  doms: 
  domed_by: B0 B1 B4 B5 
B6:
  doms: B9 
  domed_by: B0 B1 B4 B6 
B7:
  doms: 
  domed_by: B0 B1 B4 B6 B7 B9 B12 B15 
B9:
  doms: B10 B11 B12 
  domed_by: B0 B1 B4 B6 B9 
B10:
  doms: 
  domed_by: B0 B1 B4 B6 B9 B10 
B11:
  doms: 
  domed_by: B0 B1 B4 B6 B9 B11 
B12:
  doms: B13 B14 B15 
  domed_by: B0 B1 B4 B6 B9 B12 
B13:
  doms: 
  domed_by: B0 B1 B4 B6 B9 B12 B13 
B14:
  doms: B16 
  domed_by: B0 B1 B4 B6 B9 B12 B14 
B15:
  doms: B7 
  domed_by: B0 B1 B4 B6 B9 B12 B15 
B16:
  doms: B17 B18 B19 
  domed_by: B0 B1 B4 B6 B9 B12 B14 B16 
B17:
  doms: 
  domed_by: B0 B1 B4 B6 B9 B12 B14 B16 B17 
B18:
  doms: 
  domed_by: B0 B1 B4 B6 B9 B12 B14 B16 B18 
B19:
  doms: B20 B21 B22 
  domed_by: B0 B1 B4 B6 B9 B12 B14 B16 B19 
B20:
  doms: 
  domed_by: B0 B1 B4 B6 B9 B12 B14 B16 B19 B20 
B21:
  doms: 
  domed_by: B0 B1 B4 B6 B9 B12 B14 B16 B19 B21 
B22:
  doms: 
  domed_by: B0 B1 B4 B6 B9 B12 B14 B16 B19 B22 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: B4 
B3:
  DF: B4 
B4:
  DF: 
B5:
  DF: 
B6:
  DF: 
B7:
  DF: 
B9:
  DF: 
B10:
  DF: B12 
B11:
  DF: B12 
B12:
  DF: 
B13:
  DF: B15 
B14:
  DF: B15 
B15:
  DF: 
B16:
  DF: B15 
B17:
  DF: B19 
B18:
  DF: B19 
B19:
  DF: B15 
B20:
  DF: B22 
B21:
  DF: B22 
B22:
  DF: B15 

visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpression
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 3 regs
B24:
  prev: 
  succ: 
B25:
  prev: 
  succ: 

B24:
  prev: 
  succ: 

entryB24
reverse_postorderB24
B24:
  doms: 
  domed_by: B24 

B24:
  DF: 

ir_origin:
; module
define i32 @main(){
B24:
  %r2 = call i32 @ifElseIf()
  %r1 = call i32 @putint(i32 %r2)
  %r3 = add i32 0, 0 ; loadint
  ret i32 %r3

}
define i32 @ifElseIf(){
B0:
  %r1 = alloca i32, i32 4
  %r2 = add i32 0, 5 ; loadint
  store i32 %r2, ptr %r1
  %r3 = alloca i32, i32 4
  %r4 = add i32 0, 10 ; loadint
  store i32 %r4, ptr %r3
  br label %B1

B1:
  %r5 = alloca i32, i32 4
  %r6 = load i32, ptr %r1
  %r7 = add i32 0, 6 ; loadint
  %r8 = icmp eq i32 %r6, %r7
  br i32 %r8, label B2, label B3

B2:
  %r12 = add i32 0, 1 ; loadint
  store i32 %r12, ptr %r5
  br label %B4

B3:
  %r9 = load i32, ptr %r3
  %r10 = add i32 0, 11 ; loadint
  %r11 = icmp eq i32 %r9, %r10
  store i32 %r11, ptr %r5
  br label %B4

B4:
  %r13 = load i32, ptr %r5
  br i32 %r13, label B5, label B6

B5:
  %r14 = load i32, ptr %r1
  ret i32 %r14

B6:
  br label %B9

B7:
  %r42 = load i32, ptr %r1
  ret i32 %r42

B9:
  %r15 = alloca i32, i32 4
  %r16 = load i32, ptr %r3
  %r17 = add i32 0, 10 ; loadint
  %r18 = icmp eq i32 %r16, %r17
  br i32 %r18, label B10, label B11

B10:
  %r19 = load i32, ptr %r1
  %r20 = add i32 0, 1 ; loadint
  %r21 = icmp eq i32 %r19, %r20
  store i32 %r21, ptr %r15
  br label %B12

B11:
  %r22 = add i32 0, 0 ; loadint
  store i32 %r22, ptr %r15
  br label %B12

B12:
  %r23 = load i32, ptr %r15
  br i32 %r23, label B13, label B14

B13:
  %r24 = add i32 0, 25 ; loadint
  store i32 %r24, ptr %r1
  br label %B15

B14:
  br label %B16

B15:
  br label %B7

B16:
  %r25 = alloca i32, i32 4
  %r26 = load i32, ptr %r3
  %r27 = add i32 0, 10 ; loadint
  %r28 = icmp eq i32 %r26, %r27
  br i32 %r28, label B17, label B18

B17:
  %r29 = load i32, ptr %r1
  %r30 = add i32 0, 5 ; loadint
  %r32 = add i32 0, 0 ; loadint
  %r31 = sub i32 %r32, %r30
  %r33 = icmp eq i32 %r29, %r31
  store i32 %r33, ptr %r25
  br label %B19

B18:
  %r34 = add i32 0, 0 ; loadint
  store i32 %r34, ptr %r25
  br label %B19

B19:
  %r35 = load i32, ptr %r25
  br i32 %r35, label B20, label B21

B20:
  %r36 = load i32, ptr %r1
  %r37 = add i32 0, 15 ; loadint
  %r38 = add i32 %r36, %r37
  store i32 %r38, ptr %r1
  br label %B22

B21:
  %r39 = load i32, ptr %r1
  %r41 = add i32 0, 0 ; loadint
  %r40 = sub i32 %r41, %r39
  store i32 %r40, ptr %r1
  br label %B22

B22:
  br label %B15

}
---------------------------------ir after mem2reg-------------------------------------
; module
define i32 @main(){
B24:
  %r2 = call i32 @ifElseIf()
  %r1 = call i32 @putint(i32 %r2)
  %r3 = add i32 0, 0 ; loadint
  ret i32 %r3

}
define i32 @ifElseIf(){
B0:
  %r2 = add i32 0, 5 ; loadint
  %r4 = add i32 0, 10 ; loadint
  br label %B1

B1:
  %r7 = add i32 0, 6 ; loadint
  %r8 = icmp eq i32 %r2, %r7
  br i32 %r8, label B2, label B3

B2:
  %r12 = add i32 0, 1 ; loadint
  br label %B4

B3:
  %r10 = add i32 0, 11 ; loadint
  %r11 = icmp eq i32 %r4, %r10
  br label %B4

B4:
  %r48 = phi i32 [ %r12, B2 ], [ %r11, B3 ]
  br i32 %r48, label B5, label B6

B5:
  ret i32 %r2

B6:
  br label %B9

B7:
  ret i32 %r43

B9:
  %r17 = add i32 0, 10 ; loadint
  %r18 = icmp eq i32 %r4, %r17
  br i32 %r18, label B10, label B11

B10:
  %r20 = add i32 0, 1 ; loadint
  %r21 = icmp eq i32 %r2, %r20
  br label %B12

B11:
  %r22 = add i32 0, 0 ; loadint
  br label %B12

B12:
  %r45 = phi i32 [ %r21, B10 ], [ %r22, B11 ]
  br i32 %r45, label B13, label B14

B13:
  %r24 = add i32 0, 25 ; loadint
  br label %B15

B14:
  br label %B16

B15:
  %r47 = phi i32 [ %r47, B13 ], [ %r46, B22 ]
  %r43 = phi i32 [ %r24, B13 ], [ %r44, B22 ]
  br label %B7

B16:
  %r27 = add i32 0, 10 ; loadint
  %r28 = icmp eq i32 %r4, %r27
  br i32 %r28, label B17, label B18

B17:
  %r30 = add i32 0, 5 ; loadint
  %r32 = add i32 0, 0 ; loadint
  %r31 = sub i32 %r32, %r30
  %r33 = icmp eq i32 %r2, %r31
  br label %B19

B18:
  %r34 = add i32 0, 0 ; loadint
  br label %B19

B19:
  %r46 = phi i32 [ %r33, B17 ], [ %r34, B18 ]
  br i32 %r46, label B20, label B21

B20:
  %r37 = add i32 0, 15 ; loadint
  %r38 = add i32 %r2, %r37
  br label %B22

B21:
  %r41 = add i32 0, 0 ; loadint
  %r40 = sub i32 %r41, %r2
  br label %B22

B22:
  %r44 = phi i32 [ %r38, B20 ], [ %r40, B21 ]
  br label %B15

}
---------------------------------ir -------------------------------------
; module
define i32 @main(){
B24:
  %r2 = call i32 @ifElseIf()
  %r1 = call i32 @putint(i32 %r2)
  %r3 = add i32 0, 0 ; loadint
  ret i32 %r3

}
define i32 @ifElseIf(){
B0:
  %r2 = add i32 0, 5 ; loadint
  %r4 = add i32 0, 10 ; loadint
  br label %B1

B1:
  %r7 = add i32 0, 6 ; loadint
  %r8 = icmp eq i32 %r2, %r7
  br i32 %r8, label B2, label B3

B2:
  %r12 = add i32 0, 1 ; loadint
  br label %B4

B3:
  %r10 = add i32 0, 11 ; loadint
  %r11 = icmp eq i32 %r4, %r10
  br label %B4

B4:
  %r48 = phi i32 [ %r12, B2 ], [ %r11, B3 ]
  br i32 %r48, label B5, label B6

B5:
  ret i32 %r2

B6:
  br label %B9

B7:
  ret i32 %r43

B9:
  %r17 = add i32 0, 10 ; loadint
  %r18 = icmp eq i32 %r4, %r17
  br i32 %r18, label B10, label B11

B10:
  %r20 = add i32 0, 1 ; loadint
  %r21 = icmp eq i32 %r2, %r20
  br label %B12

B11:
  %r22 = add i32 0, 0 ; loadint
  br label %B12

B12:
  %r45 = phi i32 [ %r21, B10 ], [ %r22, B11 ]
  br i32 %r45, label B13, label B14

B13:
  %r24 = add i32 0, 25 ; loadint
  br label %B15

B14:
  br label %B16

B15:
  %r47 = phi i32 [ %r47, B13 ], [ %r46, B22 ]
  %r43 = phi i32 [ %r24, B13 ], [ %r44, B22 ]
  br label %B7

B16:
  %r27 = add i32 0, 10 ; loadint
  %r28 = icmp eq i32 %r4, %r27
  br i32 %r28, label B17, label B18

B17:
  %r30 = add i32 0, 5 ; loadint
  %r32 = add i32 0, 0 ; loadint
  %r31 = sub i32 %r32, %r30
  %r33 = icmp eq i32 %r2, %r31
  br label %B19

B18:
  %r34 = add i32 0, 0 ; loadint
  br label %B19

B19:
  %r46 = phi i32 [ %r33, B17 ], [ %r34, B18 ]
  br i32 %r46, label B20, label B21

B20:
  %r37 = add i32 0, 15 ; loadint
  %r38 = add i32 %r2, %r37
  br label %B22

B21:
  %r41 = add i32 0, 0 ; loadint
  %r40 = sub i32 %r41, %r2
  br label %B22

B22:
  %r44 = phi i32 [ %r38, B20 ], [ %r40, B21 ]
  br label %B15

}
--------------------------- building riscv ---------------------------
riscv: 
    call ifElseIf
    mv T[-2], a0
    mv a0, T[-2]
    call putint
    mv T[-1], a0
    li T[-3], 0
    mv a0, T[-3]
    ret
T[-12] B5
T[-11] B6
T[-21] B12
T[-22] B13
T[-47] B15
T[-46] B24
T[-24] B15
T[-44] B24
T[-33] B19
T[-34] B20
T[-38] B22
T[-40] B23
    li T[-2], 5
    li T[-4], 10
    j B4
    li T[-7], 6
    sub T[-8], T[-2], T[-7]
    seqz T[-8], T[-8]
    beq x0, T[-8], B6
    j B5
    li T[-12], 1
    j B7
    li T[-10], 11
    sub T[-11], T[-4], T[-10]
    seqz T[-11], T[-11]
    j B7
    phi T[-48] = T[-12] B5
[ T[-12], B5] T[-11] B6
[ T[-11], B6] 
    beq x0, T[-48], B9
    j B8
    mv a0, T[-2]
    ret
    j B11
    mv a0, T[-43]
    ret
    li T[-17], 10
    sub T[-18], T[-4], T[-17]
    seqz T[-18], T[-18]
    beq x0, T[-18], B13
    j B12
    li T[-20], 1
    sub T[-21], T[-2], T[-20]
    seqz T[-21], T[-21]
    j B14
    li T[-22], 0
    j B14
    phi T[-45] = T[-21] B12
[ T[-21], B12] T[-22] B13
[ T[-22], B13] 
    beq x0, T[-45], B16
    j B15
    li T[-24], 25
    j B17
    j B18
    phi T[-47] = T[-47] B15
[ T[-47], B15] T[-46] B24
[ T[-46], B24] 
    phi T[-43] = T[-24] B15
[ T[-24], B15] T[-44] B24
[ T[-44], B24] 
    j B10
    li T[-27], 10
    sub T[-28], T[-4], T[-27]
    seqz T[-28], T[-28]
    beq x0, T[-28], B20
    j B19
    li T[-30], 5
    li T[-32], 0
    sub T[-31], T[-32], T[-30]
    sub T[-33], T[-2], T[-31]
    seqz T[-33], T[-33]
    j B21
    li T[-34], 0
    j B21
    phi T[-46] = T[-33] B19
[ T[-33], B19] T[-34] B20
[ T[-34], B20] 
    beq x0, T[-46], B23
    j B22
    li T[-37], 15
    add T[-38], T[-2], T[-37]
    j B24
    li T[-41], 0
    sub T[-40], T[-41], T[-2]
    j B24
    phi T[-44] = T[-38] B22
[ T[-38], B22] T[-40] B23
[ T[-40], B23] 
    j B17
?
ifElseIf
ifElseIf Main()
ifElseIf
after compute reg_used
after prologue
end of emitend
main
main Main()
main
after compute reg_used
after prologue
end of emitend
