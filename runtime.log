--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) QuickSort ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) low) , 
                    (funcFParam 
                        (bType int) high)) ) 
                (block { 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal low)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal high)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef i = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (lVal low)))))))) ;))) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef j = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (lVal high)))))))) ;))) 
                                    (blockItem 
                                        (stmt while ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal i)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal j)))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal i) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal i))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) })))) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp QuickSort ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal low))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal i))))) - 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 1))))))))) ))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp QuickSort ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal i))))) + 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 1)))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal high)))))))) ))))) ;)) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp QuickSort ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 0)))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 1))))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: QuickSort
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: i
visitVarDecl: initVal
visitInit
visitVarDecl: int start
visitVarDecl: ident: j
visitVarDecl: initVal
visitInit
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitExprStmt
visitCall ident: QuickSort
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 2
visitExprStmt
visitCall ident: QuickSort
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 2
visitBlock done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitExprStmt
visitCall ident: QuickSort
visitFuncRParams
visitPrimaryExp_ number
visitPrimaryExp_ number
visitCall args_list size: 2
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefi32 @QuickSort(i32 @low, i32 @high)
Info: visitParamDefi32 @low
Info: visitParamDefi32 @high
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@low<@high
Info: visitBinopExpr@low<@high
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitExpr@high
Info: visitLvalExpr@high
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @i = @low
Info: visitExpr@low
Info: visitAssignmentExpr@low
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitVarDef i32 @j = @high
Info: visitExpr@high
Info: visitAssignmentExpr@high
Info: visitExpr@high
Info: visitLvalExpr@high
Info: visitStatementWhile
Info: visitExpr@i<@j
Info: visitBinopExpr@i<@j
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@i = @i+1
Info: visitAssignStmtAssign@i = @i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmti32
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55b126a99af0
Info: visitStatementCall @QuickSort(@low, @i-1)
Info: visitExprStmtCall @QuickSort(@low, @i-1)
Info: visitExprCall @QuickSort(@low, @i-1)
Info: visiCalltExprCall @QuickSort(@low, @i-1)
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitExpr@i-1
Info: visitBinopExpr@i-1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55b126a99ac0
Info: visitStatementCall @QuickSort(@i+1, @high)
Info: visitExprStmtCall @QuickSort(@i+1, @high)
Info: visitExprCall @QuickSort(@i+1, @high)
Info: visiCalltExprCall @QuickSort(@i+1, @high)
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55b126a99e40
Info: visitExpr@high
Info: visitLvalExpr@high
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55b126a99e70
Info: visitReturnStmtReturn 0function has returnscope id1
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitStatementCall @QuickSort(0, 1)
Info: visitExprStmtCall @QuickSort(0, 1)
Info: visitExprCall @QuickSort(0, 1)
Info: visiCalltExprCall @QuickSort(0, 1)
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55b126a99ea0
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55b126a99ed0
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55b126a99f00
Info: visitReturnStmtReturn 0function has returnscope id6
ast: 
Program
  i32 @QuickSort(i32 @low#1, i32 @high#1)
    {
      If        @low#1<@high#1
        {
          i32 @i#3 = @low#1
          i32 @j#3 = @high#1
          While            @i#3<@j#3
            {
              Assign@i#3 = @i#3+1
            }
          Call @QuickSort            @low#1, @i#3-1
          Call @QuickSort            @i#3+1, @high#1
        }
      Return 0
    }
  i32 @main()
    {
      Call @QuickSort        0, 1
      Return 0
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visitFunction QuickSort
visitFunction param decl: low#1
visitFunction param decl: high#1
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue low#1
visitExpression
visitExpressionLValue high#1
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpressionLValue low#1
visitExpression
visitExpression
visitExpressionLValue high#1
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionLValue j#3
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue low#1
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionLValue high#1
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function QuickSort has 28 regs
B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 B6 
  succ: 
B4:
  prev: B2 B5 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B4 
B6:
  prev: B4 
  succ: B3 
B7:
  prev: 
  succ: 

B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B4 
B3:
  prev: B1 B6 
  succ: 
B4:
  prev: B2 B5 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B4 
B6:
  prev: B4 
  succ: B3 

entryB0
B1
B2
B3
B4
B5
B6
reverse_postorderB0
reverse_postorderB1
reverse_postorderB2
reverse_postorderB4
reverse_postorderB6
reverse_postorderB3
reverse_postorderB5
reverse_postorderB0
reverse_postorderB1
reverse_postorderB2
reverse_postorderB4
reverse_postorderB6
reverse_postorderB3
reverse_postorderB5
compute_dom_fro bb: B3 func: QuickSort
compute_dom_fro bb: B3 func: QuickSort
compute_dom_fro bb: B3 func: QuickSort
compute_dom_fro bb: B4 func: QuickSort
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 
  domed_by: B0 B1 
B2:
  doms: B4 
  domed_by: B0 B1 B2 
B3:
  doms: 
  domed_by: B0 B1 B3 
B4:
  doms: B5 B6 
  domed_by: B0 B1 B2 B4 
B5:
  doms: 
  domed_by: B0 B1 B2 B4 B5 
B6:
  doms: 
  domed_by: B0 B1 B2 B4 B6 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: B3 
B3:
  DF: 
B4:
  DF: B3 
B5:
  DF: B4 
B6:
  DF: B3 

visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 4 regs
B8:
  prev: 
  succ: 
B9:
  prev: 
  succ: 

B8:
  prev: 
  succ: 

entryB8
reverse_postorderB8
B8:
  doms: 
  domed_by: B8 

B8:
  DF: 

ir_origin:
; module
define i32 @main(){
B8:
  %r2 = add i32 0, 0 ; loadint
  %r3 = add i32 0, 1 ; loadint
  %r1 = call i32 @QuickSort(i32 %r2, i32 %r3)
  %r4 = add i32 0, 0 ; loadint
  ret i32 %r4

}
define i32 @QuickSort(i32 %r1, i32 %r2){
B0:
  %r3 = alloca i32, i32 4
  store low#1 i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store high#1 i32 %r2, ptr %r4
  br label %B1

B1:
  %r5 = load low#1 i32, ptr %r3
  %r6 = load high#1 i32, ptr %r4
  %r7 = icmp slt i32 %r5, %r6
  br i1 %r7, label %B2, label %B3

B2:
  %r8 = alloca i32, i32 4
  %r9 = load low#1 i32, ptr %r3
  store i#3 i32 %r9, ptr %r8
  %r10 = alloca i32, i32 4
  %r11 = load high#1 i32, ptr %r4
  store j#3 i32 %r11, ptr %r10
  br label %B4

B3:
  %r28 = add i32 0, 0 ; loadint
  ret i32 %r28

B4:
  %r12 = load i#3 i32, ptr %r8
  %r13 = load j#3 i32, ptr %r10
  %r14 = icmp slt i32 %r12, %r13
  br i1 %r14, label %B5, label %B6

B5:
  %r15 = load i#3 i32, ptr %r8
  %r16 = add i32 0, 1 ; loadint
  %r17 = add i32 %r15, %r16
  store i#3 i32 %r17, ptr %r8
  br label %B4

B6:
  %r19 = load low#1 i32, ptr %r3
  %r20 = load i#3 i32, ptr %r8
  %r21 = add i32 0, 1 ; loadint
  %r22 = sub i32 %r20, %r21
  %r18 = call i32 @QuickSort(i32 %r19, i32 %r22)
  %r24 = load i#3 i32, ptr %r8
  %r25 = add i32 0, 1 ; loadint
  %r26 = add i32 %r24, %r25
  %r27 = load high#1 i32, ptr %r4
  %r23 = call i32 @QuickSort(i32 %r26, i32 %r27)
  br label %B3

}
---------------------------------ir -------------------------------------
; module
define i32 @main(){
B8:
  %r2 = add i32 0, 0 ; loadint
  %r3 = add i32 0, 1 ; loadint
  %r1 = call i32 @QuickSort(i32 %r2, i32 %r3)
  %r4 = add i32 0, 0 ; loadint
  ret i32 %r4

}
define i32 @QuickSort(i32 %r1, i32 %r2){
B0:
  %r3 = alloca i32, i32 4
  store low#1 i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store high#1 i32 %r2, ptr %r4
  br label %B1

B1:
  %r5 = load low#1 i32, ptr %r3
  %r6 = load high#1 i32, ptr %r4
  %r7 = icmp slt i32 %r5, %r6
  br i1 %r7, label %B2, label %B3

B2:
  %r8 = alloca i32, i32 4
  %r9 = load low#1 i32, ptr %r3
  store i#3 i32 %r9, ptr %r8
  %r10 = alloca i32, i32 4
  %r11 = load high#1 i32, ptr %r4
  store j#3 i32 %r11, ptr %r10
  br label %B4

B3:
  %r28 = add i32 0, 0 ; loadint
  ret i32 %r28

B4:
  %r12 = load i#3 i32, ptr %r8
  %r13 = load j#3 i32, ptr %r10
  %r14 = icmp slt i32 %r12, %r13
  br i1 %r14, label %B5, label %B6

B5:
  %r15 = load i#3 i32, ptr %r8
  %r16 = add i32 0, 1 ; loadint
  %r17 = add i32 %r15, %r16
  store i#3 i32 %r17, ptr %r8
  br label %B4

B6:
  %r19 = load low#1 i32, ptr %r3
  %r20 = load i#3 i32, ptr %r8
  %r21 = add i32 0, 1 ; loadint
  %r22 = sub i32 %r20, %r21
  %r18 = call i32 @QuickSort(i32 %r19, i32 %r22)
  %r24 = load i#3 i32, ptr %r8
  %r25 = add i32 0, 1 ; loadint
  %r26 = add i32 %r24, %r25
  %r27 = load high#1 i32, ptr %r4
  %r23 = call i32 @QuickSort(i32 %r26, i32 %r27)
  br label %B3

}
--------------------------- building riscv ---------------------------
