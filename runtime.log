--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) foo ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) a) , 
                    (funcFParam 
                        (bType int) b)) ) 
                (block { 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (lVal a))))) + 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal b)))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) goo ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) a) , 
                    (funcFParam 
                        (bType int) b) , 
                    (funcFParam 
                        (bType int) c) , 
                    (funcFParam 
                        (bType int) d) , 
                    (funcFParam 
                        (bType int) e) , 
                    (funcFParam 
                        (bType int) f) , 
                    (funcFParam 
                        (bType int) g) , 
                    (funcFParam 
                        (bType int) h) , 
                    (funcFParam 
                        (bType int) i) , 
                    (funcFParam 
                        (bType int) j) , 
                    (funcFParam 
                        (bType int) k) , 
                    (funcFParam 
                        (bType int) l) , 
                    (funcFParam 
                        (bType int) m) , 
                    (funcFParam 
                        (bType int) n)) ) 
                (block { 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp foo ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal g))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal f)))))))) ))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef a = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 1))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef b = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 2))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef c = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 2))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef d = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 4))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef e = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 5))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef f = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 6))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef g = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 8))))))))) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal d) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp goo ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal a))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal b))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal b))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal c))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal d))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal e))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal g))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal f))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal g))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal f))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal c))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal d))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal c))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal e)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal d)))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: foo
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: goo
visitCall ident: foo
visitFuncRParams
visitCall args_list size: 2
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: a
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: b
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: c
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: d
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: e
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: f
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: g
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitCall ident: goo
visitFuncRParams
visitCall args_list size: 14
visitAssign done!
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefi32 @foo(i32 @a, i32 @b)
Info: visitParamDefi32 @a
Info: visitParamDefi32 @b
Info: visitBlock
Info: visitStatementReturn @a+@b
Info: visitExpr@a+@b
Info: visitBinopExpr@a+@b
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitReturnStmtReturn @a#1+@b#1function has returnscope id1
Info: visitFuncDefi32 @goo(i32 @a, i32 @b, i32 @c, i32 @d, i32 @e, i32 @f, i32 @g, i32 @h, i32 @i, i32 @j, i32 @k, i32 @l, i32 @m, i32 @n)
Info: visitParamDefi32 @a
Info: visitParamDefi32 @b
Info: visitParamDefi32 @c
Info: visitParamDefi32 @d
Info: visitParamDefi32 @e
Info: visitParamDefi32 @f
Info: visitParamDefi32 @g
Info: visitParamDefi32 @h
Info: visitParamDefi32 @i
Info: visitParamDefi32 @j
Info: visitParamDefi32 @k
Info: visitParamDefi32 @l
Info: visitParamDefi32 @m
Info: visitParamDefi32 @n
Info: visitBlock
Info: visitStatementReturn Call @foo(@g, @f)
Info: visitExprCall @foo(@g, @f)
Info: visiCalltExprCall @foo(@g, @f)
Info: visitExpr@g
Info: visitLvalExpr@g
Info: visitExpr@f
Info: visitLvalExpr@f
Info: visitReturnStmtReturn Call @foo(@g#3, @f#3)function has returnscope id3
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitVarDef i32 @a = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55bbdb5dcdb0
Info: visitVarDef i32 @b = 2
Info: visitExpr2
Info: visitAssignmentExpr2
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55bbdb5ddd80
Info: visitVarDef i32 @c = 2
Info: visitExpr2
Info: visitAssignmentExpr2
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55bbdb5dddb0
Info: visitVarDef i32 @d = 4
Info: visitExpr4
Info: visitAssignmentExpr4
Info: visitExpr4
Info: visitIntLiteralExpr4
ret->type 0x55bbdb5ddde0
Info: visitVarDef i32 @e = 5
Info: visitExpr5
Info: visitAssignmentExpr5
Info: visitExpr5
Info: visitIntLiteralExpr5
ret->type 0x55bbdb5dde10
Info: visitVarDef i32 @f = 6
Info: visitExpr6
Info: visitAssignmentExpr6
Info: visitExpr6
Info: visitIntLiteralExpr6
ret->type 0x55bbdb5dde40
Info: visitVarDef i32 @g = 8
Info: visitExpr8
Info: visitAssignmentExpr8
Info: visitExpr8
Info: visitIntLiteralExpr8
ret->type 0x55bbdb5dde70
Info: visitStatementAssign@d = Call @goo(@a, @b, @b, @c, @d, @e, @g, @f, @g, @f, @c, @d, @c, @e)
Info: visitAssignStmtAssign@d = Call @goo(@a, @b, @b, @c, @d, @e, @g, @f, @g, @f, @c, @d, @c, @e)
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitAssignStmti32
Info: visitExprCall @goo(@a, @b, @b, @c, @d, @e, @g, @f, @g, @f, @c, @d, @c, @e)
Info: visiCalltExprCall @goo(@a, @b, @b, @c, @d, @e, @g, @f, @g, @f, @c, @d, @c, @e)
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitExpr@e
Info: visitLvalExpr@e
Info: visitExpr@g
Info: visitLvalExpr@g
Info: visitExpr@f
Info: visitLvalExpr@f
Info: visitExpr@g
Info: visitLvalExpr@g
Info: visitExpr@f
Info: visitLvalExpr@f
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr@e
Info: visitLvalExpr@e
Info: visitStatementReturn @d
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitReturnStmtReturn @d#6function has returnscope id5
ast: 
Program
  i32 @foo(i32 @a#1, i32 @b#1)
    {
      Return @a#1+@b#1
    }
  i32 @goo(i32 @a#3, i32 @b#3, i32 @c#3, i32 @d#3, i32 @e#3, i32 @f#3, i32 @g#3, i32 @h#3, i32 @i#3, i32 @j#3, i32 @k#3, i32 @l#3, i32 @m#3, i32 @n#3)
    {
      Return Call @foo(@g#3, @f#3)
    }
  i32 @main()
    {
      i32 @a#6 = 1
      i32 @b#6 = 2
      i32 @c#6 = 2
      i32 @d#6 = 4
      i32 @e#6 = 5
      i32 @f#6 = 6
      i32 @g#6 = 8
      Assign@d#6 = Call @goo(@a#6, @b#6, @b#6, @c#6, @d#6, @e#6, @g#6, @f#6, @g#6, @f#6, @c#6, @d#6, @c#6, @e#6)
      Return @d#6
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visitFunction foo
visitFunction param decl: a#1
visitFunction param decl: b#1
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#1
visitExpression
visitExpressionLValue b#1
function foo has 7 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visitFunction goo
visitFunction param decl: a#3
visitFunction param decl: b#3
visitFunction param decl: c#3
visitFunction param decl: d#3
visitFunction param decl: e#3
visitFunction param decl: f#3
visitFunction param decl: g#3
visitFunction param decl: h#3
visitFunction param decl: i#3
visitFunction param decl: j#3
visitFunction param decl: k#3
visitFunction param decl: l#3
visitFunction param decl: m#3
visitFunction param decl: n#3
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue g#3
visitExpression
visitExpressionLValue f#3
function goo has 31 regs
B2:
  prev: 
  succ: 
B3:
  prev: 
  succ: 

B2:
  prev: 
  succ: 

entryB2
reverse_postorderB2
B2:
  doms: 
  domed_by: B2 

B2:
  DF: 

visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#6
visitExpression
visitExpressionLValue b#6
visitExpression
visitExpressionLValue b#6
visitExpression
visitExpressionLValue c#6
visitExpression
visitExpressionLValue d#6
visitExpression
visitExpressionLValue e#6
visitExpression
visitExpressionLValue g#6
visitExpression
visitExpressionLValue f#6
visitExpression
visitExpressionLValue g#6
visitExpression
visitExpressionLValue f#6
visitExpression
visitExpressionLValue c#6
visitExpression
visitExpressionLValue d#6
visitExpression
visitExpressionLValue c#6
visitExpression
visitExpressionLValue e#6
visitStatement
visitExpression
visitExpressionLValue d#6
function main has 30 regs
B4:
  prev: 
  succ: 
B5:
  prev: 
  succ: 

B4:
  prev: 
  succ: 

entryB4
reverse_postorderB4
B4:
  doms: 
  domed_by: B4 

B4:
  DF: 

ir_origin:
; module
define i32 @main(){
B4:
  %r1 = alloca i32, i32 4
  %r2 = add i32 0, 1 ; loadint
  store i32 %r2, ptr %r1
  %r3 = alloca i32, i32 4
  %r4 = add i32 0, 2 ; loadint
  store i32 %r4, ptr %r3
  %r5 = alloca i32, i32 4
  %r6 = add i32 0, 2 ; loadint
  store i32 %r6, ptr %r5
  %r7 = alloca i32, i32 4
  %r8 = add i32 0, 4 ; loadint
  store i32 %r8, ptr %r7
  %r9 = alloca i32, i32 4
  %r10 = add i32 0, 5 ; loadint
  store i32 %r10, ptr %r9
  %r11 = alloca i32, i32 4
  %r12 = add i32 0, 6 ; loadint
  store i32 %r12, ptr %r11
  %r13 = alloca i32, i32 4
  %r14 = add i32 0, 8 ; loadint
  store i32 %r14, ptr %r13
  %r16 = load i32, ptr %r1
  %r17 = load i32, ptr %r3
  %r18 = load i32, ptr %r3
  %r19 = load i32, ptr %r5
  %r20 = load i32, ptr %r7
  %r21 = load i32, ptr %r9
  %r22 = load i32, ptr %r13
  %r23 = load i32, ptr %r11
  %r24 = load i32, ptr %r13
  %r25 = load i32, ptr %r11
  %r26 = load i32, ptr %r5
  %r27 = load i32, ptr %r7
  %r28 = load i32, ptr %r5
  %r29 = load i32, ptr %r9
  %r15 = call i32 @goo(i32 %r16, i32 %r17, i32 %r18, i32 %r19, i32 %r20, i32 %r21, i32 %r22, i32 %r23, i32 %r24, i32 %r25, i32 %r26, i32 %r27, i32 %r28, i32 %r29)
  store i32 %r15, ptr %r7
  %r30 = load i32, ptr %r7
  ret i32 %r30

}
define i32 @goo(i32 %r1, i32 %r2, i32 %r3, i32 %r4, i32 %r5, i32 %r6, i32 %r7, i32 %r8, i32 %r9, i32 %r10, i32 %r11, i32 %r12, i32 %r13, i32 %r14){
B2:
  %r15 = alloca i32, i32 4
  store i32 %r1, ptr %r15
  %r16 = alloca i32, i32 4
  store i32 %r2, ptr %r16
  %r17 = alloca i32, i32 4
  store i32 %r3, ptr %r17
  %r18 = alloca i32, i32 4
  store i32 %r4, ptr %r18
  %r19 = alloca i32, i32 4
  store i32 %r5, ptr %r19
  %r20 = alloca i32, i32 4
  store i32 %r6, ptr %r20
  %r21 = alloca i32, i32 4
  store i32 %r7, ptr %r21
  %r22 = alloca i32, i32 4
  store i32 %r8, ptr %r22
  %r23 = alloca i32, i32 4
  store i32 %r9, ptr %r23
  %r24 = alloca i32, i32 4
  store i32 %r10, ptr %r24
  %r25 = alloca i32, i32 4
  store i32 %r11, ptr %r25
  %r26 = alloca i32, i32 4
  store i32 %r12, ptr %r26
  %r27 = alloca i32, i32 4
  store i32 %r13, ptr %r27
  %r28 = alloca i32, i32 4
  store i32 %r14, ptr %r28
  %r30 = load i32, ptr %r21
  %r31 = load i32, ptr %r20
  %r29 = call i32 @foo(i32 %r30, i32 %r31)
  ret i32 %r29

}
define i32 @foo(i32 %r1, i32 %r2){
B0:
  %r3 = alloca i32, i32 4
  store i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store i32 %r2, ptr %r4
  %r5 = load i32, ptr %r3
  %r6 = load i32, ptr %r4
  %r7 = add i32 %r5, %r6
  ret i32 %r7

}
---------------------------------ir -------------------------------------
; module
define i32 @main(){
B4:
  %r1 = alloca i32, i32 4
  %r2 = add i32 0, 1 ; loadint
  store i32 %r2, ptr %r1
  %r3 = alloca i32, i32 4
  %r4 = add i32 0, 2 ; loadint
  store i32 %r4, ptr %r3
  %r5 = alloca i32, i32 4
  %r6 = add i32 0, 2 ; loadint
  store i32 %r6, ptr %r5
  %r7 = alloca i32, i32 4
  %r8 = add i32 0, 4 ; loadint
  store i32 %r8, ptr %r7
  %r9 = alloca i32, i32 4
  %r10 = add i32 0, 5 ; loadint
  store i32 %r10, ptr %r9
  %r11 = alloca i32, i32 4
  %r12 = add i32 0, 6 ; loadint
  store i32 %r12, ptr %r11
  %r13 = alloca i32, i32 4
  %r14 = add i32 0, 8 ; loadint
  store i32 %r14, ptr %r13
  %r16 = load i32, ptr %r1
  %r17 = load i32, ptr %r3
  %r18 = load i32, ptr %r3
  %r19 = load i32, ptr %r5
  %r20 = load i32, ptr %r7
  %r21 = load i32, ptr %r9
  %r22 = load i32, ptr %r13
  %r23 = load i32, ptr %r11
  %r24 = load i32, ptr %r13
  %r25 = load i32, ptr %r11
  %r26 = load i32, ptr %r5
  %r27 = load i32, ptr %r7
  %r28 = load i32, ptr %r5
  %r29 = load i32, ptr %r9
  %r15 = call i32 @goo(i32 %r16, i32 %r17, i32 %r18, i32 %r19, i32 %r20, i32 %r21, i32 %r22, i32 %r23, i32 %r24, i32 %r25, i32 %r26, i32 %r27, i32 %r28, i32 %r29)
  store i32 %r15, ptr %r7
  %r30 = load i32, ptr %r7
  ret i32 %r30

}
define i32 @goo(i32 %r1, i32 %r2, i32 %r3, i32 %r4, i32 %r5, i32 %r6, i32 %r7, i32 %r8, i32 %r9, i32 %r10, i32 %r11, i32 %r12, i32 %r13, i32 %r14){
B2:
  %r15 = alloca i32, i32 4
  store i32 %r1, ptr %r15
  %r16 = alloca i32, i32 4
  store i32 %r2, ptr %r16
  %r17 = alloca i32, i32 4
  store i32 %r3, ptr %r17
  %r18 = alloca i32, i32 4
  store i32 %r4, ptr %r18
  %r19 = alloca i32, i32 4
  store i32 %r5, ptr %r19
  %r20 = alloca i32, i32 4
  store i32 %r6, ptr %r20
  %r21 = alloca i32, i32 4
  store i32 %r7, ptr %r21
  %r22 = alloca i32, i32 4
  store i32 %r8, ptr %r22
  %r23 = alloca i32, i32 4
  store i32 %r9, ptr %r23
  %r24 = alloca i32, i32 4
  store i32 %r10, ptr %r24
  %r25 = alloca i32, i32 4
  store i32 %r11, ptr %r25
  %r26 = alloca i32, i32 4
  store i32 %r12, ptr %r26
  %r27 = alloca i32, i32 4
  store i32 %r13, ptr %r27
  %r28 = alloca i32, i32 4
  store i32 %r14, ptr %r28
  %r30 = load i32, ptr %r21
  %r31 = load i32, ptr %r20
  %r29 = call i32 @foo(i32 %r30, i32 %r31)
  ret i32 %r29

}
define i32 @foo(i32 %r1, i32 %r2){
B0:
  %r3 = alloca i32, i32 4
  store i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store i32 %r2, ptr %r4
  %r5 = load i32, ptr %r3
  %r6 = load i32, ptr %r4
  %r7 = add i32 %r5, %r6
  ret i32 %r7

}
--------------------------- building riscv ---------------------------
riscv: 
    addi T[-1], sp, 76
    li T[-2], 1
    sw T[-2], 0(T[-1])
    addi T[-3], sp, 80
    li T[-4], 2
    sw T[-4], 0(T[-3])
    addi T[-5], sp, 84
    li T[-6], 2
    sw T[-6], 0(T[-5])
    addi T[-7], sp, 88
    li T[-8], 4
    sw T[-8], 0(T[-7])
    addi T[-9], sp, 92
    li T[-10], 5
    sw T[-10], 0(T[-9])
    addi T[-11], sp, 96
    li T[-12], 6
    sw T[-12], 0(T[-11])
    addi T[-13], sp, 100
    li T[-14], 8
    sw T[-14], 0(T[-13])
    lw T[-16], 0(T[-1])
    lw T[-17], 0(T[-3])
    lw T[-18], 0(T[-3])
    lw T[-19], 0(T[-5])
    lw T[-20], 0(T[-7])
    lw T[-21], 0(T[-9])
    lw T[-22], 0(T[-13])
    lw T[-23], 0(T[-11])
    lw T[-24], 0(T[-13])
    lw T[-25], 0(T[-11])
    lw T[-26], 0(T[-5])
    lw T[-27], 0(T[-7])
    lw T[-28], 0(T[-5])
    lw T[-29], 0(T[-9])
    mv a1, T[-16]
    mv a2, T[-17]
    mv a3, T[-18]
    mv a4, T[-19]
    mv a5, T[-20]
    mv a6, T[-21]
    mv a7, T[-22]
    sw T[-23], 0(sp)
    sw T[-24], 4(sp)
    sw T[-25], 8(sp)
    sw T[-26], 12(sp)
    sw T[-27], 16(sp)
    sw T[-28], 20(sp)
    sw T[-29], 24(sp)
    call goo
    mv T[-15], a0
    sw T[-15], 0(T[-7])
    lw T[-30], 0(T[-7])
    mv a0, T[-30]
    ret
    lw T[-14], 24(t1)
    lw T[-13], 20(t1)
    lw T[-12], 16(t1)
    lw T[-11], 12(t1)
    lw T[-10], 8(t1)
    lw T[-9], 4(t1)
    lw T[-8], 0(t1)
    addi T[-15], sp, 76
    sw a1, 0(T[-15])
    addi T[-16], sp, 80
    sw a2, 0(T[-16])
    addi T[-17], sp, 84
    sw a3, 0(T[-17])
    addi T[-18], sp, 88
    sw a4, 0(T[-18])
    addi T[-19], sp, 92
    sw a5, 0(T[-19])
    addi T[-20], sp, 96
    sw a6, 0(T[-20])
    addi T[-21], sp, 100
    sw a7, 0(T[-21])
    addi T[-22], sp, 104
    sw T[-8], 0(T[-22])
    addi T[-23], sp, 108
    sw T[-9], 0(T[-23])
    addi T[-24], sp, 112
    sw T[-10], 0(T[-24])
    addi T[-25], sp, 116
    sw T[-11], 0(T[-25])
    addi T[-26], sp, 120
    sw T[-12], 0(T[-26])
    addi T[-27], sp, 124
    sw T[-13], 0(T[-27])
    addi T[-28], sp, 128
    sw T[-14], 0(T[-28])
    lw T[-30], 0(T[-21])
    lw T[-31], 0(T[-20])
    sw a1, 48(sp)
    sw a2, 52(sp)
    sw a3, 56(sp)
    sw a4, 60(sp)
    sw a5, 64(sp)
    sw a6, 68(sp)
    sw a7, 72(sp)
    mv a1, T[-30]
    mv a2, T[-31]
    call foo
    mv T[-29], a0
    lw a1, 48(sp)
    lw a2, 52(sp)
    lw a3, 56(sp)
    lw a4, 60(sp)
    lw a5, 64(sp)
    lw a6, 68(sp)
    lw a7, 72(sp)
    mv a0, T[-29]
    ret
    addi T[-3], sp, 56
    sw a1, 0(T[-3])
    addi T[-4], sp, 60
    sw a2, 0(T[-4])
    lw T[-5], 0(T[-3])
    lw T[-6], 0(T[-4])
    add T[-7], T[-5], T[-6]
    mv a0, T[-7]
    ret
?
foo
foo Main()
foo do_liveness_analysis() done
foo Build() done
freeze reg MkWorklist insert T[-7]
simplify reg MkWorklist insert T[-6]
simplify reg MkWorklist insert T[-5]
simplify reg MkWorklist insert T[-4]
simplify reg MkWorklist insert T[-3]
foo MkWorklist() done
foo Simplify()
foo Simplify()
foo Simplify()
foo Simplify()
foo Coalesce()
foo AssignColors() done
replace regs

foo
after compute reg_used
after prologue
end of emitend
goo
goo Main()
goo do_liveness_analysis() done
goo Build() done
freeze reg MkWorklist insert T[-31]
freeze reg MkWorklist insert T[-30]
freeze reg MkWorklist insert T[-29]
simplify reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-27]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
simplify reg MkWorklist insert T[-24]
simplify reg MkWorklist insert T[-23]
simplify reg MkWorklist insert T[-22]
simplify reg MkWorklist insert T[-21]
simplify reg MkWorklist insert T[-20]
simplify reg MkWorklist insert T[-19]
simplify reg MkWorklist insert T[-18]
simplify reg MkWorklist insert T[-17]
simplify reg MkWorklist insert T[-16]
simplify reg MkWorklist insert T[-15]
spill reg MkWorklist insert T[-14]
spill reg MkWorklist insert T[-13]
spill reg MkWorklist insert T[-12]
spill reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-8]
goo MkWorklist() done
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Simplify()
goo Coalesce()
goo Simplify()
goo Coalesce()
goo Simplify()
goo Coalesce()
goo Coalesce()
goo AssignColors() done
replace regs

goo
after compute reg_used
after prologue
end of emitend
main
main Main()
main do_liveness_analysis() done
main Build() done
freeze reg MkWorklist insert T[-30]
simplify reg MkWorklist insert T[-29]
simplify reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-27]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
spill reg MkWorklist insert T[-24]
spill reg MkWorklist insert T[-23]
spill reg MkWorklist insert T[-22]
freeze reg MkWorklist insert T[-21]
freeze reg MkWorklist insert T[-20]
freeze reg MkWorklist insert T[-19]
freeze reg MkWorklist insert T[-18]
freeze reg MkWorklist insert T[-17]
freeze reg MkWorklist insert T[-16]
freeze reg MkWorklist insert T[-15]
simplify reg MkWorklist insert T[-14]
simplify reg MkWorklist insert T[-13]
simplify reg MkWorklist insert T[-12]
simplify reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-8]
spill reg MkWorklist insert T[-7]
simplify reg MkWorklist insert T[-6]
simplify reg MkWorklist insert T[-5]
simplify reg MkWorklist insert T[-4]
simplify reg MkWorklist insert T[-3]
simplify reg MkWorklist insert T[-2]
simplify reg MkWorklist insert T[-1]
main MkWorklist() done
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main AssignColors() done
replace regs

main
after compute reg_used
after prologue
end of emitend
