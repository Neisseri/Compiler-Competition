--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (constDecl const 
                                (bType int) 
                                (constDef N = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 3))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (constDecl const 
                                (bType int) 
                                (constDef a [ 
                                    (exp 
                                        (addExp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (lVal N))))) + 
                                            (mulExp 
                                                (unaryExp 
                                                    (primaryExp 
                                                        (number 
                                                            (intConst 1))))))) ] [ 
                                    (exp 
                                        (addExp 
                                            (mulExp 
                                                (unaryExp 
                                                    (primaryExp 
                                                        (number 
                                                            (intConst 2))))))) ] = 
                                    (initVal { 
                                        (initVal { 
                                            (initVal 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 1)))))))) }) , 
                                        (initVal { 
                                            (initVal 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 2)))))))) , 
                                            (initVal 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 3)))))))) }) , 
                                        (initVal { }) , 
                                        (initVal 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 7)))))))) })) ;))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: main
visitConstDecl: int start
visitConstDecl: ident: N
visitConstDecl: initVal
visitInit
visitPrimaryExp_ number
visitConstDecl: int start
visitConstDecl: array dim_size=2
visitPrimaryExp_ number
visitPrimaryExp_ number
visitConstDecl: ident: a
visitConstDecl: initVal
visitInit
visitPrimaryExp_ number
visitInit
visitPrimaryExp_ number
visitInit
visitPrimaryExp_ number
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitVarDef const int @N = 3
Info: visitExpr3
Info: visitAssignmentExpr3
Info: visitExpr3
Info: visitIntLiteralExpr3
ret->type 0x55f7b1bee9b0
Info: visitVarDef const int @a = {{1}, {2, 3}, {}, 7}
Info: visitDims @N+1
Info: visitExpr@N+1
Info: visitBinopExpr@N+1
Info: visitExpr@N
Info: visitLvalExpr@N
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f7b1c02fd0
Info: visitDims 2
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55f7b1bee9e0
Info: visitExpr{{1}, {2, 3}, {}, 7}
Info: visitAssignmentExpr{{1}, {2, 3}, {}, 7}
Info: assignment->value is nullptr , its an array ,return nullptr
Info: expr_type is nullptr , its an array ,return
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f7b1c03000
ast: 
Program
  int @main()
    {
      const int @N#2 = 3
      const int @a#2 = {{1}, {2, 3}, {}, 7}
      Return 0
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpressionVal
visitExpressionVal
visit decl array
visitExpressionVal
visitExpressionVal
visitExpressionVal
visitExpressionVal
visitExpression
visitExpression
visitExpression
visitExpression
visitExpression
visitExpression
visitExpression
visitExpression
visit decl array done
visitExpression
function main has 28 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

ir:
; module
define i32 @main(){
B0:
  %1 = alloca int, 4
  %2 = 3
  store i32 %2, ptr %1
  %3 = alloca int, 32
  %4 = 1
  %6 = 0
  %5 = add i32 %3, %6
  store i32 %4, ptr %5
  %7 = 0
  %9 = 4
  %8 = add i32 %3, %9
  store i32 %7, ptr %8
  %10 = 2
  %12 = 8
  %11 = add i32 %3, %12
  store i32 %10, ptr %11
  %13 = 3
  %15 = 12
  %14 = add i32 %3, %15
  store i32 %13, ptr %14
  %16 = 0
  %18 = 16
  %17 = add i32 %3, %18
  store i32 %16, ptr %17
  %19 = 0
  %21 = 20
  %20 = add i32 %3, %21
  store i32 %19, ptr %20
  %22 = 7
  %24 = 24
  %23 = add i32 %3, %24
  store i32 %22, ptr %23
  %25 = 0
  %27 = 28
  %26 = add i32 %3, %27
  store i32 %25, ptr %26
  %28 = 0
  ret i32 %28

}
--------------------------- building riscv ---------------------------
riscv: 

B1:
addi T[-1], sp, 48
li T[-2], 3
sw T[-2], 0(T[-1])
addi T[-3], sp, 52
li T[-4], 1
li T[-6], 0
add T[-5], T[-3], T[-6]
sw T[-4], 0(T[-5])
li T[-7], 0
li T[-9], 4
add T[-8], T[-3], T[-9]
sw T[-7], 0(T[-8])
li T[-10], 2
li T[-12], 8
add T[-11], T[-3], T[-12]
sw T[-10], 0(T[-11])
li T[-13], 3
li T[-15], 12
add T[-14], T[-3], T[-15]
sw T[-13], 0(T[-14])
li T[-16], 0
li T[-18], 16
add T[-17], T[-3], T[-18]
sw T[-16], 0(T[-17])
li T[-19], 0
li T[-21], 20
add T[-20], T[-3], T[-21]
sw T[-19], 0(T[-20])
li T[-22], 7
li T[-24], 24
add T[-23], T[-3], T[-24]
sw T[-22], 0(T[-23])
li T[-25], 0
li T[-27], 28
add T[-26], T[-3], T[-27]
sw T[-25], 0(T[-26])
li T[-28], 0
mv a0, T[-28]
ret
pred: B0 
succ: 
