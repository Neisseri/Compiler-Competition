--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef array [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (number 
                                                (intConst 110))))))) ]) ;))) 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef n) ;))) 
        (compUnitItem 
            (funcDef 
                (funcType void) init ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) n)) ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 1))))))))) ;))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i)))))) <= 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal n)))) * 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal n))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal array [ 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i)))))) ]) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp - 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 1)))))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal i) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) })))) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) findfa ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) a)) ) 
                (block { 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (eqExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal array [ 
                                                                        (exp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal a)))))) ]))))))) == 
                                            (relExp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal a)))))))))) ) 
                            (stmt return 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (lVal a)))))) ;) else 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal array [ 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal a)))))) ]) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp findfa ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal array [ 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (lVal a)))))) ])))))))) ))))) ;)) 
                                    (blockItem 
                                        (stmt return 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal array [ 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal a)))))) ])))))) ;)) })))) }))) 
        (compUnitItem 
            (funcDef 
                (funcType void) mmerge ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) a) , 
                    (funcFParam 
                        (bType int) b)) ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef m = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp findfa ( 
                                                        (funcRParams 
                                                            (funcRParam 
                                                                (exp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal a)))))))) ))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef n = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp findfa ( 
                                                        (funcRParams 
                                                            (funcRParam 
                                                                (exp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal b)))))))) ))))))) ;))) 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (eqExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal m))))))) != 
                                            (relExp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal n)))))))))) ) 
                            (stmt 
                                (lVal array [ 
                                    (exp 
                                        (addExp 
                                            (mulExp 
                                                (unaryExp 
                                                    (primaryExp 
                                                        (lVal m)))))) ]) = 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (lVal n)))))) ;))) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef t) , 
                                (varDef m) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef a) , 
                                (varDef b) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal t) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 1))))))) ;)) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal t)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal t) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal t))))) - 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal n) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 4))))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal m) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 10))))))) ;)) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef i = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (number 
                                                                                (intConst 0))))))))) ;))) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef flag = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (number 
                                                                                (intConst 0))))))))) ;))) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp init ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal n)))))))) ))))) ;)) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef k = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal n)))) * 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal n))))) + 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (number 
                                                                                (intConst 1))))))))) ;))) 
                                    (blockItem 
                                        (stmt while ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal i)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal m)))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal a) = 
                                                            (exp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp getint ( ))))) ;)) 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal b) = 
                                                            (exp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp getint ( ))))) ;)) 
                                                    (blockItem 
                                                        (stmt if ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (eqExp 
                                                                            (relExp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp ! 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal flag))))))))))) ) 
                                                            (stmt 
                                                                (block { 
                                                                    (blockItem 
                                                                        (decl 
                                                                            (varDecl 
                                                                                (bType int) 
                                                                                (varDef loc = 
                                                                                    (initVal 
                                                                                        (exp 
                                                                                            (addExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal n)))) * 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp ( 
                                                                                                                (exp 
                                                                                                                    (addExp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal a))))) - 
                                                                                                                        (mulExp 
                                                                                                                            (unaryExp 
                                                                                                                                (primaryExp 
                                                                                                                                    (number 
                                                                                                                                        (intConst 1))))))) ))))) + 
                                                                                                (mulExp 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (lVal b)))))))) ;))) 
                                                                    (blockItem 
                                                                        (stmt 
                                                                            (lVal array [ 
                                                                                (exp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal loc)))))) ]) = 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (lVal loc)))))) ;)) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (eqExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal a))))))) == 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (number 
                                                                                                                    (intConst 1))))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (lVal array [ 
                                                                                                (exp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (number 
                                                                                                                        (intConst 0))))))) ]) = 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (number 
                                                                                                                    (intConst 0))))))) ;)) 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp mmerge ( 
                                                                                                            (funcRParams 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal loc))))))) , 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (number 
                                                                                                                                            (intConst 0))))))))) ))))) ;)) })))) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (eqExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal a))))))) == 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (lVal n)))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (lVal array [ 
                                                                                                (exp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal k)))))) ]) = 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (lVal k)))))) ;)) 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp mmerge ( 
                                                                                                            (funcRParams 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal loc))))))) , 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal k)))))))) ))))) ;)) })))) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (lAndExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (lVal b)))))) < 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal n)))))))) && 
                                                                                        (eqExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal array [ 
                                                                                                                        (exp 
                                                                                                                            (addExp 
                                                                                                                                (addExp 
                                                                                                                                    (mulExp 
                                                                                                                                        (unaryExp 
                                                                                                                                            (primaryExp 
                                                                                                                                                (lVal loc))))) + 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (number 
                                                                                                                                                (intConst 1))))))) ]))))))) != 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp - 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (number 
                                                                                                                        (intConst 1)))))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp mmerge ( 
                                                                                                            (funcRParams 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal loc))))))) , 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (addExp 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (lVal loc))))) + 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (number 
                                                                                                                                            (intConst 1))))))))) ))))) ;)) })))) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (lAndExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (lVal b)))))) > 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (number 
                                                                                                                        (intConst 1))))))))) && 
                                                                                        (eqExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal array [ 
                                                                                                                        (exp 
                                                                                                                            (addExp 
                                                                                                                                (addExp 
                                                                                                                                    (mulExp 
                                                                                                                                        (unaryExp 
                                                                                                                                            (primaryExp 
                                                                                                                                                (lVal loc))))) - 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (number 
                                                                                                                                                (intConst 1))))))) ]))))))) != 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp - 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (number 
                                                                                                                        (intConst 1)))))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp mmerge ( 
                                                                                                            (funcRParams 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal loc))))))) , 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (addExp 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (lVal loc))))) - 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (number 
                                                                                                                                            (intConst 1))))))))) ))))) ;)) })))) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (lAndExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (lVal a)))))) < 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal n)))))))) && 
                                                                                        (eqExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal array [ 
                                                                                                                        (exp 
                                                                                                                            (addExp 
                                                                                                                                (addExp 
                                                                                                                                    (mulExp 
                                                                                                                                        (unaryExp 
                                                                                                                                            (primaryExp 
                                                                                                                                                (lVal loc))))) + 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (lVal n)))))) ]))))))) != 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp - 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (number 
                                                                                                                        (intConst 1)))))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp mmerge ( 
                                                                                                            (funcRParams 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal loc))))))) , 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (addExp 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (lVal loc))))) + 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal n)))))))) ))))) ;)) })))) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (lAndExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (lVal a)))))) > 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (number 
                                                                                                                        (intConst 1))))))))) && 
                                                                                        (eqExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal array [ 
                                                                                                                        (exp 
                                                                                                                            (addExp 
                                                                                                                                (addExp 
                                                                                                                                    (mulExp 
                                                                                                                                        (unaryExp 
                                                                                                                                            (primaryExp 
                                                                                                                                                (lVal loc))))) - 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (lVal n)))))) ]))))))) != 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp - 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (number 
                                                                                                                        (intConst 1)))))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp mmerge ( 
                                                                                                            (funcRParams 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal loc))))))) , 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (addExp 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (lVal loc))))) - 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal n)))))))) ))))) ;)) })))) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (lAndExp 
                                                                                            (lAndExp 
                                                                                                (eqExp 
                                                                                                    (eqExp 
                                                                                                        (relExp 
                                                                                                            (addExp 
                                                                                                                (mulExp 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (lVal array [ 
                                                                                                                                (exp 
                                                                                                                                    (addExp 
                                                                                                                                        (mulExp 
                                                                                                                                            (unaryExp 
                                                                                                                                                (primaryExp 
                                                                                                                                                    (number 
                                                                                                                                                        (intConst 0))))))) ]))))))) != 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp - 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (number 
                                                                                                                                (intConst 1)))))))))) && 
                                                                                            (eqExp 
                                                                                                (eqExp 
                                                                                                    (relExp 
                                                                                                        (addExp 
                                                                                                            (mulExp 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (lVal array [ 
                                                                                                                            (exp 
                                                                                                                                (addExp 
                                                                                                                                    (mulExp 
                                                                                                                                        (unaryExp 
                                                                                                                                            (primaryExp 
                                                                                                                                                (lVal k)))))) ]))))))) != 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp - 
                                                                                                                (unaryExp 
                                                                                                                    (primaryExp 
                                                                                                                        (number 
                                                                                                                            (intConst 1)))))))))) && 
                                                                                        (eqExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp findfa ( 
                                                                                                                (funcRParams 
                                                                                                                    (funcRParam 
                                                                                                                        (exp 
                                                                                                                            (addExp 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (number 
                                                                                                                                                (intConst 0))))))))) )))))) == 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp findfa ( 
                                                                                                            (funcRParams 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal k)))))))) ))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (lVal flag) = 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (number 
                                                                                                                    (intConst 1))))))) ;)) 
                                                                                    (blockItem 
                                                                                        (decl 
                                                                                            (varDecl 
                                                                                                (bType int) 
                                                                                                (varDef tmp = 
                                                                                                    (initVal 
                                                                                                        (exp 
                                                                                                            (addExp 
                                                                                                                (addExp 
                                                                                                                    (mulExp 
                                                                                                                        (unaryExp 
                                                                                                                            (primaryExp 
                                                                                                                                (lVal i))))) + 
                                                                                                                (mulExp 
                                                                                                                    (unaryExp 
                                                                                                                        (primaryExp 
                                                                                                                            (number 
                                                                                                                                (intConst 1))))))))) ;))) 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp putint ( 
                                                                                                            (funcRParams 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (lVal tmp)))))))) ))))) ;)) 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp putch ( 
                                                                                                            (funcRParams 
                                                                                                                (funcRParam 
                                                                                                                    (exp 
                                                                                                                        (addExp 
                                                                                                                            (mulExp 
                                                                                                                                (unaryExp 
                                                                                                                                    (primaryExp 
                                                                                                                                        (number 
                                                                                                                                            (intConst 10))))))))) ))))) ;)) })))) })))) 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal i) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal i))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) })))) 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp ! 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal flag))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (exp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp putint ( 
                                                                            (funcRParams 
                                                                                (funcRParam 
                                                                                    (exp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp - 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (number 
                                                                                                                (intConst 1)))))))))) ))))) ;)) 
                                                    (blockItem 
                                                        (stmt 
                                                            (exp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp putch ( 
                                                                            (funcRParams 
                                                                                (funcRParam 
                                                                                    (exp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp 
                                                                                                    (primaryExp 
                                                                                                        (number 
                                                                                                            (intConst 10))))))))) ))))) ;)) })))) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitVarDecl: int start
visitVarDecl: array dim_size=1
visitPrimaryExp_ number
visitVarDecl: ident: array
visitVarDecl: int start
visitVarDecl: ident: n
visitCompUnit: funcDef
construct funct block: init
visitVarDecl: int start
visitVarDecl: ident: i
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: findfa
visit block stmt
visitCall ident: findfa
visitFuncRParams
visitCall args_list size: 1
visitAssign done!
visitBlock done!
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: mmerge
visitVarDecl: int start
visitVarDecl: ident: m
visitVarDecl: initVal
visitInit
visitCall ident: findfa
visitFuncRParams
visitCall args_list size: 1
visitVarDecl: int start
visitVarDecl: ident: n
visitVarDecl: initVal
visitInit
visitCall ident: findfa
visitFuncRParams
visitCall args_list size: 1
visitAssign done!
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: t
visitVarDecl: ident: m
visitVarDecl: int start
visitVarDecl: ident: a
visitVarDecl: ident: b
visitPrimaryExp_ number
visitAssign done!
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: i
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: flag
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitExprStmt
visitCall ident: init
visitFuncRParams
visitCall args_list size: 1
visitVarDecl: int start
visitVarDecl: ident: k
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visit block stmt
visitCall ident: getint
visitCall args_list size: 0
visitAssign done!
visitCall ident: getint
visitCall args_list size: 0
visitAssign done!
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: loc
visitVarDecl: initVal
visitInit
visitPrimaryExp_ exp
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitExprStmt
visitCall ident: mmerge
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 2
visitBlock done!
visit block stmt
visitAssign done!
visitExprStmt
visitCall ident: mmerge
visitFuncRParams
visitCall args_list size: 2
visitBlock done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitExprStmt
visitCall ident: mmerge
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 2
visitBlock done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitExprStmt
visitCall ident: mmerge
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 2
visitBlock done!
visitPrimaryExp_ number
visit block stmt
visitExprStmt
visitCall ident: mmerge
visitFuncRParams
visitCall args_list size: 2
visitBlock done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitExprStmt
visitCall ident: mmerge
visitFuncRParams
visitCall args_list size: 2
visitBlock done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visitCall ident: findfa
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitCall ident: findfa
visitFuncRParams
visitCall args_list size: 1
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: tmp
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitCall args_list size: 1
visitExprStmt
visitCall ident: putch
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitBlock done!
visitBlock done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visit block stmt
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitExprStmt
visitCall ident: putch
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitBlock done!
visitBlock done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitVarDef i32 @array[110]
Info: var_def->indices->children.size() 1
Info: visitDims 110
Info: visitExpr110
Info: visitIntLiteralExpr110
ret->type 0x55fa32cdd530
Info: visitVarDef i32 @n
Info: visitFuncDefvoid @init(i32 @n)
Info: visitParamDefi32 @n
Info: visitBlock
Info: visitVarDef i32 @i = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cdd790
Info: visitStatementWhile
Info: visitExpr@i<=@n*@n+1
Info: visitBinopExpr@i<=@n*@n+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr@n*@n+1
Info: visitBinopExpr@n*@n+1
Info: visitExpr@n*@n
Info: visitBinopExpr@n*@n
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cdd870
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@array[@i] = -1
Info: visitAssignStmtAssign@array[@i] = -1
Info: visitExpr@array[@i]
Info: visitLvalExpr@array[@i]
Info: lval->indices->children.size() 1
Info: visitDims @i
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmti32
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cdd560
Info: visitStatementAssign@i = @i+1
Info: visitAssignStmtAssign@i = @i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmti32
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cdd9e0
Info: function init has no returnscope id1
Info: visitFuncDefi32 @findfa(i32 @a)
Info: visitParamDefi32 @a
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@array[@a]==@a
Info: visitBinopExpr@array[@a]==@a
Info: visitExpr@array[@a]
Info: visitLvalExpr@array[@a]
Info: lval->indices->children.size() 1
Info: visitDims @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitStatementReturn @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitReturnStmtReturn @a#5function has returnscope id5
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@array[@a] = Call @findfa(@array[@a])
Info: visitAssignStmtAssign@array[@a] = Call @findfa(@array[@a])
Info: visitExpr@array[@a]
Info: visitLvalExpr@array[@a]
Info: lval->indices->children.size() 1
Info: visitDims @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmti32
Info: visitExprCall @findfa(@array[@a])
Info: visiCalltExprCall @findfa(@array[@a])
Info: visitExpr@array[@a]
Info: visitLvalExpr@array[@a]
Info: lval->indices->children.size() 1
Info: visitDims @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitStatementReturn @array[@a]
Info: visitExpr@array[@a]
Info: visitLvalExpr@array[@a]
Info: lval->indices->children.size() 1
Info: visitDims @a
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitReturnStmtReturn @array#0[@a#5]function has returnscope id5
Info: visitFuncDefvoid @mmerge(i32 @a, i32 @b)
Info: visitParamDefi32 @a
Info: visitParamDefi32 @b
Info: visitBlock
Info: visitVarDef i32 @m = Call @findfa(@a)
Info: visitExprCall @findfa(@a)
Info: visitAssignmentExprCall @findfa(@a)
Info: visitExprCall @findfa(@a)
Info: visiCalltExprCall @findfa(@a)
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitVarDef i32 @n = Call @findfa(@b)
Info: visitExprCall @findfa(@b)
Info: visitAssignmentExprCall @findfa(@b)
Info: visitExprCall @findfa(@b)
Info: visiCalltExprCall @findfa(@b)
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitStatementIfElse
Info: visitExpr@m!=@n
Info: visitBinopExpr@m!=@n
Info: visitExpr@m
Info: visitLvalExpr@m
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitStatementAssign@array[@m] = @n
Info: visitAssignStmtAssign@array[@m] = @n
Info: visitExpr@array[@m]
Info: visitLvalExpr@array[@m]
Info: lval->indices->children.size() 1
Info: visitDims @m
Info: visitExpr@m
Info: visitLvalExpr@m
Info: visitAssignStmti32
Info: visitExpr@n
Info: visitLvalExpr@n
Info: function mmerge has no returnscope id8
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitVarDef i32 @t
Info: visitVarDef i32 @m
Info: visitVarDef i32 @a
Info: visitVarDef i32 @b
Info: visitStatementAssign@t = 1
Info: visitAssignStmtAssign@t = 1
Info: visitExpr@t
Info: visitLvalExpr@t
Info: visitAssignStmti32
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cddb30
Info: visitStatementWhile
Info: visitExpr@t
Info: visitLvalExpr@t
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@t = @t-1
Info: visitAssignStmtAssign@t = @t-1
Info: visitExpr@t
Info: visitLvalExpr@t
Info: visitAssignStmti32
Info: visitExpr@t-1
Info: visitBinopExpr@t-1
Info: visitExpr@t
Info: visitLvalExpr@t
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cddaa0
Info: visitStatementAssign@n = 4
Info: visitAssignStmtAssign@n = 4
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitAssignStmti32
Info: visitExpr4
Info: visitIntLiteralExpr4
ret->type 0x55fa32cddd30
Info: visitStatementAssign@m = 10
Info: visitAssignStmtAssign@m = 10
Info: visitExpr@m
Info: visitLvalExpr@m
Info: visitAssignStmti32
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55fa32cddd60
Info: visitVarDef i32 @i = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55fa32cddd90
Info: visitVarDef i32 @flag = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55fa32cdde70
Info: visitStatementCall @init(@n)
Info: visitExprStmtCall @init(@n)
Info: visitExprCall @init(@n)
Info: visiCalltExprCall @init(@n)
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitVarDef i32 @k = @n*@n+1
Info: visitExpr@n*@n+1
Info: visitAssignmentExpr@n*@n+1
Info: visitExpr@n*@n+1
Info: visitBinopExpr@n*@n+1
Info: visitExpr@n*@n
Info: visitBinopExpr@n*@n
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cddf50
Info: visitStatementWhile
Info: visitExpr@i<@m
Info: visitBinopExpr@i<@m
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr@m
Info: visitLvalExpr@m
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@a = Call @getint()
Info: visitAssignStmtAssign@a = Call @getint()
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmti32
Info: visitExprCall @getint()
Info: visiCalltExprCall @getint()
Info: use of undeclared function getint
Info: rval_type is nullptr , its an array ,return
Info: visitStatementAssign@b = Call @getint()
Info: visitAssignStmtAssign@b = Call @getint()
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmti32
Info: visitExprCall @getint()
Info: visiCalltExprCall @getint()
Info: use of undeclared function getint
Info: rval_type is nullptr , its an array ,return
Info: visitStatementIfElse
Info: visitExpr!@flag
Info: visitUnonExpr!@flag
Info: visitExpr@flag
Info: visitLvalExpr@flag
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @loc = @n*@a-1+@b
Info: visitExpr@n*@a-1+@b
Info: visitAssignmentExpr@n*@a-1+@b
Info: visitExpr@n*@a-1+@b
Info: visitBinopExpr@n*@a-1+@b
Info: visitExpr@n*@a-1
Info: visitBinopExpr@n*@a-1
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr@a-1
Info: visitBinopExpr@a-1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde030
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitStatementAssign@array[@loc] = @loc
Info: visitAssignStmtAssign@array[@loc] = @loc
Info: visitExpr@array[@loc]
Info: visitLvalExpr@array[@loc]
Info: lval->indices->children.size() 1
Info: visitDims @loc
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitAssignStmti32
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitStatementIfElse
Info: visitExpr@a==1
Info: visitBinopExpr@a==1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde240
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@array[0] = 0
Info: visitAssignStmtAssign@array[0] = 0
Info: visitExpr@array[0]
Info: visitLvalExpr@array[0]
Info: lval->indices->children.size() 1
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55fa32cde2c0
Info: visitAssignStmti32
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55fa32cde2f0
Info: visitStatementCall @mmerge(@loc, 0)
Info: visitExprStmtCall @mmerge(@loc, 0)
Info: visitExprCall @mmerge(@loc, 0)
Info: visiCalltExprCall @mmerge(@loc, 0)
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55fa32cde320
Info: visitStatementIfElse
Info: visitExpr@a==@n
Info: visitBinopExpr@a==@n
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@array[@k] = @k
Info: visitAssignStmtAssign@array[@k] = @k
Info: visitExpr@array[@k]
Info: visitLvalExpr@array[@k]
Info: lval->indices->children.size() 1
Info: visitDims @k
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitAssignStmti32
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitStatementCall @mmerge(@loc, @k)
Info: visitExprStmtCall @mmerge(@loc, @k)
Info: visitExprCall @mmerge(@loc, @k)
Info: visiCalltExprCall @mmerge(@loc, @k)
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitStatementIfElse
Info: visitExpr@b<@n&&@array[@loc+1]!=-1
Info: visitBinopExpr@b<@n&&@array[@loc+1]!=-1
Info: visitExpr@b<@n
Info: visitBinopExpr@b<@n
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr@array[@loc+1]!=-1
Info: visitBinopExpr@array[@loc+1]!=-1
Info: visitExpr@array[@loc+1]
Info: visitLvalExpr@array[@loc+1]
Info: lval->indices->children.size() 1
Info: visitDims @loc+1
Info: visitExpr@loc+1
Info: visitBinopExpr@loc+1
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde350
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde380
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @mmerge(@loc, @loc+1)
Info: visitExprStmtCall @mmerge(@loc, @loc+1)
Info: visitExprCall @mmerge(@loc, @loc+1)
Info: visiCalltExprCall @mmerge(@loc, @loc+1)
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr@loc+1
Info: visitBinopExpr@loc+1
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde3b0
Info: visitStatementIfElse
Info: visitExpr@b>1&&@array[@loc-1]!=-1
Info: visitBinopExpr@b>1&&@array[@loc-1]!=-1
Info: visitExpr@b>1
Info: visitBinopExpr@b>1
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde3e0
Info: visitExpr@array[@loc-1]!=-1
Info: visitBinopExpr@array[@loc-1]!=-1
Info: visitExpr@array[@loc-1]
Info: visitLvalExpr@array[@loc-1]
Info: lval->indices->children.size() 1
Info: visitDims @loc-1
Info: visitExpr@loc-1
Info: visitBinopExpr@loc-1
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde410
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde440
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @mmerge(@loc, @loc-1)
Info: visitExprStmtCall @mmerge(@loc, @loc-1)
Info: visitExprCall @mmerge(@loc, @loc-1)
Info: visiCalltExprCall @mmerge(@loc, @loc-1)
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr@loc-1
Info: visitBinopExpr@loc-1
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde470
Info: visitStatementIfElse
Info: visitExpr@a<@n&&@array[@loc+@n]!=-1
Info: visitBinopExpr@a<@n&&@array[@loc+@n]!=-1
Info: visitExpr@a<@n
Info: visitBinopExpr@a<@n
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr@array[@loc+@n]!=-1
Info: visitBinopExpr@array[@loc+@n]!=-1
Info: visitExpr@array[@loc+@n]
Info: visitLvalExpr@array[@loc+@n]
Info: lval->indices->children.size() 1
Info: visitDims @loc+@n
Info: visitExpr@loc+@n
Info: visitBinopExpr@loc+@n
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde4a0
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @mmerge(@loc, @loc+@n)
Info: visitExprStmtCall @mmerge(@loc, @loc+@n)
Info: visitExprCall @mmerge(@loc, @loc+@n)
Info: visiCalltExprCall @mmerge(@loc, @loc+@n)
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr@loc+@n
Info: visitBinopExpr@loc+@n
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitStatementIfElse
Info: visitExpr@a>1&&@array[@loc-@n]!=-1
Info: visitBinopExpr@a>1&&@array[@loc-@n]!=-1
Info: visitExpr@a>1
Info: visitBinopExpr@a>1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde4d0
Info: visitExpr@array[@loc-@n]!=-1
Info: visitBinopExpr@array[@loc-@n]!=-1
Info: visitExpr@array[@loc-@n]
Info: visitLvalExpr@array[@loc-@n]
Info: lval->indices->children.size() 1
Info: visitDims @loc-@n
Info: visitExpr@loc-@n
Info: visitBinopExpr@loc-@n
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde500
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @mmerge(@loc, @loc-@n)
Info: visitExprStmtCall @mmerge(@loc, @loc-@n)
Info: visitExprCall @mmerge(@loc, @loc-@n)
Info: visiCalltExprCall @mmerge(@loc, @loc-@n)
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr@loc-@n
Info: visitBinopExpr@loc-@n
Info: visitExpr@loc
Info: visitLvalExpr@loc
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitStatementIfElse
Info: visitExpr@array[0]!=-1&&@array[@k]!=-1&&Call @findfa(0)==Call @findfa(@k)
Info: visitBinopExpr@array[0]!=-1&&@array[@k]!=-1&&Call @findfa(0)==Call @findfa(@k)
Info: visitExpr@array[0]!=-1&&@array[@k]!=-1
Info: visitBinopExpr@array[0]!=-1&&@array[@k]!=-1
Info: visitExpr@array[0]!=-1
Info: visitBinopExpr@array[0]!=-1
Info: visitExpr@array[0]
Info: visitLvalExpr@array[0]
Info: lval->indices->children.size() 1
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55fa32cde530
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde560
Info: visitExpr@array[@k]!=-1
Info: visitBinopExpr@array[@k]!=-1
Info: visitExpr@array[@k]
Info: visitLvalExpr@array[@k]
Info: lval->indices->children.size() 1
Info: visitDims @k
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde620
Info: visitExprCall @findfa(0)==Call @findfa(@k)
Info: visitBinopExprCall @findfa(0)==Call @findfa(@k)
Info: visitExprCall @findfa(0)
Info: visiCalltExprCall @findfa(0)
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55fa32cde650
Info: visitExprCall @findfa(@k)
Info: visiCalltExprCall @findfa(@k)
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@flag = 1
Info: visitAssignStmtAssign@flag = 1
Info: visitExpr@flag
Info: visitLvalExpr@flag
Info: visitAssignStmti32
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde680
Info: visitVarDef i32 @tmp = @i+1
Info: visitExpr@i+1
Info: visitAssignmentExpr@i+1
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde6b0
Info: visitStatementCall @putint(@tmp)
Info: visitExprStmtCall @putint(@tmp)
Info: visitExprCall @putint(@tmp)
Info: visiCalltExprCall @putint(@tmp)
Info: use of undeclared function putint
Info: visitExpr@tmp
Info: visitLvalExpr@tmp
Info: visitStatementCall @putch(10)
Info: visitExprStmtCall @putch(10)
Info: visitExprCall @putch(10)
Info: visiCalltExprCall @putch(10)
Info: use of undeclared function putch
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55fa32cde740
Info: visitStatementAssign@i = @i+1
Info: visitAssignStmtAssign@i = @i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmti32
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde7c0
Info: visitStatementIfElse
Info: visitExpr!@flag
Info: visitUnonExpr!@flag
Info: visitExpr@flag
Info: visitLvalExpr@flag
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @putint(-1)
Info: visitExprStmtCall @putint(-1)
Info: visitExprCall @putint(-1)
Info: visiCalltExprCall @putint(-1)
Info: use of undeclared function putint
Info: visitExpr-1
Info: visitUnonExpr-1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55fa32cde7f0
Info: visitStatementCall @putch(10)
Info: visitExprStmtCall @putch(10)
Info: visitExprCall @putch(10)
Info: visiCalltExprCall @putch(10)
Info: use of undeclared function putch
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55fa32cde820
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55fa32cde850
Info: visitReturnStmtReturn 0function has returnscope id10
ast: 
Program
  i32 @array#0[110]
  i32 @n#0
  void @init(i32 @n#1)
    {
      i32 @i#2 = 1
      While        @i#2<=@n#1*@n#1+1
        {
          Assign@array#0[@i#2] = -1
          Assign@i#2 = @i#2+1
        }
      Return 0
    }
  i32 @findfa(i32 @a#5)
    {
      If        @array#0[@a#5]==@a#5
        Return @a#5
      Else
        {
          Assign@array#0[@a#5] = Call @findfa(@array#0[@a#5])
          Return @array#0[@a#5]
        }
    }
  void @mmerge(i32 @a#8, i32 @b#8)
    {
      i32 @m#9 = Call @findfa(@a#8)
      i32 @n#9 = Call @findfa(@b#8)
      If        @m#9!=@n#9
        Assign@array#0[@m#9] = @n#9
      Return 0
    }
  i32 @main()
    {
      i32 @t#11
      i32 @m#11
      i32 @a#11
      i32 @b#11
      Assign@t#11 = 1
      While        @t#11        {
          Assign@t#11 = @t#11-1
          Assign@n#0 = 4
          Assign@m#11 = 10
          i32 @i#13 = 0
          i32 @flag#13 = 0
          Call @init            @n#0
          i32 @k#13 = @n#0*@n#0+1
          While            @i#13<@m#11
            {
              Assign@a#11 = Call @getint()
              Assign@b#11 = Call @getint()
              If                !@flag#13
                {
                  i32 @loc#16 = @n#0*@a#11-1+@b#11
                  Assign@array#0[@loc#16] = @loc#16
                  If                    @a#11==1
                    {
                      Assign@array#0[0] = 0
                      Call @mmerge                        @loc#16, 0
                    }
                  If                    @a#11==@n#0
                    {
                      Assign@array#0[@k#13] = @k#13
                      Call @mmerge                        @loc#16, @k#13
                    }
                  If                    @b#11<@n#0&&@array#0[@loc#16+1]!=-1
                    {
                      Call @mmerge                        @loc#16, @loc#16+1
                    }
                  If                    @b#11>1&&@array#0[@loc#16-1]!=-1
                    {
                      Call @mmerge                        @loc#16, @loc#16-1
                    }
                  If                    @a#11<@n#0&&@array#0[@loc#16+@n#0]!=-1
                    {
                      Call @mmerge                        @loc#16, @loc#16+@n#0
                    }
                  If                    @a#11>1&&@array#0[@loc#16-@n#0]!=-1
                    {
                      Call @mmerge                        @loc#16, @loc#16-@n#0
                    }
                  If                    @array#0[0]!=-1&&@array#0[@k#13]!=-1&&Call @findfa(0)==Call @findfa(@k#13)
                    {
                      Assign@flag#13 = 1
                      i32 @tmp#23 = @i#13+1
                      Call @putint                        @tmp#23
                      Call @putch                        10
                    }
                }
              Assign@i#13 = @i#13+1
            }
          If            !@flag#13
            {
              Call @putint                -1
              Call @putch                10
            }
        }
      Return 0
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visit decl global array
visitExpressionVal
global array size: 110
visit decl global array done
visit decl global var
visit decl global var done
visitFunction init
visitFunction param decl: n#1
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#2
visitExpression
visitExpression
visitExpression
visitExpressionLValue n#1
visitExpression
visitExpressionLValue n#1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionLValue i#2
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function init has 24 regs
B0:
  prev: 
  succ: B1 
B1:
  prev: B0 B2 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B1 
B3:
  prev: B1 
  succ: 
B4:
  prev: 
  succ: 

B0:
  prev: 
  succ: B1 
B1:
  prev: B0 B2 
  succ: B2 B3 
B2:
  prev: B1 
  succ: B1 
B3:
  prev: B1 
  succ: 

entryB0
B1
B2
B3
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB2
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB2
compute_dom_fro bb: B1 func: init
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 
  domed_by: B0 B1 
B2:
  doms: 
  domed_by: B0 B1 B2 
B3:
  doms: 
  domed_by: B0 B1 B3 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: B1 
B3:
  DF: 

visitFunction findfa
visitFunction param decl: a#5
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpressionLValue a#5
visitExpression
visitExpressionLValue a#5
visitStatement
visitExpression
visitExpressionLValue a#5
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpressionLValue a#5
visitIndex
visitExpression
visitExpressionLValue a#5
visitStatement
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpressionLValue a#5
function findfa has 30 regs
B5:
  prev: 
  succ: B6 
B6:
  prev: B5 
  succ: B7 B8 
B7:
  prev: B6 
  succ: 
B8:
  prev: B6 
  succ: 
B9:
  prev: B10 B11 
  succ: 
B10:
  prev: 
  succ: B9 
B11:
  prev: 
  succ: B9 

B5:
  prev: 
  succ: B6 
B6:
  prev: B5 
  succ: B7 B8 
B7:
  prev: B6 
  succ: 
B8:
  prev: B6 
  succ: 

entryB5
B6
B7
B8
reverse_postorderB5
reverse_postorderB6
reverse_postorderB8
reverse_postorderB7
reverse_postorderB5
reverse_postorderB6
reverse_postorderB8
reverse_postorderB7
B5:
  doms: B6 
  domed_by: B5 
B6:
  doms: B7 B8 
  domed_by: B5 B6 
B7:
  doms: 
  domed_by: B5 B6 B7 
B8:
  doms: 
  domed_by: B5 B6 B8 

B5:
  DF: 
B6:
  DF: 
B7:
  DF: 
B8:
  DF: 

visitFunction mmerge
visitFunction param decl: a#8
visitFunction param decl: b#8
visitBlock 
visitExpression
visitExpression
visitExpression
visitExpressionLValue a#8
visitExpression
visitExpression
visitExpression
visitExpressionLValue b#8
visitStatement
visitExpression
visitExpression
visitExpressionLValue m#9
visitExpression
visitExpressionLValue n#9
visitStatement
visitExpression
visitExpressionLValue n#9
visitIndex
visitExpression
visitExpressionLValue m#9
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function mmerge has 21 regs
B12:
  prev: 
  succ: B13 
B13:
  prev: B12 
  succ: B14 B15 
B14:
  prev: B13 
  succ: B15 
B15:
  prev: B13 B14 
  succ: 
B16:
  prev: 
  succ: 

B12:
  prev: 
  succ: B13 
B13:
  prev: B12 
  succ: B14 B15 
B14:
  prev: B13 
  succ: B15 
B15:
  prev: B13 B14 
  succ: 

entryB12
B13
B14
B15
reverse_postorderB12
reverse_postorderB13
reverse_postorderB14
reverse_postorderB15
reverse_postorderB12
reverse_postorderB13
reverse_postorderB14
reverse_postorderB15
compute_dom_fro bb: B15 func: mmerge
B12:
  doms: B13 
  domed_by: B12 
B13:
  doms: B14 B15 
  domed_by: B12 B13 
B14:
  doms: 
  domed_by: B12 B13 B14 
B15:
  doms: 
  domed_by: B12 B13 B15 

B12:
  DF: 
B13:
  DF: 
B14:
  DF: B15 
B15:
  DF: 

visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionLValue t#11
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue t#11
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpression
visitExpression
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#13
visitExpression
visitExpressionLValue m#11
visitStatement
visitBlock 
visitStatement
visitExpression
visitStatement
visitExpression
visitStatement
visitExpression
visitExpression
visitExpressionLValue flag#13
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpression
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpression
visitExpressionLValue a#11
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionLValue b#11
visitStatement
visitExpression
visitExpressionLValue loc#16
visitIndex
visitExpression
visitExpressionLValue loc#16
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#11
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#11
visitExpression
visitExpressionLValue n#0
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionLValue k#13
visitIndex
visitExpression
visitExpressionLValue k#13
visitStatement
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionLValue k#13
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue b#11
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue b#11
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue a#11
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionLValue n#0
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue a#11
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionLValue n#0
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpression
visitExpressionLValue loc#16
visitExpression
visitExpressionLValue n#0
visitStatement
visitExpression
visitExpression
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue array#0
visitIndex
visitExpression
visitExpressionLValue k#13
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionLValue k#13
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpression
visitExpressionLValue i#13
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue tmp#23
visitStatement
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#13
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue flag#13
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 229 regs
B17:
  prev: 
  succ: B18 
B18:
  prev: B17 B68 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B21 
B20:
  prev: B18 
  succ: 
B21:
  prev: B19 B26 
  succ: B22 B23 
B22:
  prev: B21 
  succ: B24 
B23:
  prev: B21 
  succ: B66 
B24:
  prev: B22 
  succ: B25 B26 
B25:
  prev: B24 
  succ: B27 
B26:
  prev: B24 B65 
  succ: B21 
B27:
  prev: B25 
  succ: B28 B29 
B28:
  prev: B27 
  succ: B29 
B29:
  prev: B27 B28 
  succ: B30 
B30:
  prev: B29 
  succ: B31 B32 
B31:
  prev: B30 
  succ: B32 
B32:
  prev: B30 B31 
  succ: B33 
B33:
  prev: B32 
  succ: B34 B35 
B34:
  prev: B33 
  succ: B36 
B35:
  prev: B33 
  succ: B36 
B36:
  prev: B34 B35 
  succ: B37 B38 
B37:
  prev: B36 
  succ: B38 
B38:
  prev: B36 B37 
  succ: B39 
B39:
  prev: B38 
  succ: B40 B41 
B40:
  prev: B39 
  succ: B42 
B41:
  prev: B39 
  succ: B42 
B42:
  prev: B40 B41 
  succ: B43 B44 
B43:
  prev: B42 
  succ: B44 
B44:
  prev: B42 B43 
  succ: B45 
B45:
  prev: B44 
  succ: B46 B47 
B46:
  prev: B45 
  succ: B48 
B47:
  prev: B45 
  succ: B48 
B48:
  prev: B46 B47 
  succ: B49 B50 
B49:
  prev: B48 
  succ: B50 
B50:
  prev: B48 B49 
  succ: B51 
B51:
  prev: B50 
  succ: B52 B53 
B52:
  prev: B51 
  succ: B54 
B53:
  prev: B51 
  succ: B54 
B54:
  prev: B52 B53 
  succ: B55 B56 
B55:
  prev: B54 
  succ: B56 
B56:
  prev: B54 B55 
  succ: B57 
B57:
  prev: B56 
  succ: B58 B59 
B58:
  prev: B57 
  succ: B60 
B59:
  prev: B57 
  succ: B60 
B60:
  prev: B58 B59 
  succ: B61 B62 
B61:
  prev: B60 
  succ: B63 
B62:
  prev: B60 
  succ: B63 
B63:
  prev: B61 B62 
  succ: B64 B65 
B64:
  prev: B63 
  succ: B65 
B65:
  prev: B63 B64 
  succ: B26 
B66:
  prev: B23 
  succ: B67 B68 
B67:
  prev: B66 
  succ: B68 
B68:
  prev: B66 B67 
  succ: B18 
B69:
  prev: 
  succ: 

B17:
  prev: 
  succ: B18 
B18:
  prev: B17 B68 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B21 
B20:
  prev: B18 
  succ: 
B21:
  prev: B19 B26 
  succ: B22 B23 
B22:
  prev: B21 
  succ: B24 
B23:
  prev: B21 
  succ: B66 
B24:
  prev: B22 
  succ: B25 B26 
B25:
  prev: B24 
  succ: B27 
B26:
  prev: B24 B65 
  succ: B21 
B27:
  prev: B25 
  succ: B28 B29 
B28:
  prev: B27 
  succ: B29 
B29:
  prev: B27 B28 
  succ: B30 
B30:
  prev: B29 
  succ: B31 B32 
B31:
  prev: B30 
  succ: B32 
B32:
  prev: B30 B31 
  succ: B33 
B33:
  prev: B32 
  succ: B34 B35 
B34:
  prev: B33 
  succ: B36 
B35:
  prev: B33 
  succ: B36 
B36:
  prev: B34 B35 
  succ: B37 B38 
B37:
  prev: B36 
  succ: B38 
B38:
  prev: B36 B37 
  succ: B39 
B39:
  prev: B38 
  succ: B40 B41 
B40:
  prev: B39 
  succ: B42 
B41:
  prev: B39 
  succ: B42 
B42:
  prev: B40 B41 
  succ: B43 B44 
B43:
  prev: B42 
  succ: B44 
B44:
  prev: B42 B43 
  succ: B45 
B45:
  prev: B44 
  succ: B46 B47 
B46:
  prev: B45 
  succ: B48 
B47:
  prev: B45 
  succ: B48 
B48:
  prev: B46 B47 
  succ: B49 B50 
B49:
  prev: B48 
  succ: B50 
B50:
  prev: B48 B49 
  succ: B51 
B51:
  prev: B50 
  succ: B52 B53 
B52:
  prev: B51 
  succ: B54 
B53:
  prev: B51 
  succ: B54 
B54:
  prev: B52 B53 
  succ: B55 B56 
B55:
  prev: B54 
  succ: B56 
B56:
  prev: B54 B55 
  succ: B57 
B57:
  prev: B56 
  succ: B58 B59 
B58:
  prev: B57 
  succ: B60 
B59:
  prev: B57 
  succ: B60 
B60:
  prev: B58 B59 
  succ: B61 B62 
B61:
  prev: B60 
  succ: B63 
B62:
  prev: B60 
  succ: B63 
B63:
  prev: B61 B62 
  succ: B64 B65 
B64:
  prev: B63 
  succ: B65 
B65:
  prev: B63 B64 
  succ: B26 
B66:
  prev: B23 
  succ: B67 B68 
B67:
  prev: B66 
  succ: B68 
B68:
  prev: B66 B67 
  succ: B18 

entryB17
B18
B19
B20
B21
B22
B23
B24
B25
B26
B27
B28
B29
B30
B31
B32
B33
B34
B35
B36
B37
B38
B39
B40
B41
B42
B43
B44
B45
B46
B47
B48
B49
B50
B51
B52
B53
B54
B55
B56
B57
B58
B59
B60
B61
B62
B63
B64
B65
B66
B67
B68
reverse_postorderB17
reverse_postorderB18
reverse_postorderB20
reverse_postorderB19
reverse_postorderB21
reverse_postorderB23
reverse_postorderB66
reverse_postorderB67
reverse_postorderB68
reverse_postorderB22
reverse_postorderB24
reverse_postorderB25
reverse_postorderB27
reverse_postorderB28
reverse_postorderB29
reverse_postorderB30
reverse_postorderB31
reverse_postorderB32
reverse_postorderB33
reverse_postorderB35
reverse_postorderB34
reverse_postorderB36
reverse_postorderB37
reverse_postorderB38
reverse_postorderB39
reverse_postorderB41
reverse_postorderB40
reverse_postorderB42
reverse_postorderB43
reverse_postorderB44
reverse_postorderB45
reverse_postorderB47
reverse_postorderB46
reverse_postorderB48
reverse_postorderB49
reverse_postorderB50
reverse_postorderB51
reverse_postorderB53
reverse_postorderB52
reverse_postorderB54
reverse_postorderB55
reverse_postorderB56
reverse_postorderB57
reverse_postorderB59
reverse_postorderB58
reverse_postorderB60
reverse_postorderB62
reverse_postorderB61
reverse_postorderB63
reverse_postorderB64
reverse_postorderB65
reverse_postorderB26
reverse_postorderB17
reverse_postorderB18
reverse_postorderB20
reverse_postorderB19
reverse_postorderB21
reverse_postorderB23
reverse_postorderB66
reverse_postorderB67
reverse_postorderB68
reverse_postorderB22
reverse_postorderB24
reverse_postorderB25
reverse_postorderB27
reverse_postorderB28
reverse_postorderB29
reverse_postorderB30
reverse_postorderB31
reverse_postorderB32
reverse_postorderB33
reverse_postorderB35
reverse_postorderB34
reverse_postorderB36
reverse_postorderB37
reverse_postorderB38
reverse_postorderB39
reverse_postorderB41
reverse_postorderB40
reverse_postorderB42
reverse_postorderB43
reverse_postorderB44
reverse_postorderB45
reverse_postorderB47
reverse_postorderB46
reverse_postorderB48
reverse_postorderB49
reverse_postorderB50
reverse_postorderB51
reverse_postorderB53
reverse_postorderB52
reverse_postorderB54
reverse_postorderB55
reverse_postorderB56
reverse_postorderB57
reverse_postorderB59
reverse_postorderB58
reverse_postorderB60
reverse_postorderB62
reverse_postorderB61
reverse_postorderB63
reverse_postorderB64
reverse_postorderB65
reverse_postorderB26
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B21 func: main
compute_dom_fro bb: B21 func: main
compute_dom_fro bb: B21 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B26 func: main
compute_dom_fro bb: B29 func: main
compute_dom_fro bb: B32 func: main
compute_dom_fro bb: B36 func: main
compute_dom_fro bb: B36 func: main
compute_dom_fro bb: B38 func: main
compute_dom_fro bb: B42 func: main
compute_dom_fro bb: B42 func: main
compute_dom_fro bb: B44 func: main
compute_dom_fro bb: B48 func: main
compute_dom_fro bb: B48 func: main
compute_dom_fro bb: B50 func: main
compute_dom_fro bb: B54 func: main
compute_dom_fro bb: B54 func: main
compute_dom_fro bb: B56 func: main
compute_dom_fro bb: B60 func: main
compute_dom_fro bb: B60 func: main
compute_dom_fro bb: B63 func: main
compute_dom_fro bb: B63 func: main
compute_dom_fro bb: B65 func: main
compute_dom_fro bb: B68 func: main
B17:
  doms: B18 
  domed_by: B17 
B18:
  doms: B19 B20 
  domed_by: B17 B18 
B19:
  doms: B21 
  domed_by: B17 B18 B19 
B20:
  doms: 
  domed_by: B17 B18 B20 
B21:
  doms: B22 B23 
  domed_by: B17 B18 B19 B21 
B22:
  doms: B24 
  domed_by: B17 B18 B19 B21 B22 
B23:
  doms: B66 
  domed_by: B17 B18 B19 B21 B23 
B24:
  doms: B25 B26 
  domed_by: B17 B18 B19 B21 B22 B24 
B25:
  doms: B27 
  domed_by: B17 B18 B19 B21 B22 B24 B25 
B26:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B26 
B27:
  doms: B28 B29 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 
B28:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B28 
B29:
  doms: B30 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 
B30:
  doms: B31 B32 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 
B31:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B31 
B32:
  doms: B33 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 
B33:
  doms: B34 B35 B36 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 
B34:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B34 
B35:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B35 
B36:
  doms: B37 B38 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 
B37:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B37 
B38:
  doms: B39 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 
B39:
  doms: B40 B41 B42 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 
B40:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B40 
B41:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B41 
B42:
  doms: B43 B44 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 
B43:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B43 
B44:
  doms: B45 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 
B45:
  doms: B46 B47 B48 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 
B46:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B46 
B47:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B47 
B48:
  doms: B49 B50 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 
B49:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B49 
B50:
  doms: B51 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 
B51:
  doms: B52 B53 B54 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 
B52:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B52 
B53:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B53 
B54:
  doms: B55 B56 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 
B55:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B55 
B56:
  doms: B57 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 
B57:
  doms: B58 B59 B60 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 B57 
B58:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 B57 B58 
B59:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 B57 B59 
B60:
  doms: B61 B62 B63 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 B57 B60 
B61:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 B57 B60 B61 
B62:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 B57 B60 B62 
B63:
  doms: B64 B65 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 B57 B60 B63 
B64:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 B57 B60 B63 B64 
B65:
  doms: 
  domed_by: B17 B18 B19 B21 B22 B24 B25 B27 B29 B30 B32 B33 B36 B38 B39 B42 B44 B45 B48 B50 B51 B54 B56 B57 B60 B63 B65 
B66:
  doms: B67 B68 
  domed_by: B17 B18 B19 B21 B23 B66 
B67:
  doms: 
  domed_by: B17 B18 B19 B21 B23 B66 B67 
B68:
  doms: 
  domed_by: B17 B18 B19 B21 B23 B66 B68 

B17:
  DF: 
B18:
  DF: 
B19:
  DF: B18 
B20:
  DF: 
B21:
  DF: B18 
B22:
  DF: B21 
B23:
  DF: B18 
B24:
  DF: B21 
B25:
  DF: B26 
B26:
  DF: B21 
B27:
  DF: B26 
B28:
  DF: B29 
B29:
  DF: B26 
B30:
  DF: B26 
B31:
  DF: B32 
B32:
  DF: B26 
B33:
  DF: B26 
B34:
  DF: B36 
B35:
  DF: B36 
B36:
  DF: B26 
B37:
  DF: B38 
B38:
  DF: B26 
B39:
  DF: B26 
B40:
  DF: B42 
B41:
  DF: B42 
B42:
  DF: B26 
B43:
  DF: B44 
B44:
  DF: B26 
B45:
  DF: B26 
B46:
  DF: B48 
B47:
  DF: B48 
B48:
  DF: B26 
B49:
  DF: B50 
B50:
  DF: B26 
B51:
  DF: B26 
B52:
  DF: B54 
B53:
  DF: B54 
B54:
  DF: B26 
B55:
  DF: B56 
B56:
  DF: B26 
B57:
  DF: B26 
B58:
  DF: B60 
B59:
  DF: B60 
B60:
  DF: B26 
B61:
  DF: B63 
B62:
  DF: B63 
B63:
  DF: B26 
B64:
  DF: B65 
B65:
  DF: B26 
B66:
  DF: B18 
B67:
  DF: B68 
B68:
  DF: B18 

ir_origin:
; module
@array = global i32, i32 440
@n = global i32, i32 4
define i32 @main(){
B17:
  %r1 = alloca i32, i32 4
  %r2 = alloca i32, i32 4
  %r3 = alloca i32, i32 4
  %r4 = alloca i32, i32 4
  %r5 = add i32 0, 1 ; loadint
  store i32 %r5, ptr %r1
  br label %B18

B18:
  %r6 = load i32, ptr %r1
  %tmpconbr6 = trunc i32 %r6 to i1
  br i1 %tmpconbr6, label %B19, label %B20

B19:
  %r7 = load i32, ptr %r1
  %r8 = add i32 0, 1 ; loadint
  %r9 = sub i32 %r7, %r8
  store i32 %r9, ptr %r1
  %r10 = add i32 0, 4 ; loadint
  %r11 = loadaddr @n#0
  store i32 %r10, ptr %r11
  %r12 = add i32 0, 10 ; loadint
  store i32 %r12, ptr %r2
  %r13 = alloca i32, i32 4
  %r14 = add i32 0, 0 ; loadint
  store i32 %r14, ptr %r13
  %r15 = alloca i32, i32 4
  %r16 = add i32 0, 0 ; loadint
  store i32 %r16, ptr %r15
  %r18 = loadaddr @n#0
  %r19 = load i32, ptr %r18
  %r17 = call i32 @init(i32 %r19)
  %r20 = alloca i32, i32 4
  %r21 = loadaddr @n#0
  %r22 = load i32, ptr %r21
  %r23 = loadaddr @n#0
  %r24 = load i32, ptr %r23
  %r25 = mul i32 %r22, %r24
  %r26 = add i32 0, 1 ; loadint
  %r27 = add i32 %r25, %r26
  store i32 %r27, ptr %r20
  br label %B21

B20:
  %r229 = add i32 0, 0 ; loadint
  ret i32 %r229

B21:
  %r28 = load i32, ptr %r13
  %r29 = load i32, ptr %r2
  %tmpcmp30 = icmp slt i32 %r28, %r29
  %r30 = zext i1 %tmpcmp30 to i32
  %tmpconbr30 = trunc i32 %r30 to i1
  br i1 %tmpconbr30, label %B22, label %B23

B22:
  %r31 = call i32 @getint()
  store i32 %r31, ptr %r3
  %r32 = call i32 @getint()
  store i32 %r32, ptr %r4
  br label %B24

B23:
  br label %B66

B24:
  %r33 = load i32, ptr %r15
  %r35 = add i32 0, 0 ; loadint
  %tmpcmp34 = icmp eq i32 %r35, %r33
  %r34 = zext i1 %tmpcmp34 to i32
  %tmpconbr34 = trunc i32 %r34 to i1
  br i1 %tmpconbr34, label %B25, label %B26

B25:
  %r36 = alloca i32, i32 4
  %r37 = loadaddr @n#0
  %r38 = load i32, ptr %r37
  %r39 = load i32, ptr %r3
  %r40 = add i32 0, 1 ; loadint
  %r41 = sub i32 %r39, %r40
  %r42 = mul i32 %r38, %r41
  %r43 = load i32, ptr %r4
  %r44 = add i32 %r42, %r43
  store i32 %r44, ptr %r36
  %r45 = load i32, ptr %r36
  %r46 = loadaddr @array#0
  %r47 = loadaddr @array#0
  %r48 = add i32 0, 4 ; loadint
  %r49 = load i32, ptr %r36
  %r50 = mul i32 %r49, %r48
  %r51 = add i32 %r47, %r50
  store i32 %r45, ptr %r51
  br label %B27

B26:
  %r217 = load i32, ptr %r13
  %r218 = add i32 0, 1 ; loadint
  %r219 = add i32 %r217, %r218
  store i32 %r219, ptr %r13
  br label %B21

B27:
  %r52 = load i32, ptr %r3
  %r53 = add i32 0, 1 ; loadint
  %tmpcmp54 = icmp eq i32 %r52, %r53
  %r54 = zext i1 %tmpcmp54 to i32
  %tmpconbr54 = trunc i32 %r54 to i1
  br i1 %tmpconbr54, label %B28, label %B29

B28:
  %r55 = add i32 0, 0 ; loadint
  %r56 = loadaddr @array#0
  %r57 = loadaddr @array#0
  %r58 = add i32 0, 4 ; loadint
  %r59 = add i32 0, 0 ; loadint
  %r60 = mul i32 %r59, %r58
  %r61 = add i32 %r57, %r60
  store i32 %r55, ptr %r61
  %r63 = load i32, ptr %r36
  %r64 = add i32 0, 0 ; loadint
  %r62 = call i32 @mmerge(i32 %r63, i32 %r64)
  br label %B29

B29:
  br label %B30

B30:
  %r65 = load i32, ptr %r3
  %r66 = loadaddr @n#0
  %r67 = load i32, ptr %r66
  %tmpcmp68 = icmp eq i32 %r65, %r67
  %r68 = zext i1 %tmpcmp68 to i32
  %tmpconbr68 = trunc i32 %r68 to i1
  br i1 %tmpconbr68, label %B31, label %B32

B31:
  %r69 = load i32, ptr %r20
  %r70 = loadaddr @array#0
  %r71 = loadaddr @array#0
  %r72 = add i32 0, 4 ; loadint
  %r73 = load i32, ptr %r20
  %r74 = mul i32 %r73, %r72
  %r75 = add i32 %r71, %r74
  store i32 %r69, ptr %r75
  %r77 = load i32, ptr %r36
  %r78 = load i32, ptr %r20
  %r76 = call i32 @mmerge(i32 %r77, i32 %r78)
  br label %B32

B32:
  br label %B33

B33:
  %r79 = alloca i32, i32 4
  %r80 = load i32, ptr %r4
  %r81 = loadaddr @n#0
  %r82 = load i32, ptr %r81
  %tmpcmp83 = icmp slt i32 %r80, %r82
  %r83 = zext i1 %tmpcmp83 to i32
  %tmpconbr83 = trunc i32 %r83 to i1
  br i1 %tmpconbr83, label %B34, label %B35

B34:
  %r84 = loadaddr @array#0
  %r85 = add i32 0, 4 ; loadint
  %r86 = load i32, ptr %r36
  %r87 = add i32 0, 1 ; loadint
  %r88 = add i32 %r86, %r87
  %r89 = mul i32 %r88, %r85
  %r90 = add i32 %r84, %r89
  %r91 = load i32, ptr %r90
  %r92 = add i32 0, 1 ; loadint
  %r94 = add i32 0, 0 ; loadint
  %r93 = sub i32 %r94, %r92
  %tmpcmp95 = icmp ne i32 %r91, %r93
  %r95 = zext i1 %tmpcmp95 to i32
  store i32 %r95, ptr %r79
  br label %B36

B35:
  %r96 = add i32 0, 0 ; loadint
  store i32 %r96, ptr %r79
  br label %B36

B36:
  %r97 = load i32, ptr %r79
  %tmpconbr97 = trunc i32 %r97 to i1
  br i1 %tmpconbr97, label %B37, label %B38

B37:
  %r99 = load i32, ptr %r36
  %r100 = load i32, ptr %r36
  %r101 = add i32 0, 1 ; loadint
  %r102 = add i32 %r100, %r101
  %r98 = call i32 @mmerge(i32 %r99, i32 %r102)
  br label %B38

B38:
  br label %B39

B39:
  %r103 = alloca i32, i32 4
  %r104 = load i32, ptr %r4
  %r105 = add i32 0, 1 ; loadint
  %tmpcmp106 = icmp sgt i32 %r104, %r105
  %r106 = zext i1 %tmpcmp106 to i32
  %tmpconbr106 = trunc i32 %r106 to i1
  br i1 %tmpconbr106, label %B40, label %B41

B40:
  %r107 = loadaddr @array#0
  %r108 = add i32 0, 4 ; loadint
  %r109 = load i32, ptr %r36
  %r110 = add i32 0, 1 ; loadint
  %r111 = sub i32 %r109, %r110
  %r112 = mul i32 %r111, %r108
  %r113 = add i32 %r107, %r112
  %r114 = load i32, ptr %r113
  %r115 = add i32 0, 1 ; loadint
  %r117 = add i32 0, 0 ; loadint
  %r116 = sub i32 %r117, %r115
  %tmpcmp118 = icmp ne i32 %r114, %r116
  %r118 = zext i1 %tmpcmp118 to i32
  store i32 %r118, ptr %r103
  br label %B42

B41:
  %r119 = add i32 0, 0 ; loadint
  store i32 %r119, ptr %r103
  br label %B42

B42:
  %r120 = load i32, ptr %r103
  %tmpconbr120 = trunc i32 %r120 to i1
  br i1 %tmpconbr120, label %B43, label %B44

B43:
  %r122 = load i32, ptr %r36
  %r123 = load i32, ptr %r36
  %r124 = add i32 0, 1 ; loadint
  %r125 = sub i32 %r123, %r124
  %r121 = call i32 @mmerge(i32 %r122, i32 %r125)
  br label %B44

B44:
  br label %B45

B45:
  %r126 = alloca i32, i32 4
  %r127 = load i32, ptr %r3
  %r128 = loadaddr @n#0
  %r129 = load i32, ptr %r128
  %tmpcmp130 = icmp slt i32 %r127, %r129
  %r130 = zext i1 %tmpcmp130 to i32
  %tmpconbr130 = trunc i32 %r130 to i1
  br i1 %tmpconbr130, label %B46, label %B47

B46:
  %r131 = loadaddr @array#0
  %r132 = add i32 0, 4 ; loadint
  %r133 = load i32, ptr %r36
  %r134 = loadaddr @n#0
  %r135 = load i32, ptr %r134
  %r136 = add i32 %r133, %r135
  %r137 = mul i32 %r136, %r132
  %r138 = add i32 %r131, %r137
  %r139 = load i32, ptr %r138
  %r140 = add i32 0, 1 ; loadint
  %r142 = add i32 0, 0 ; loadint
  %r141 = sub i32 %r142, %r140
  %tmpcmp143 = icmp ne i32 %r139, %r141
  %r143 = zext i1 %tmpcmp143 to i32
  store i32 %r143, ptr %r126
  br label %B48

B47:
  %r144 = add i32 0, 0 ; loadint
  store i32 %r144, ptr %r126
  br label %B48

B48:
  %r145 = load i32, ptr %r126
  %tmpconbr145 = trunc i32 %r145 to i1
  br i1 %tmpconbr145, label %B49, label %B50

B49:
  %r147 = load i32, ptr %r36
  %r148 = load i32, ptr %r36
  %r149 = loadaddr @n#0
  %r150 = load i32, ptr %r149
  %r151 = add i32 %r148, %r150
  %r146 = call i32 @mmerge(i32 %r147, i32 %r151)
  br label %B50

B50:
  br label %B51

B51:
  %r152 = alloca i32, i32 4
  %r153 = load i32, ptr %r3
  %r154 = add i32 0, 1 ; loadint
  %tmpcmp155 = icmp sgt i32 %r153, %r154
  %r155 = zext i1 %tmpcmp155 to i32
  %tmpconbr155 = trunc i32 %r155 to i1
  br i1 %tmpconbr155, label %B52, label %B53

B52:
  %r156 = loadaddr @array#0
  %r157 = add i32 0, 4 ; loadint
  %r158 = load i32, ptr %r36
  %r159 = loadaddr @n#0
  %r160 = load i32, ptr %r159
  %r161 = sub i32 %r158, %r160
  %r162 = mul i32 %r161, %r157
  %r163 = add i32 %r156, %r162
  %r164 = load i32, ptr %r163
  %r165 = add i32 0, 1 ; loadint
  %r167 = add i32 0, 0 ; loadint
  %r166 = sub i32 %r167, %r165
  %tmpcmp168 = icmp ne i32 %r164, %r166
  %r168 = zext i1 %tmpcmp168 to i32
  store i32 %r168, ptr %r152
  br label %B54

B53:
  %r169 = add i32 0, 0 ; loadint
  store i32 %r169, ptr %r152
  br label %B54

B54:
  %r170 = load i32, ptr %r152
  %tmpconbr170 = trunc i32 %r170 to i1
  br i1 %tmpconbr170, label %B55, label %B56

B55:
  %r172 = load i32, ptr %r36
  %r173 = load i32, ptr %r36
  %r174 = loadaddr @n#0
  %r175 = load i32, ptr %r174
  %r176 = sub i32 %r173, %r175
  %r171 = call i32 @mmerge(i32 %r172, i32 %r176)
  br label %B56

B56:
  br label %B57

B57:
  %r177 = alloca i32, i32 4
  %r178 = alloca i32, i32 4
  %r179 = loadaddr @array#0
  %r180 = add i32 0, 4 ; loadint
  %r181 = add i32 0, 0 ; loadint
  %r182 = mul i32 %r181, %r180
  %r183 = add i32 %r179, %r182
  %r184 = load i32, ptr %r183
  %r185 = add i32 0, 1 ; loadint
  %r187 = add i32 0, 0 ; loadint
  %r186 = sub i32 %r187, %r185
  %tmpcmp188 = icmp ne i32 %r184, %r186
  %r188 = zext i1 %tmpcmp188 to i32
  %tmpconbr188 = trunc i32 %r188 to i1
  br i1 %tmpconbr188, label %B58, label %B59

B58:
  %r189 = loadaddr @array#0
  %r190 = add i32 0, 4 ; loadint
  %r191 = load i32, ptr %r20
  %r192 = mul i32 %r191, %r190
  %r193 = add i32 %r189, %r192
  %r194 = load i32, ptr %r193
  %r195 = add i32 0, 1 ; loadint
  %r197 = add i32 0, 0 ; loadint
  %r196 = sub i32 %r197, %r195
  %tmpcmp198 = icmp ne i32 %r194, %r196
  %r198 = zext i1 %tmpcmp198 to i32
  store i32 %r198, ptr %r178
  br label %B60

B59:
  %r199 = add i32 0, 0 ; loadint
  store i32 %r199, ptr %r178
  br label %B60

B60:
  %r200 = load i32, ptr %r178
  %tmpconbr200 = trunc i32 %r200 to i1
  br i1 %tmpconbr200, label %B61, label %B62

B61:
  %r202 = add i32 0, 0 ; loadint
  %r201 = call i32 @findfa(i32 %r202)
  %r204 = load i32, ptr %r20
  %r203 = call i32 @findfa(i32 %r204)
  %tmpcmp205 = icmp eq i32 %r201, %r203
  %r205 = zext i1 %tmpcmp205 to i32
  store i32 %r205, ptr %r177
  br label %B63

B62:
  %r206 = add i32 0, 0 ; loadint
  store i32 %r206, ptr %r177
  br label %B63

B63:
  %r207 = load i32, ptr %r177
  %tmpconbr207 = trunc i32 %r207 to i1
  br i1 %tmpconbr207, label %B64, label %B65

B64:
  %r208 = add i32 0, 1 ; loadint
  store i32 %r208, ptr %r15
  %r209 = alloca i32, i32 4
  %r210 = load i32, ptr %r13
  %r211 = add i32 0, 1 ; loadint
  %r212 = add i32 %r210, %r211
  store i32 %r212, ptr %r209
  %r214 = load i32, ptr %r209
  %r213 = call i32 @putint(i32 %r214)
  %r216 = add i32 0, 10 ; loadint
  %r215 = call i32 @putch(i32 %r216)
  br label %B65

B65:
  br label %B26

B66:
  %r220 = load i32, ptr %r15
  %r222 = add i32 0, 0 ; loadint
  %tmpcmp221 = icmp eq i32 %r222, %r220
  %r221 = zext i1 %tmpcmp221 to i32
  %tmpconbr221 = trunc i32 %r221 to i1
  br i1 %tmpconbr221, label %B67, label %B68

B67:
  %r224 = add i32 0, 1 ; loadint
  %r226 = add i32 0, 0 ; loadint
  %r225 = sub i32 %r226, %r224
  %r223 = call i32 @putint(i32 %r225)
  %r228 = add i32 0, 10 ; loadint
  %r227 = call i32 @putch(i32 %r228)
  br label %B68

B68:
  br label %B18

}
define i32 @mmerge(i32 %r1, i32 %r2){
B12:
  %r3 = alloca i32, i32 4
  store i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store i32 %r2, ptr %r4
  %r5 = alloca i32, i32 4
  %r7 = load i32, ptr %r3
  %r6 = call i32 @findfa(i32 %r7)
  store i32 %r6, ptr %r5
  %r8 = alloca i32, i32 4
  %r10 = load i32, ptr %r4
  %r9 = call i32 @findfa(i32 %r10)
  store i32 %r9, ptr %r8
  br label %B13

B13:
  %r11 = load i32, ptr %r5
  %r12 = load i32, ptr %r8
  %tmpcmp13 = icmp ne i32 %r11, %r12
  %r13 = zext i1 %tmpcmp13 to i32
  %tmpconbr13 = trunc i32 %r13 to i1
  br i1 %tmpconbr13, label %B14, label %B15

B14:
  %r14 = load i32, ptr %r8
  %r15 = loadaddr @array#0
  %r16 = loadaddr @array#0
  %r17 = add i32 0, 4 ; loadint
  %r18 = load i32, ptr %r5
  %r19 = mul i32 %r18, %r17
  %r20 = add i32 %r16, %r19
  store i32 %r14, ptr %r20
  br label %B15

B15:
  %r21 = add i32 0, 0 ; loadint
  ret i32 %r21

}
define i32 @findfa(i32 %r1){
B5:
  %r2 = alloca i32, i32 4
  store i32 %r1, ptr %r2
  br label %B6

B6:
  %r3 = loadaddr @array#0
  %r4 = add i32 0, 4 ; loadint
  %r5 = load i32, ptr %r2
  %r6 = mul i32 %r5, %r4
  %r7 = add i32 %r3, %r6
  %r8 = load i32, ptr %r7
  %r9 = load i32, ptr %r2
  %tmpcmp10 = icmp eq i32 %r8, %r9
  %r10 = zext i1 %tmpcmp10 to i32
  %tmpconbr10 = trunc i32 %r10 to i1
  br i1 %tmpconbr10, label %B7, label %B8

B7:
  %r11 = load i32, ptr %r2
  ret i32 %r11

B8:
  %r13 = loadaddr @array#0
  %r14 = add i32 0, 4 ; loadint
  %r15 = load i32, ptr %r2
  %r16 = mul i32 %r15, %r14
  %r17 = add i32 %r13, %r16
  %r18 = load i32, ptr %r17
  %r12 = call i32 @findfa(i32 %r18)
  %r19 = loadaddr @array#0
  %r20 = loadaddr @array#0
  %r21 = add i32 0, 4 ; loadint
  %r22 = load i32, ptr %r2
  %r23 = mul i32 %r22, %r21
  %r24 = add i32 %r20, %r23
  store i32 %r12, ptr %r24
  %r25 = loadaddr @array#0
  %r26 = add i32 0, 4 ; loadint
  %r27 = load i32, ptr %r2
  %r28 = mul i32 %r27, %r26
  %r29 = add i32 %r25, %r28
  %r30 = load i32, ptr %r29
  ret i32 %r30

}
define i32 @init(i32 %r1){
B0:
  %r2 = alloca i32, i32 4
  store i32 %r1, ptr %r2
  %r3 = alloca i32, i32 4
  %r4 = add i32 0, 1 ; loadint
  store i32 %r4, ptr %r3
  br label %B1

B1:
  %r5 = load i32, ptr %r3
  %r6 = load i32, ptr %r2
  %r7 = load i32, ptr %r2
  %r8 = mul i32 %r6, %r7
  %r9 = add i32 0, 1 ; loadint
  %r10 = add i32 %r8, %r9
  %tmpcmp11 = icmp sle i32 %r5, %r10
  %r11 = zext i1 %tmpcmp11 to i32
  %tmpconbr11 = trunc i32 %r11 to i1
  br i1 %tmpconbr11, label %B2, label %B3

B2:
  %r12 = add i32 0, 1 ; loadint
  %r14 = add i32 0, 0 ; loadint
  %r13 = sub i32 %r14, %r12
  %r15 = loadaddr @array#0
  %r16 = loadaddr @array#0
  %r17 = add i32 0, 4 ; loadint
  %r18 = load i32, ptr %r3
  %r19 = mul i32 %r18, %r17
  %r20 = add i32 %r16, %r19
  store i32 %r13, ptr %r20
  %r21 = load i32, ptr %r3
  %r22 = add i32 0, 1 ; loadint
  %r23 = add i32 %r21, %r22
  store i32 %r23, ptr %r3
  br label %B1

B3:
  %r24 = add i32 0, 0 ; loadint
  ret i32 %r24

}
---------------------------------ir -------------------------------------
; module
@array = global i32, i32 440
@n = global i32, i32 4
define i32 @main(){
B17:
  %r1 = alloca i32, i32 4
  %r2 = alloca i32, i32 4
  %r3 = alloca i32, i32 4
  %r4 = alloca i32, i32 4
  %r5 = add i32 0, 1 ; loadint
  store i32 %r5, ptr %r1
  br label %B18

B18:
  %r6 = load i32, ptr %r1
  %tmpconbr6 = trunc i32 %r6 to i1
  br i1 %tmpconbr6, label %B19, label %B20

B19:
  %r7 = load i32, ptr %r1
  %r8 = add i32 0, 1 ; loadint
  %r9 = sub i32 %r7, %r8
  store i32 %r9, ptr %r1
  %r10 = add i32 0, 4 ; loadint
  %r11 = loadaddr @n#0
  store i32 %r10, ptr %r11
  %r12 = add i32 0, 10 ; loadint
  store i32 %r12, ptr %r2
  %r13 = alloca i32, i32 4
  %r14 = add i32 0, 0 ; loadint
  store i32 %r14, ptr %r13
  %r15 = alloca i32, i32 4
  %r16 = add i32 0, 0 ; loadint
  store i32 %r16, ptr %r15
  %r18 = loadaddr @n#0
  %r19 = load i32, ptr %r18
  %r17 = call i32 @init(i32 %r19)
  %r20 = alloca i32, i32 4
  %r21 = loadaddr @n#0
  %r22 = load i32, ptr %r21
  %r23 = loadaddr @n#0
  %r24 = load i32, ptr %r23
  %r25 = mul i32 %r22, %r24
  %r26 = add i32 0, 1 ; loadint
  %r27 = add i32 %r25, %r26
  store i32 %r27, ptr %r20
  br label %B21

B20:
  %r229 = add i32 0, 0 ; loadint
  ret i32 %r229

B21:
  %r28 = load i32, ptr %r13
  %r29 = load i32, ptr %r2
  %tmpcmp30 = icmp slt i32 %r28, %r29
  %r30 = zext i1 %tmpcmp30 to i32
  %tmpconbr30 = trunc i32 %r30 to i1
  br i1 %tmpconbr30, label %B22, label %B23

B22:
  %r31 = call i32 @getint()
  store i32 %r31, ptr %r3
  %r32 = call i32 @getint()
  store i32 %r32, ptr %r4
  br label %B24

B23:
  br label %B66

B24:
  %r33 = load i32, ptr %r15
  %r35 = add i32 0, 0 ; loadint
  %tmpcmp34 = icmp eq i32 %r35, %r33
  %r34 = zext i1 %tmpcmp34 to i32
  %tmpconbr34 = trunc i32 %r34 to i1
  br i1 %tmpconbr34, label %B25, label %B26

B25:
  %r36 = alloca i32, i32 4
  %r37 = loadaddr @n#0
  %r38 = load i32, ptr %r37
  %r39 = load i32, ptr %r3
  %r40 = add i32 0, 1 ; loadint
  %r41 = sub i32 %r39, %r40
  %r42 = mul i32 %r38, %r41
  %r43 = load i32, ptr %r4
  %r44 = add i32 %r42, %r43
  store i32 %r44, ptr %r36
  %r45 = load i32, ptr %r36
  %r46 = loadaddr @array#0
  %r47 = loadaddr @array#0
  %r48 = add i32 0, 4 ; loadint
  %r49 = load i32, ptr %r36
  %r50 = mul i32 %r49, %r48
  %r51 = add i32 %r47, %r50
  store i32 %r45, ptr %r51
  br label %B27

B26:
  %r217 = load i32, ptr %r13
  %r218 = add i32 0, 1 ; loadint
  %r219 = add i32 %r217, %r218
  store i32 %r219, ptr %r13
  br label %B21

B27:
  %r52 = load i32, ptr %r3
  %r53 = add i32 0, 1 ; loadint
  %tmpcmp54 = icmp eq i32 %r52, %r53
  %r54 = zext i1 %tmpcmp54 to i32
  %tmpconbr54 = trunc i32 %r54 to i1
  br i1 %tmpconbr54, label %B28, label %B29

B28:
  %r55 = add i32 0, 0 ; loadint
  %r56 = loadaddr @array#0
  %r57 = loadaddr @array#0
  %r58 = add i32 0, 4 ; loadint
  %r59 = add i32 0, 0 ; loadint
  %r60 = mul i32 %r59, %r58
  %r61 = add i32 %r57, %r60
  store i32 %r55, ptr %r61
  %r63 = load i32, ptr %r36
  %r64 = add i32 0, 0 ; loadint
  %r62 = call i32 @mmerge(i32 %r63, i32 %r64)
  br label %B29

B29:
  br label %B30

B30:
  %r65 = load i32, ptr %r3
  %r66 = loadaddr @n#0
  %r67 = load i32, ptr %r66
  %tmpcmp68 = icmp eq i32 %r65, %r67
  %r68 = zext i1 %tmpcmp68 to i32
  %tmpconbr68 = trunc i32 %r68 to i1
  br i1 %tmpconbr68, label %B31, label %B32

B31:
  %r69 = load i32, ptr %r20
  %r70 = loadaddr @array#0
  %r71 = loadaddr @array#0
  %r72 = add i32 0, 4 ; loadint
  %r73 = load i32, ptr %r20
  %r74 = mul i32 %r73, %r72
  %r75 = add i32 %r71, %r74
  store i32 %r69, ptr %r75
  %r77 = load i32, ptr %r36
  %r78 = load i32, ptr %r20
  %r76 = call i32 @mmerge(i32 %r77, i32 %r78)
  br label %B32

B32:
  br label %B33

B33:
  %r79 = alloca i32, i32 4
  %r80 = load i32, ptr %r4
  %r81 = loadaddr @n#0
  %r82 = load i32, ptr %r81
  %tmpcmp83 = icmp slt i32 %r80, %r82
  %r83 = zext i1 %tmpcmp83 to i32
  %tmpconbr83 = trunc i32 %r83 to i1
  br i1 %tmpconbr83, label %B34, label %B35

B34:
  %r84 = loadaddr @array#0
  %r85 = add i32 0, 4 ; loadint
  %r86 = load i32, ptr %r36
  %r87 = add i32 0, 1 ; loadint
  %r88 = add i32 %r86, %r87
  %r89 = mul i32 %r88, %r85
  %r90 = add i32 %r84, %r89
  %r91 = load i32, ptr %r90
  %r92 = add i32 0, 1 ; loadint
  %r94 = add i32 0, 0 ; loadint
  %r93 = sub i32 %r94, %r92
  %tmpcmp95 = icmp ne i32 %r91, %r93
  %r95 = zext i1 %tmpcmp95 to i32
  store i32 %r95, ptr %r79
  br label %B36

B35:
  %r96 = add i32 0, 0 ; loadint
  store i32 %r96, ptr %r79
  br label %B36

B36:
  %r97 = load i32, ptr %r79
  %tmpconbr97 = trunc i32 %r97 to i1
  br i1 %tmpconbr97, label %B37, label %B38

B37:
  %r99 = load i32, ptr %r36
  %r100 = load i32, ptr %r36
  %r101 = add i32 0, 1 ; loadint
  %r102 = add i32 %r100, %r101
  %r98 = call i32 @mmerge(i32 %r99, i32 %r102)
  br label %B38

B38:
  br label %B39

B39:
  %r103 = alloca i32, i32 4
  %r104 = load i32, ptr %r4
  %r105 = add i32 0, 1 ; loadint
  %tmpcmp106 = icmp sgt i32 %r104, %r105
  %r106 = zext i1 %tmpcmp106 to i32
  %tmpconbr106 = trunc i32 %r106 to i1
  br i1 %tmpconbr106, label %B40, label %B41

B40:
  %r107 = loadaddr @array#0
  %r108 = add i32 0, 4 ; loadint
  %r109 = load i32, ptr %r36
  %r110 = add i32 0, 1 ; loadint
  %r111 = sub i32 %r109, %r110
  %r112 = mul i32 %r111, %r108
  %r113 = add i32 %r107, %r112
  %r114 = load i32, ptr %r113
  %r115 = add i32 0, 1 ; loadint
  %r117 = add i32 0, 0 ; loadint
  %r116 = sub i32 %r117, %r115
  %tmpcmp118 = icmp ne i32 %r114, %r116
  %r118 = zext i1 %tmpcmp118 to i32
  store i32 %r118, ptr %r103
  br label %B42

B41:
  %r119 = add i32 0, 0 ; loadint
  store i32 %r119, ptr %r103
  br label %B42

B42:
  %r120 = load i32, ptr %r103
  %tmpconbr120 = trunc i32 %r120 to i1
  br i1 %tmpconbr120, label %B43, label %B44

B43:
  %r122 = load i32, ptr %r36
  %r123 = load i32, ptr %r36
  %r124 = add i32 0, 1 ; loadint
  %r125 = sub i32 %r123, %r124
  %r121 = call i32 @mmerge(i32 %r122, i32 %r125)
  br label %B44

B44:
  br label %B45

B45:
  %r126 = alloca i32, i32 4
  %r127 = load i32, ptr %r3
  %r128 = loadaddr @n#0
  %r129 = load i32, ptr %r128
  %tmpcmp130 = icmp slt i32 %r127, %r129
  %r130 = zext i1 %tmpcmp130 to i32
  %tmpconbr130 = trunc i32 %r130 to i1
  br i1 %tmpconbr130, label %B46, label %B47

B46:
  %r131 = loadaddr @array#0
  %r132 = add i32 0, 4 ; loadint
  %r133 = load i32, ptr %r36
  %r134 = loadaddr @n#0
  %r135 = load i32, ptr %r134
  %r136 = add i32 %r133, %r135
  %r137 = mul i32 %r136, %r132
  %r138 = add i32 %r131, %r137
  %r139 = load i32, ptr %r138
  %r140 = add i32 0, 1 ; loadint
  %r142 = add i32 0, 0 ; loadint
  %r141 = sub i32 %r142, %r140
  %tmpcmp143 = icmp ne i32 %r139, %r141
  %r143 = zext i1 %tmpcmp143 to i32
  store i32 %r143, ptr %r126
  br label %B48

B47:
  %r144 = add i32 0, 0 ; loadint
  store i32 %r144, ptr %r126
  br label %B48

B48:
  %r145 = load i32, ptr %r126
  %tmpconbr145 = trunc i32 %r145 to i1
  br i1 %tmpconbr145, label %B49, label %B50

B49:
  %r147 = load i32, ptr %r36
  %r148 = load i32, ptr %r36
  %r149 = loadaddr @n#0
  %r150 = load i32, ptr %r149
  %r151 = add i32 %r148, %r150
  %r146 = call i32 @mmerge(i32 %r147, i32 %r151)
  br label %B50

B50:
  br label %B51

B51:
  %r152 = alloca i32, i32 4
  %r153 = load i32, ptr %r3
  %r154 = add i32 0, 1 ; loadint
  %tmpcmp155 = icmp sgt i32 %r153, %r154
  %r155 = zext i1 %tmpcmp155 to i32
  %tmpconbr155 = trunc i32 %r155 to i1
  br i1 %tmpconbr155, label %B52, label %B53

B52:
  %r156 = loadaddr @array#0
  %r157 = add i32 0, 4 ; loadint
  %r158 = load i32, ptr %r36
  %r159 = loadaddr @n#0
  %r160 = load i32, ptr %r159
  %r161 = sub i32 %r158, %r160
  %r162 = mul i32 %r161, %r157
  %r163 = add i32 %r156, %r162
  %r164 = load i32, ptr %r163
  %r165 = add i32 0, 1 ; loadint
  %r167 = add i32 0, 0 ; loadint
  %r166 = sub i32 %r167, %r165
  %tmpcmp168 = icmp ne i32 %r164, %r166
  %r168 = zext i1 %tmpcmp168 to i32
  store i32 %r168, ptr %r152
  br label %B54

B53:
  %r169 = add i32 0, 0 ; loadint
  store i32 %r169, ptr %r152
  br label %B54

B54:
  %r170 = load i32, ptr %r152
  %tmpconbr170 = trunc i32 %r170 to i1
  br i1 %tmpconbr170, label %B55, label %B56

B55:
  %r172 = load i32, ptr %r36
  %r173 = load i32, ptr %r36
  %r174 = loadaddr @n#0
  %r175 = load i32, ptr %r174
  %r176 = sub i32 %r173, %r175
  %r171 = call i32 @mmerge(i32 %r172, i32 %r176)
  br label %B56

B56:
  br label %B57

B57:
  %r177 = alloca i32, i32 4
  %r178 = alloca i32, i32 4
  %r179 = loadaddr @array#0
  %r180 = add i32 0, 4 ; loadint
  %r181 = add i32 0, 0 ; loadint
  %r182 = mul i32 %r181, %r180
  %r183 = add i32 %r179, %r182
  %r184 = load i32, ptr %r183
  %r185 = add i32 0, 1 ; loadint
  %r187 = add i32 0, 0 ; loadint
  %r186 = sub i32 %r187, %r185
  %tmpcmp188 = icmp ne i32 %r184, %r186
  %r188 = zext i1 %tmpcmp188 to i32
  %tmpconbr188 = trunc i32 %r188 to i1
  br i1 %tmpconbr188, label %B58, label %B59

B58:
  %r189 = loadaddr @array#0
  %r190 = add i32 0, 4 ; loadint
  %r191 = load i32, ptr %r20
  %r192 = mul i32 %r191, %r190
  %r193 = add i32 %r189, %r192
  %r194 = load i32, ptr %r193
  %r195 = add i32 0, 1 ; loadint
  %r197 = add i32 0, 0 ; loadint
  %r196 = sub i32 %r197, %r195
  %tmpcmp198 = icmp ne i32 %r194, %r196
  %r198 = zext i1 %tmpcmp198 to i32
  store i32 %r198, ptr %r178
  br label %B60

B59:
  %r199 = add i32 0, 0 ; loadint
  store i32 %r199, ptr %r178
  br label %B60

B60:
  %r200 = load i32, ptr %r178
  %tmpconbr200 = trunc i32 %r200 to i1
  br i1 %tmpconbr200, label %B61, label %B62

B61:
  %r202 = add i32 0, 0 ; loadint
  %r201 = call i32 @findfa(i32 %r202)
  %r204 = load i32, ptr %r20
  %r203 = call i32 @findfa(i32 %r204)
  %tmpcmp205 = icmp eq i32 %r201, %r203
  %r205 = zext i1 %tmpcmp205 to i32
  store i32 %r205, ptr %r177
  br label %B63

B62:
  %r206 = add i32 0, 0 ; loadint
  store i32 %r206, ptr %r177
  br label %B63

B63:
  %r207 = load i32, ptr %r177
  %tmpconbr207 = trunc i32 %r207 to i1
  br i1 %tmpconbr207, label %B64, label %B65

B64:
  %r208 = add i32 0, 1 ; loadint
  store i32 %r208, ptr %r15
  %r209 = alloca i32, i32 4
  %r210 = load i32, ptr %r13
  %r211 = add i32 0, 1 ; loadint
  %r212 = add i32 %r210, %r211
  store i32 %r212, ptr %r209
  %r214 = load i32, ptr %r209
  %r213 = call i32 @putint(i32 %r214)
  %r216 = add i32 0, 10 ; loadint
  %r215 = call i32 @putch(i32 %r216)
  br label %B65

B65:
  br label %B26

B66:
  %r220 = load i32, ptr %r15
  %r222 = add i32 0, 0 ; loadint
  %tmpcmp221 = icmp eq i32 %r222, %r220
  %r221 = zext i1 %tmpcmp221 to i32
  %tmpconbr221 = trunc i32 %r221 to i1
  br i1 %tmpconbr221, label %B67, label %B68

B67:
  %r224 = add i32 0, 1 ; loadint
  %r226 = add i32 0, 0 ; loadint
  %r225 = sub i32 %r226, %r224
  %r223 = call i32 @putint(i32 %r225)
  %r228 = add i32 0, 10 ; loadint
  %r227 = call i32 @putch(i32 %r228)
  br label %B68

B68:
  br label %B18

}
define i32 @mmerge(i32 %r1, i32 %r2){
B12:
  %r3 = alloca i32, i32 4
  store i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store i32 %r2, ptr %r4
  %r5 = alloca i32, i32 4
  %r7 = load i32, ptr %r3
  %r6 = call i32 @findfa(i32 %r7)
  store i32 %r6, ptr %r5
  %r8 = alloca i32, i32 4
  %r10 = load i32, ptr %r4
  %r9 = call i32 @findfa(i32 %r10)
  store i32 %r9, ptr %r8
  br label %B13

B13:
  %r11 = load i32, ptr %r5
  %r12 = load i32, ptr %r8
  %tmpcmp13 = icmp ne i32 %r11, %r12
  %r13 = zext i1 %tmpcmp13 to i32
  %tmpconbr13 = trunc i32 %r13 to i1
  br i1 %tmpconbr13, label %B14, label %B15

B14:
  %r14 = load i32, ptr %r8
  %r15 = loadaddr @array#0
  %r16 = loadaddr @array#0
  %r17 = add i32 0, 4 ; loadint
  %r18 = load i32, ptr %r5
  %r19 = mul i32 %r18, %r17
  %r20 = add i32 %r16, %r19
  store i32 %r14, ptr %r20
  br label %B15

B15:
  %r21 = add i32 0, 0 ; loadint
  ret i32 %r21

}
define i32 @findfa(i32 %r1){
B5:
  %r2 = alloca i32, i32 4
  store i32 %r1, ptr %r2
  br label %B6

B6:
  %r3 = loadaddr @array#0
  %r4 = add i32 0, 4 ; loadint
  %r5 = load i32, ptr %r2
  %r6 = mul i32 %r5, %r4
  %r7 = add i32 %r3, %r6
  %r8 = load i32, ptr %r7
  %r9 = load i32, ptr %r2
  %tmpcmp10 = icmp eq i32 %r8, %r9
  %r10 = zext i1 %tmpcmp10 to i32
  %tmpconbr10 = trunc i32 %r10 to i1
  br i1 %tmpconbr10, label %B7, label %B8

B7:
  %r11 = load i32, ptr %r2
  ret i32 %r11

B8:
  %r13 = loadaddr @array#0
  %r14 = add i32 0, 4 ; loadint
  %r15 = load i32, ptr %r2
  %r16 = mul i32 %r15, %r14
  %r17 = add i32 %r13, %r16
  %r18 = load i32, ptr %r17
  %r12 = call i32 @findfa(i32 %r18)
  %r19 = loadaddr @array#0
  %r20 = loadaddr @array#0
  %r21 = add i32 0, 4 ; loadint
  %r22 = load i32, ptr %r2
  %r23 = mul i32 %r22, %r21
  %r24 = add i32 %r20, %r23
  store i32 %r12, ptr %r24
  %r25 = loadaddr @array#0
  %r26 = add i32 0, 4 ; loadint
  %r27 = load i32, ptr %r2
  %r28 = mul i32 %r27, %r26
  %r29 = add i32 %r25, %r28
  %r30 = load i32, ptr %r29
  ret i32 %r30

}
define i32 @init(i32 %r1){
B0:
  %r2 = alloca i32, i32 4
  store i32 %r1, ptr %r2
  %r3 = alloca i32, i32 4
  %r4 = add i32 0, 1 ; loadint
  store i32 %r4, ptr %r3
  br label %B1

B1:
  %r5 = load i32, ptr %r3
  %r6 = load i32, ptr %r2
  %r7 = load i32, ptr %r2
  %r8 = mul i32 %r6, %r7
  %r9 = add i32 0, 1 ; loadint
  %r10 = add i32 %r8, %r9
  %tmpcmp11 = icmp sle i32 %r5, %r10
  %r11 = zext i1 %tmpcmp11 to i32
  %tmpconbr11 = trunc i32 %r11 to i1
  br i1 %tmpconbr11, label %B2, label %B3

B2:
  %r12 = add i32 0, 1 ; loadint
  %r14 = add i32 0, 0 ; loadint
  %r13 = sub i32 %r14, %r12
  %r15 = loadaddr @array#0
  %r16 = loadaddr @array#0
  %r17 = add i32 0, 4 ; loadint
  %r18 = load i32, ptr %r3
  %r19 = mul i32 %r18, %r17
  %r20 = add i32 %r16, %r19
  store i32 %r13, ptr %r20
  %r21 = load i32, ptr %r3
  %r22 = add i32 0, 1 ; loadint
  %r23 = add i32 %r21, %r22
  store i32 %r23, ptr %r3
  br label %B1

B3:
  %r24 = add i32 0, 0 ; loadint
  ret i32 %r24

}
--------------------------- building riscv ---------------------------
riscv: 
    addi T[-1], sp, 108
    addi T[-2], sp, 112
    addi T[-3], sp, 116
    addi T[-4], sp, 120
    li T[-5], 1
    sw T[-5], 0(T[-1])
    j B2
    lw T[-6], 0(T[-1])
    beq x0, T[-6], B4
    j B3
    lw T[-7], 0(T[-1])
    li T[-8], 1
    sub T[-9], T[-7], T[-8]
    sw T[-9], 0(T[-1])
    li T[-10], 4
    la T[-11], n
    sw T[-10], 0(T[-11])
    li T[-12], 10
    sw T[-12], 0(T[-2])
    addi T[-13], sp, 124
    li T[-14], 0
    sw T[-14], 0(T[-13])
    addi T[-15], sp, 128
    li T[-16], 0
    sw T[-16], 0(T[-15])
    la T[-18], n
    lw T[-19], 0(T[-18])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-19]
    call init
    mv T[-17], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    addi T[-20], sp, 132
    la T[-21], n
    lw T[-22], 0(T[-21])
    la T[-23], n
    lw T[-24], 0(T[-23])
    mul T[-25], T[-22], T[-24]
    li T[-26], 1
    add T[-27], T[-25], T[-26]
    sw T[-27], 0(T[-20])
    j B5
    li T[-229], 0
    mv a0, T[-229]
    ret
    lw T[-28], 0(T[-13])
    lw T[-29], 0(T[-2])
    slt T[-30], T[-28], T[-29]
    beq x0, T[-30], B7
    j B6
    call getint
    mv T[-31], a0
    sw T[-31], 0(T[-3])
    call getint
    mv T[-32], a0
    sw T[-32], 0(T[-4])
    j B8
    j B50
    lw T[-33], 0(T[-15])
    li T[-35], 0
    sub T[-34], T[-35], T[-33]
    seqz T[-34], T[-34]
    beq x0, T[-34], B10
    j B9
    addi T[-36], sp, 136
    la T[-37], n
    lw T[-38], 0(T[-37])
    lw T[-39], 0(T[-3])
    li T[-40], 1
    sub T[-41], T[-39], T[-40]
    mul T[-42], T[-38], T[-41]
    lw T[-43], 0(T[-4])
    add T[-44], T[-42], T[-43]
    sw T[-44], 0(T[-36])
    lw T[-45], 0(T[-36])
    la T[-46], array
    la T[-47], array
    li T[-48], 4
    lw T[-49], 0(T[-36])
    mul T[-50], T[-49], T[-48]
    add T[-51], T[-47], T[-50]
    sw T[-45], 0(T[-51])
    j B11
    lw T[-217], 0(T[-13])
    li T[-218], 1
    add T[-219], T[-217], T[-218]
    sw T[-219], 0(T[-13])
    j B5
    lw T[-52], 0(T[-3])
    li T[-53], 1
    sub T[-54], T[-52], T[-53]
    seqz T[-54], T[-54]
    beq x0, T[-54], B13
    j B12
    li T[-55], 0
    la T[-56], array
    la T[-57], array
    li T[-58], 4
    li T[-59], 0
    mul T[-60], T[-59], T[-58]
    add T[-61], T[-57], T[-60]
    sw T[-55], 0(T[-61])
    lw T[-63], 0(T[-36])
    li T[-64], 0
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-63]
    mv a2, T[-64]
    call mmerge
    mv T[-62], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B13
    j B14
    lw T[-65], 0(T[-3])
    la T[-66], n
    lw T[-67], 0(T[-66])
    sub T[-68], T[-65], T[-67]
    seqz T[-68], T[-68]
    beq x0, T[-68], B16
    j B15
    lw T[-69], 0(T[-20])
    la T[-70], array
    la T[-71], array
    li T[-72], 4
    lw T[-73], 0(T[-20])
    mul T[-74], T[-73], T[-72]
    add T[-75], T[-71], T[-74]
    sw T[-69], 0(T[-75])
    lw T[-77], 0(T[-36])
    lw T[-78], 0(T[-20])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-77]
    mv a2, T[-78]
    call mmerge
    mv T[-76], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B16
    j B17
    addi T[-79], sp, 140
    lw T[-80], 0(T[-4])
    la T[-81], n
    lw T[-82], 0(T[-81])
    slt T[-83], T[-80], T[-82]
    beq x0, T[-83], B19
    j B18
    la T[-84], array
    li T[-85], 4
    lw T[-86], 0(T[-36])
    li T[-87], 1
    add T[-88], T[-86], T[-87]
    mul T[-89], T[-88], T[-85]
    add T[-90], T[-84], T[-89]
    lw T[-91], 0(T[-90])
    li T[-92], 1
    li T[-94], 0
    sub T[-93], T[-94], T[-92]
    sub T[-95], T[-91], T[-93]
    snez T[-95], T[-95]
    sw T[-95], 0(T[-79])
    j B20
    li T[-96], 0
    sw T[-96], 0(T[-79])
    j B20
    lw T[-97], 0(T[-79])
    beq x0, T[-97], B22
    j B21
    lw T[-99], 0(T[-36])
    lw T[-100], 0(T[-36])
    li T[-101], 1
    add T[-102], T[-100], T[-101]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-99]
    mv a2, T[-102]
    call mmerge
    mv T[-98], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B22
    j B23
    addi T[-103], sp, 144
    lw T[-104], 0(T[-4])
    li T[-105], 1
    sgt T[-106], T[-104], T[-105]
    beq x0, T[-106], B25
    j B24
    la T[-107], array
    li T[-108], 4
    lw T[-109], 0(T[-36])
    li T[-110], 1
    sub T[-111], T[-109], T[-110]
    mul T[-112], T[-111], T[-108]
    add T[-113], T[-107], T[-112]
    lw T[-114], 0(T[-113])
    li T[-115], 1
    li T[-117], 0
    sub T[-116], T[-117], T[-115]
    sub T[-118], T[-114], T[-116]
    snez T[-118], T[-118]
    sw T[-118], 0(T[-103])
    j B26
    li T[-119], 0
    sw T[-119], 0(T[-103])
    j B26
    lw T[-120], 0(T[-103])
    beq x0, T[-120], B28
    j B27
    lw T[-122], 0(T[-36])
    lw T[-123], 0(T[-36])
    li T[-124], 1
    sub T[-125], T[-123], T[-124]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-122]
    mv a2, T[-125]
    call mmerge
    mv T[-121], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B28
    j B29
    addi T[-126], sp, 148
    lw T[-127], 0(T[-3])
    la T[-128], n
    lw T[-129], 0(T[-128])
    slt T[-130], T[-127], T[-129]
    beq x0, T[-130], B31
    j B30
    la T[-131], array
    li T[-132], 4
    lw T[-133], 0(T[-36])
    la T[-134], n
    lw T[-135], 0(T[-134])
    add T[-136], T[-133], T[-135]
    mul T[-137], T[-136], T[-132]
    add T[-138], T[-131], T[-137]
    lw T[-139], 0(T[-138])
    li T[-140], 1
    li T[-142], 0
    sub T[-141], T[-142], T[-140]
    sub T[-143], T[-139], T[-141]
    snez T[-143], T[-143]
    sw T[-143], 0(T[-126])
    j B32
    li T[-144], 0
    sw T[-144], 0(T[-126])
    j B32
    lw T[-145], 0(T[-126])
    beq x0, T[-145], B34
    j B33
    lw T[-147], 0(T[-36])
    lw T[-148], 0(T[-36])
    la T[-149], n
    lw T[-150], 0(T[-149])
    add T[-151], T[-148], T[-150]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-147]
    mv a2, T[-151]
    call mmerge
    mv T[-146], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B34
    j B35
    addi T[-152], sp, 152
    lw T[-153], 0(T[-3])
    li T[-154], 1
    sgt T[-155], T[-153], T[-154]
    beq x0, T[-155], B37
    j B36
    la T[-156], array
    li T[-157], 4
    lw T[-158], 0(T[-36])
    la T[-159], n
    lw T[-160], 0(T[-159])
    sub T[-161], T[-158], T[-160]
    mul T[-162], T[-161], T[-157]
    add T[-163], T[-156], T[-162]
    lw T[-164], 0(T[-163])
    li T[-165], 1
    li T[-167], 0
    sub T[-166], T[-167], T[-165]
    sub T[-168], T[-164], T[-166]
    snez T[-168], T[-168]
    sw T[-168], 0(T[-152])
    j B38
    li T[-169], 0
    sw T[-169], 0(T[-152])
    j B38
    lw T[-170], 0(T[-152])
    beq x0, T[-170], B40
    j B39
    lw T[-172], 0(T[-36])
    lw T[-173], 0(T[-36])
    la T[-174], n
    lw T[-175], 0(T[-174])
    sub T[-176], T[-173], T[-175]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-172]
    mv a2, T[-176]
    call mmerge
    mv T[-171], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B40
    j B41
    addi T[-177], sp, 156
    addi T[-178], sp, 160
    la T[-179], array
    li T[-180], 4
    li T[-181], 0
    mul T[-182], T[-181], T[-180]
    add T[-183], T[-179], T[-182]
    lw T[-184], 0(T[-183])
    li T[-185], 1
    li T[-187], 0
    sub T[-186], T[-187], T[-185]
    sub T[-188], T[-184], T[-186]
    snez T[-188], T[-188]
    beq x0, T[-188], B43
    j B42
    la T[-189], array
    li T[-190], 4
    lw T[-191], 0(T[-20])
    mul T[-192], T[-191], T[-190]
    add T[-193], T[-189], T[-192]
    lw T[-194], 0(T[-193])
    li T[-195], 1
    li T[-197], 0
    sub T[-196], T[-197], T[-195]
    sub T[-198], T[-194], T[-196]
    snez T[-198], T[-198]
    sw T[-198], 0(T[-178])
    j B44
    li T[-199], 0
    sw T[-199], 0(T[-178])
    j B44
    lw T[-200], 0(T[-178])
    beq x0, T[-200], B46
    j B45
    li T[-202], 0
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-202]
    call findfa
    mv T[-201], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    lw T[-204], 0(T[-20])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-204]
    call findfa
    mv T[-203], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    sub T[-205], T[-201], T[-203]
    seqz T[-205], T[-205]
    sw T[-205], 0(T[-177])
    j B47
    li T[-206], 0
    sw T[-206], 0(T[-177])
    j B47
    lw T[-207], 0(T[-177])
    beq x0, T[-207], B49
    j B48
    li T[-208], 1
    sw T[-208], 0(T[-15])
    addi T[-209], sp, 164
    lw T[-210], 0(T[-13])
    li T[-211], 1
    add T[-212], T[-210], T[-211]
    sw T[-212], 0(T[-209])
    lw T[-214], 0(T[-209])
    mv a0, T[-214]
    call putint
    mv T[-213], a0
    li T[-216], 10
    mv a0, T[-216]
    call putch
    mv T[-215], a0
    j B49
    j B10
    lw T[-220], 0(T[-15])
    li T[-222], 0
    sub T[-221], T[-222], T[-220]
    seqz T[-221], T[-221]
    beq x0, T[-221], B52
    j B51
    li T[-224], 1
    li T[-226], 0
    sub T[-225], T[-226], T[-224]
    mv a0, T[-225]
    call putint
    mv T[-223], a0
    li T[-228], 10
    mv a0, T[-228]
    call putch
    mv T[-227], a0
    j B52
    j B2
    addi T[-3], sp, 108
    sw a1, 0(T[-3])
    addi T[-4], sp, 112
    sw a2, 0(T[-4])
    addi T[-5], sp, 116
    lw T[-7], 0(T[-3])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-7]
    call findfa
    mv T[-6], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    sw T[-6], 0(T[-5])
    addi T[-8], sp, 120
    lw T[-10], 0(T[-4])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-10]
    call findfa
    mv T[-9], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    sw T[-9], 0(T[-8])
    j B55
    lw T[-11], 0(T[-5])
    lw T[-12], 0(T[-8])
    sub T[-13], T[-11], T[-12]
    snez T[-13], T[-13]
    beq x0, T[-13], B57
    j B56
    lw T[-14], 0(T[-8])
    la T[-15], array
    la T[-16], array
    li T[-17], 4
    lw T[-18], 0(T[-5])
    mul T[-19], T[-18], T[-17]
    add T[-20], T[-16], T[-19]
    sw T[-14], 0(T[-20])
    j B57
    li T[-21], 0
    mv a0, T[-21]
    ret
    addi T[-2], sp, 108
    sw a1, 0(T[-2])
    j B60
    la T[-3], array
    li T[-4], 4
    lw T[-5], 0(T[-2])
    mul T[-6], T[-5], T[-4]
    add T[-7], T[-3], T[-6]
    lw T[-8], 0(T[-7])
    lw T[-9], 0(T[-2])
    sub T[-10], T[-8], T[-9]
    seqz T[-10], T[-10]
    beq x0, T[-10], B62
    j B61
    lw T[-11], 0(T[-2])
    mv a0, T[-11]
    ret
    la T[-13], array
    li T[-14], 4
    lw T[-15], 0(T[-2])
    mul T[-16], T[-15], T[-14]
    add T[-17], T[-13], T[-16]
    lw T[-18], 0(T[-17])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-18]
    call findfa
    mv T[-12], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    la T[-19], array
    la T[-20], array
    li T[-21], 4
    lw T[-22], 0(T[-2])
    mul T[-23], T[-22], T[-21]
    add T[-24], T[-20], T[-23]
    sw T[-12], 0(T[-24])
    la T[-25], array
    li T[-26], 4
    lw T[-27], 0(T[-2])
    mul T[-28], T[-27], T[-26]
    add T[-29], T[-25], T[-28]
    lw T[-30], 0(T[-29])
    mv a0, T[-30]
    ret
    addi T[-2], sp, 108
    sw a1, 0(T[-2])
    addi T[-3], sp, 112
    li T[-4], 1
    sw T[-4], 0(T[-3])
    j B65
    lw T[-5], 0(T[-3])
    lw T[-6], 0(T[-2])
    lw T[-7], 0(T[-2])
    mul T[-8], T[-6], T[-7]
    li T[-9], 1
    add T[-10], T[-8], T[-9]
    sgt T[-11], T[-5], T[-10]
    seqz T[-11], T[-11]
    beq x0, T[-11], B67
    j B66
    li T[-12], 1
    li T[-14], 0
    sub T[-13], T[-14], T[-12]
    la T[-15], array
    la T[-16], array
    li T[-17], 4
    lw T[-18], 0(T[-3])
    mul T[-19], T[-18], T[-17]
    add T[-20], T[-16], T[-19]
    sw T[-13], 0(T[-20])
    lw T[-21], 0(T[-3])
    li T[-22], 1
    add T[-23], T[-21], T[-22]
    sw T[-23], 0(T[-3])
    j B65
    li T[-24], 0
    mv a0, T[-24]
    ret
?
init Main()
init do_liveness_analysis() done
init Build() done
freeze reg MkWorklist insert T[-24]
simplify reg MkWorklist insert T[-23]
simplify reg MkWorklist insert T[-22]
simplify reg MkWorklist insert T[-21]
simplify reg MkWorklist insert T[-20]
simplify reg MkWorklist insert T[-19]
simplify reg MkWorklist insert T[-18]
simplify reg MkWorklist insert T[-17]
simplify reg MkWorklist insert T[-16]
simplify reg MkWorklist insert T[-15]
simplify reg MkWorklist insert T[-14]
simplify reg MkWorklist insert T[-13]
simplify reg MkWorklist insert T[-12]
simplify reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-8]
simplify reg MkWorklist insert T[-7]
simplify reg MkWorklist insert T[-6]
simplify reg MkWorklist insert T[-5]
simplify reg MkWorklist insert T[-4]
simplify reg MkWorklist insert T[-3]
simplify reg MkWorklist insert T[-2]
init MkWorklist() done
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Simplify()
init Coalesce()
init AssignColors() done
replace regs

init
after compute reg_used
after prologue
end of emitend
findfa Main()
findfa do_liveness_analysis() done
findfa Build() done
freeze reg MkWorklist insert T[-30]
simplify reg MkWorklist insert T[-29]
simplify reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-27]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
simplify reg MkWorklist insert T[-24]
simplify reg MkWorklist insert T[-23]
simplify reg MkWorklist insert T[-22]
simplify reg MkWorklist insert T[-21]
simplify reg MkWorklist insert T[-20]
simplify reg MkWorklist insert T[-19]
freeze reg MkWorklist insert T[-18]
simplify reg MkWorklist insert T[-17]
simplify reg MkWorklist insert T[-16]
simplify reg MkWorklist insert T[-15]
simplify reg MkWorklist insert T[-14]
simplify reg MkWorklist insert T[-13]
freeze reg MkWorklist insert T[-12]
freeze reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-8]
simplify reg MkWorklist insert T[-7]
simplify reg MkWorklist insert T[-6]
simplify reg MkWorklist insert T[-5]
simplify reg MkWorklist insert T[-4]
simplify reg MkWorklist insert T[-3]
spill reg MkWorklist insert T[-2]
findfa MkWorklist() done
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Simplify()
findfa Coalesce()
findfa Coalesce()
findfa Simplify()
findfa Coalesce()
findfa Simplify()
findfa Coalesce()
findfa AssignColors() done
replace regs

findfa
after compute reg_used
after prologue
end of emitend
mmerge Main()
mmerge do_liveness_analysis() done
mmerge Build() done
freeze reg MkWorklist insert T[-21]
simplify reg MkWorklist insert T[-20]
simplify reg MkWorklist insert T[-19]
simplify reg MkWorklist insert T[-18]
simplify reg MkWorklist insert T[-17]
simplify reg MkWorklist insert T[-16]
simplify reg MkWorklist insert T[-15]
simplify reg MkWorklist insert T[-14]
simplify reg MkWorklist insert T[-13]
simplify reg MkWorklist insert T[-12]
simplify reg MkWorklist insert T[-11]
freeze reg MkWorklist insert T[-10]
freeze reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-8]
freeze reg MkWorklist insert T[-7]
freeze reg MkWorklist insert T[-6]
spill reg MkWorklist insert T[-5]
simplify reg MkWorklist insert T[-4]
simplify reg MkWorklist insert T[-3]
mmerge MkWorklist() done
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Simplify()
mmerge Coalesce()
mmerge Simplify()
mmerge Coalesce()
mmerge Simplify()
mmerge Coalesce()
mmerge Simplify()
mmerge Coalesce()
mmerge Simplify()
mmerge Coalesce()
mmerge AssignColors() done
replace regs

mmerge
after compute reg_used
after prologue
end of emitend
main Main()
main do_liveness_analysis() done
main Build() done
freeze reg MkWorklist insert T[-229]
freeze reg MkWorklist insert T[-228]
freeze reg MkWorklist insert T[-227]
simplify reg MkWorklist insert T[-226]
freeze reg MkWorklist insert T[-225]
simplify reg MkWorklist insert T[-224]
freeze reg MkWorklist insert T[-223]
simplify reg MkWorklist insert T[-222]
simplify reg MkWorklist insert T[-221]
simplify reg MkWorklist insert T[-220]
simplify reg MkWorklist insert T[-219]
simplify reg MkWorklist insert T[-218]
simplify reg MkWorklist insert T[-217]
freeze reg MkWorklist insert T[-216]
freeze reg MkWorklist insert T[-215]
freeze reg MkWorklist insert T[-214]
freeze reg MkWorklist insert T[-213]
simplify reg MkWorklist insert T[-212]
simplify reg MkWorklist insert T[-211]
simplify reg MkWorklist insert T[-210]
simplify reg MkWorklist insert T[-209]
simplify reg MkWorklist insert T[-208]
simplify reg MkWorklist insert T[-207]
simplify reg MkWorklist insert T[-206]
simplify reg MkWorklist insert T[-205]
freeze reg MkWorklist insert T[-204]
freeze reg MkWorklist insert T[-203]
freeze reg MkWorklist insert T[-202]
spill reg MkWorklist insert T[-201]
simplify reg MkWorklist insert T[-200]
simplify reg MkWorklist insert T[-199]
simplify reg MkWorklist insert T[-198]
spill reg MkWorklist insert T[-197]
spill reg MkWorklist insert T[-196]
spill reg MkWorklist insert T[-195]
spill reg MkWorklist insert T[-194]
simplify reg MkWorklist insert T[-193]
spill reg MkWorklist insert T[-192]
spill reg MkWorklist insert T[-191]
spill reg MkWorklist insert T[-190]
spill reg MkWorklist insert T[-189]
simplify reg MkWorklist insert T[-188]
spill reg MkWorklist insert T[-187]
spill reg MkWorklist insert T[-186]
spill reg MkWorklist insert T[-185]
spill reg MkWorklist insert T[-184]
simplify reg MkWorklist insert T[-183]
spill reg MkWorklist insert T[-182]
spill reg MkWorklist insert T[-181]
spill reg MkWorklist insert T[-180]
spill reg MkWorklist insert T[-179]
spill reg MkWorklist insert T[-178]
spill reg MkWorklist insert T[-177]
freeze reg MkWorklist insert T[-176]
simplify reg MkWorklist insert T[-175]
simplify reg MkWorklist insert T[-174]
spill reg MkWorklist insert T[-173]
spill reg MkWorklist insert T[-172]
freeze reg MkWorklist insert T[-171]
simplify reg MkWorklist insert T[-170]
simplify reg MkWorklist insert T[-169]
simplify reg MkWorklist insert T[-168]
spill reg MkWorklist insert T[-167]
spill reg MkWorklist insert T[-166]
spill reg MkWorklist insert T[-165]
spill reg MkWorklist insert T[-164]
simplify reg MkWorklist insert T[-163]
spill reg MkWorklist insert T[-162]
spill reg MkWorklist insert T[-161]
spill reg MkWorklist insert T[-160]
spill reg MkWorklist insert T[-159]
spill reg MkWorklist insert T[-158]
spill reg MkWorklist insert T[-157]
spill reg MkWorklist insert T[-156]
simplify reg MkWorklist insert T[-155]
spill reg MkWorklist insert T[-154]
spill reg MkWorklist insert T[-153]
spill reg MkWorklist insert T[-152]
freeze reg MkWorklist insert T[-151]
spill reg MkWorklist insert T[-150]
spill reg MkWorklist insert T[-149]
spill reg MkWorklist insert T[-148]
spill reg MkWorklist insert T[-147]
freeze reg MkWorklist insert T[-146]
simplify reg MkWorklist insert T[-145]
simplify reg MkWorklist insert T[-144]
simplify reg MkWorklist insert T[-143]
spill reg MkWorklist insert T[-142]
spill reg MkWorklist insert T[-141]
spill reg MkWorklist insert T[-140]
spill reg MkWorklist insert T[-139]
simplify reg MkWorklist insert T[-138]
spill reg MkWorklist insert T[-137]
spill reg MkWorklist insert T[-136]
spill reg MkWorklist insert T[-135]
spill reg MkWorklist insert T[-134]
spill reg MkWorklist insert T[-133]
spill reg MkWorklist insert T[-132]
spill reg MkWorklist insert T[-131]
simplify reg MkWorklist insert T[-130]
spill reg MkWorklist insert T[-129]
spill reg MkWorklist insert T[-128]
spill reg MkWorklist insert T[-127]
spill reg MkWorklist insert T[-126]
freeze reg MkWorklist insert T[-125]
spill reg MkWorklist insert T[-124]
spill reg MkWorklist insert T[-123]
spill reg MkWorklist insert T[-122]
freeze reg MkWorklist insert T[-121]
simplify reg MkWorklist insert T[-120]
simplify reg MkWorklist insert T[-119]
simplify reg MkWorklist insert T[-118]
spill reg MkWorklist insert T[-117]
spill reg MkWorklist insert T[-116]
spill reg MkWorklist insert T[-115]
spill reg MkWorklist insert T[-114]
simplify reg MkWorklist insert T[-113]
spill reg MkWorklist insert T[-112]
spill reg MkWorklist insert T[-111]
spill reg MkWorklist insert T[-110]
spill reg MkWorklist insert T[-109]
spill reg MkWorklist insert T[-108]
spill reg MkWorklist insert T[-107]
simplify reg MkWorklist insert T[-106]
spill reg MkWorklist insert T[-105]
spill reg MkWorklist insert T[-104]
spill reg MkWorklist insert T[-103]
freeze reg MkWorklist insert T[-102]
spill reg MkWorklist insert T[-101]
spill reg MkWorklist insert T[-100]
spill reg MkWorklist insert T[-99]
freeze reg MkWorklist insert T[-98]
simplify reg MkWorklist insert T[-97]
simplify reg MkWorklist insert T[-96]
simplify reg MkWorklist insert T[-95]
spill reg MkWorklist insert T[-94]
spill reg MkWorklist insert T[-93]
spill reg MkWorklist insert T[-92]
spill reg MkWorklist insert T[-91]
simplify reg MkWorklist insert T[-90]
spill reg MkWorklist insert T[-89]
spill reg MkWorklist insert T[-88]
spill reg MkWorklist insert T[-87]
spill reg MkWorklist insert T[-86]
spill reg MkWorklist insert T[-85]
spill reg MkWorklist insert T[-84]
simplify reg MkWorklist insert T[-83]
spill reg MkWorklist insert T[-82]
spill reg MkWorklist insert T[-81]
spill reg MkWorklist insert T[-80]
spill reg MkWorklist insert T[-79]
freeze reg MkWorklist insert T[-78]
freeze reg MkWorklist insert T[-77]
freeze reg MkWorklist insert T[-76]
simplify reg MkWorklist insert T[-75]
spill reg MkWorklist insert T[-74]
spill reg MkWorklist insert T[-73]
spill reg MkWorklist insert T[-72]
spill reg MkWorklist insert T[-71]
simplify reg MkWorklist insert T[-70]
spill reg MkWorklist insert T[-69]
simplify reg MkWorklist insert T[-68]
simplify reg MkWorklist insert T[-67]
simplify reg MkWorklist insert T[-66]
spill reg MkWorklist insert T[-65]
freeze reg MkWorklist insert T[-64]
freeze reg MkWorklist insert T[-63]
freeze reg MkWorklist insert T[-62]
simplify reg MkWorklist insert T[-61]
spill reg MkWorklist insert T[-60]
spill reg MkWorklist insert T[-59]
spill reg MkWorklist insert T[-58]
spill reg MkWorklist insert T[-57]
simplify reg MkWorklist insert T[-56]
spill reg MkWorklist insert T[-55]
simplify reg MkWorklist insert T[-54]
simplify reg MkWorklist insert T[-53]
simplify reg MkWorklist insert T[-52]
simplify reg MkWorklist insert T[-51]
spill reg MkWorklist insert T[-50]
spill reg MkWorklist insert T[-49]
spill reg MkWorklist insert T[-48]
spill reg MkWorklist insert T[-47]
simplify reg MkWorklist insert T[-46]
spill reg MkWorklist insert T[-45]
simplify reg MkWorklist insert T[-44]
simplify reg MkWorklist insert T[-43]
simplify reg MkWorklist insert T[-42]
simplify reg MkWorklist insert T[-41]
spill reg MkWorklist insert T[-40]
spill reg MkWorklist insert T[-39]
spill reg MkWorklist insert T[-38]
simplify reg MkWorklist insert T[-37]
spill reg MkWorklist insert T[-36]
simplify reg MkWorklist insert T[-35]
simplify reg MkWorklist insert T[-34]
simplify reg MkWorklist insert T[-33]
freeze reg MkWorklist insert T[-32]
freeze reg MkWorklist insert T[-31]
simplify reg MkWorklist insert T[-30]
simplify reg MkWorklist insert T[-29]
simplify reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-27]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
simplify reg MkWorklist insert T[-24]
simplify reg MkWorklist insert T[-23]
simplify reg MkWorklist insert T[-22]
simplify reg MkWorklist insert T[-21]
spill reg MkWorklist insert T[-20]
freeze reg MkWorklist insert T[-19]
simplify reg MkWorklist insert T[-18]
freeze reg MkWorklist insert T[-17]
simplify reg MkWorklist insert T[-16]
spill reg MkWorklist insert T[-15]
simplify reg MkWorklist insert T[-14]
spill reg MkWorklist insert T[-13]
simplify reg MkWorklist insert T[-12]
simplify reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-8]
simplify reg MkWorklist insert T[-7]
simplify reg MkWorklist insert T[-6]
simplify reg MkWorklist insert T[-5]
spill reg MkWorklist insert T[-4]
spill reg MkWorklist insert T[-3]
spill reg MkWorklist insert T[-2]
spill reg MkWorklist insert T[-1]
main MkWorklist() done
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main AssignColors() done
main RewriteProgram() done
    addi T[-233], sp, 108
    sw T[-233], 172(sp)
    addi T[-230], sp, 112
    sw T[-230], 168(sp)
    addi T[-3], sp, 116
    addi T[-4], sp, 120
    li T[-5], 1
    lw T[-234], 172(sp)
    sw T[-5], 0(T[-234])
    j B2
    lw T[-235], 172(sp)
    lw T[-6], 0(T[-235])
    beq x0, T[-6], B4
    j B3
    lw T[-236], 172(sp)
    lw T[-7], 0(T[-236])
    li T[-8], 1
    sub T[-9], T[-7], T[-8]
    lw T[-237], 172(sp)
    sw T[-9], 0(T[-237])
    li T[-10], 4
    la T[-11], n
    sw T[-10], 0(T[-11])
    li T[-12], 10
    lw T[-231], 168(sp)
    sw T[-12], 0(T[-231])
    addi T[-13], sp, 124
    li T[-14], 0
    sw T[-14], 0(T[-13])
    addi T[-15], sp, 128
    li T[-16], 0
    sw T[-16], 0(T[-15])
    la T[-18], n
    lw T[-19], 0(T[-18])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-19]
    call init
    mv T[-17], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    addi T[-20], sp, 132
    la T[-21], n
    lw T[-22], 0(T[-21])
    la T[-23], n
    lw T[-24], 0(T[-23])
    mul T[-25], T[-22], T[-24]
    li T[-26], 1
    add T[-27], T[-25], T[-26]
    sw T[-27], 0(T[-20])
    j B5
    li T[-229], 0
    mv a0, T[-229]
    ret
    lw T[-28], 0(T[-13])
    lw T[-232], 168(sp)
    lw T[-29], 0(T[-232])
    slt T[-30], T[-28], T[-29]
    beq x0, T[-30], B7
    j B6
    call getint
    mv T[-31], a0
    sw T[-31], 0(T[-3])
    call getint
    mv T[-32], a0
    sw T[-32], 0(T[-4])
    j B8
    j B50
    lw T[-33], 0(T[-15])
    li T[-35], 0
    sub T[-34], T[-35], T[-33]
    seqz T[-34], T[-34]
    beq x0, T[-34], B10
    j B9
    addi T[-36], sp, 136
    la T[-37], n
    lw T[-38], 0(T[-37])
    lw T[-39], 0(T[-3])
    li T[-40], 1
    sub T[-41], T[-39], T[-40]
    mul T[-42], T[-38], T[-41]
    lw T[-43], 0(T[-4])
    add T[-44], T[-42], T[-43]
    sw T[-44], 0(T[-36])
    lw T[-45], 0(T[-36])
    la T[-46], array
    la T[-47], array
    li T[-48], 4
    lw T[-49], 0(T[-36])
    mul T[-50], T[-49], T[-48]
    add T[-51], T[-47], T[-50]
    sw T[-45], 0(T[-51])
    j B11
    lw T[-217], 0(T[-13])
    li T[-218], 1
    add T[-219], T[-217], T[-218]
    sw T[-219], 0(T[-13])
    j B5
    lw T[-52], 0(T[-3])
    li T[-53], 1
    sub T[-54], T[-52], T[-53]
    seqz T[-54], T[-54]
    beq x0, T[-54], B13
    j B12
    li T[-55], 0
    la T[-56], array
    la T[-57], array
    li T[-58], 4
    li T[-59], 0
    mul T[-60], T[-59], T[-58]
    add T[-61], T[-57], T[-60]
    sw T[-55], 0(T[-61])
    lw T[-63], 0(T[-36])
    li T[-64], 0
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-63]
    mv a2, T[-64]
    call mmerge
    mv T[-62], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B13
    j B14
    lw T[-65], 0(T[-3])
    la T[-66], n
    lw T[-67], 0(T[-66])
    sub T[-68], T[-65], T[-67]
    seqz T[-68], T[-68]
    beq x0, T[-68], B16
    j B15
    lw T[-69], 0(T[-20])
    la T[-70], array
    la T[-71], array
    li T[-72], 4
    lw T[-73], 0(T[-20])
    mul T[-74], T[-73], T[-72]
    add T[-75], T[-71], T[-74]
    sw T[-69], 0(T[-75])
    lw T[-77], 0(T[-36])
    lw T[-78], 0(T[-20])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-77]
    mv a2, T[-78]
    call mmerge
    mv T[-76], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B16
    j B17
    addi T[-79], sp, 140
    lw T[-80], 0(T[-4])
    la T[-81], n
    lw T[-82], 0(T[-81])
    slt T[-83], T[-80], T[-82]
    beq x0, T[-83], B19
    j B18
    la T[-84], array
    li T[-85], 4
    lw T[-86], 0(T[-36])
    li T[-87], 1
    add T[-88], T[-86], T[-87]
    mul T[-89], T[-88], T[-85]
    add T[-90], T[-84], T[-89]
    lw T[-91], 0(T[-90])
    li T[-92], 1
    li T[-94], 0
    sub T[-93], T[-94], T[-92]
    sub T[-95], T[-91], T[-93]
    snez T[-95], T[-95]
    sw T[-95], 0(T[-79])
    j B20
    li T[-96], 0
    sw T[-96], 0(T[-79])
    j B20
    lw T[-97], 0(T[-79])
    beq x0, T[-97], B22
    j B21
    lw T[-99], 0(T[-36])
    lw T[-100], 0(T[-36])
    li T[-101], 1
    add T[-102], T[-100], T[-101]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-99]
    mv a2, T[-102]
    call mmerge
    mv T[-98], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B22
    j B23
    addi T[-103], sp, 144
    lw T[-104], 0(T[-4])
    li T[-105], 1
    sgt T[-106], T[-104], T[-105]
    beq x0, T[-106], B25
    j B24
    la T[-107], array
    li T[-108], 4
    lw T[-109], 0(T[-36])
    li T[-110], 1
    sub T[-111], T[-109], T[-110]
    mul T[-112], T[-111], T[-108]
    add T[-113], T[-107], T[-112]
    lw T[-114], 0(T[-113])
    li T[-115], 1
    li T[-117], 0
    sub T[-116], T[-117], T[-115]
    sub T[-118], T[-114], T[-116]
    snez T[-118], T[-118]
    sw T[-118], 0(T[-103])
    j B26
    li T[-119], 0
    sw T[-119], 0(T[-103])
    j B26
    lw T[-120], 0(T[-103])
    beq x0, T[-120], B28
    j B27
    lw T[-122], 0(T[-36])
    lw T[-123], 0(T[-36])
    li T[-124], 1
    sub T[-125], T[-123], T[-124]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-122]
    mv a2, T[-125]
    call mmerge
    mv T[-121], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B28
    j B29
    addi T[-126], sp, 148
    lw T[-127], 0(T[-3])
    la T[-128], n
    lw T[-129], 0(T[-128])
    slt T[-130], T[-127], T[-129]
    beq x0, T[-130], B31
    j B30
    la T[-131], array
    li T[-132], 4
    lw T[-133], 0(T[-36])
    la T[-134], n
    lw T[-135], 0(T[-134])
    add T[-136], T[-133], T[-135]
    mul T[-137], T[-136], T[-132]
    add T[-138], T[-131], T[-137]
    lw T[-139], 0(T[-138])
    li T[-140], 1
    li T[-142], 0
    sub T[-141], T[-142], T[-140]
    sub T[-143], T[-139], T[-141]
    snez T[-143], T[-143]
    sw T[-143], 0(T[-126])
    j B32
    li T[-144], 0
    sw T[-144], 0(T[-126])
    j B32
    lw T[-145], 0(T[-126])
    beq x0, T[-145], B34
    j B33
    lw T[-147], 0(T[-36])
    lw T[-148], 0(T[-36])
    la T[-149], n
    lw T[-150], 0(T[-149])
    add T[-151], T[-148], T[-150]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-147]
    mv a2, T[-151]
    call mmerge
    mv T[-146], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B34
    j B35
    addi T[-152], sp, 152
    lw T[-153], 0(T[-3])
    li T[-154], 1
    sgt T[-155], T[-153], T[-154]
    beq x0, T[-155], B37
    j B36
    la T[-156], array
    li T[-157], 4
    lw T[-158], 0(T[-36])
    la T[-159], n
    lw T[-160], 0(T[-159])
    sub T[-161], T[-158], T[-160]
    mul T[-162], T[-161], T[-157]
    add T[-163], T[-156], T[-162]
    lw T[-164], 0(T[-163])
    li T[-165], 1
    li T[-167], 0
    sub T[-166], T[-167], T[-165]
    sub T[-168], T[-164], T[-166]
    snez T[-168], T[-168]
    sw T[-168], 0(T[-152])
    j B38
    li T[-169], 0
    sw T[-169], 0(T[-152])
    j B38
    lw T[-170], 0(T[-152])
    beq x0, T[-170], B40
    j B39
    lw T[-172], 0(T[-36])
    lw T[-173], 0(T[-36])
    la T[-174], n
    lw T[-175], 0(T[-174])
    sub T[-176], T[-173], T[-175]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-172]
    mv a2, T[-176]
    call mmerge
    mv T[-171], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B40
    j B41
    addi T[-177], sp, 156
    addi T[-178], sp, 160
    la T[-179], array
    li T[-180], 4
    li T[-181], 0
    mul T[-182], T[-181], T[-180]
    add T[-183], T[-179], T[-182]
    lw T[-184], 0(T[-183])
    li T[-185], 1
    li T[-187], 0
    sub T[-186], T[-187], T[-185]
    sub T[-188], T[-184], T[-186]
    snez T[-188], T[-188]
    beq x0, T[-188], B43
    j B42
    la T[-189], array
    li T[-190], 4
    lw T[-191], 0(T[-20])
    mul T[-192], T[-191], T[-190]
    add T[-193], T[-189], T[-192]
    lw T[-194], 0(T[-193])
    li T[-195], 1
    li T[-197], 0
    sub T[-196], T[-197], T[-195]
    sub T[-198], T[-194], T[-196]
    snez T[-198], T[-198]
    sw T[-198], 0(T[-178])
    j B44
    li T[-199], 0
    sw T[-199], 0(T[-178])
    j B44
    lw T[-200], 0(T[-178])
    beq x0, T[-200], B46
    j B45
    li T[-202], 0
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-202]
    call findfa
    mv T[-201], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    lw T[-204], 0(T[-20])
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-204]
    call findfa
    mv T[-203], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    sub T[-205], T[-201], T[-203]
    seqz T[-205], T[-205]
    sw T[-205], 0(T[-177])
    j B47
    li T[-206], 0
    sw T[-206], 0(T[-177])
    j B47
    lw T[-207], 0(T[-177])
    beq x0, T[-207], B49
    j B48
    li T[-208], 1
    sw T[-208], 0(T[-15])
    addi T[-209], sp, 164
    lw T[-210], 0(T[-13])
    li T[-211], 1
    add T[-212], T[-210], T[-211]
    sw T[-212], 0(T[-209])
    lw T[-214], 0(T[-209])
    mv a0, T[-214]
    call putint
    mv T[-213], a0
    li T[-216], 10
    mv a0, T[-216]
    call putch
    mv T[-215], a0
    j B49
    j B10
    lw T[-220], 0(T[-15])
    li T[-222], 0
    sub T[-221], T[-222], T[-220]
    seqz T[-221], T[-221]
    beq x0, T[-221], B52
    j B51
    li T[-224], 1
    li T[-226], 0
    sub T[-225], T[-226], T[-224]
    mv a0, T[-225]
    call putint
    mv T[-223], a0
    li T[-228], 10
    mv a0, T[-228]
    call putch
    mv T[-227], a0
    j B52
    j B2
main Main()
main do_liveness_analysis() done
main Build() done
simplify reg MkWorklist insert T[-237]
simplify reg MkWorklist insert T[-236]
simplify reg MkWorklist insert T[-235]
simplify reg MkWorklist insert T[-234]
simplify reg MkWorklist insert T[-233]
simplify reg MkWorklist insert T[-232]
simplify reg MkWorklist insert T[-231]
simplify reg MkWorklist insert T[-230]
freeze reg MkWorklist insert T[-229]
freeze reg MkWorklist insert T[-228]
freeze reg MkWorklist insert T[-227]
simplify reg MkWorklist insert T[-226]
freeze reg MkWorklist insert T[-225]
simplify reg MkWorklist insert T[-224]
freeze reg MkWorklist insert T[-223]
simplify reg MkWorklist insert T[-222]
simplify reg MkWorklist insert T[-221]
simplify reg MkWorklist insert T[-220]
simplify reg MkWorklist insert T[-219]
simplify reg MkWorklist insert T[-218]
simplify reg MkWorklist insert T[-217]
freeze reg MkWorklist insert T[-216]
freeze reg MkWorklist insert T[-215]
freeze reg MkWorklist insert T[-214]
freeze reg MkWorklist insert T[-213]
simplify reg MkWorklist insert T[-212]
simplify reg MkWorklist insert T[-211]
simplify reg MkWorklist insert T[-210]
simplify reg MkWorklist insert T[-209]
simplify reg MkWorklist insert T[-208]
simplify reg MkWorklist insert T[-207]
simplify reg MkWorklist insert T[-206]
simplify reg MkWorklist insert T[-205]
freeze reg MkWorklist insert T[-204]
freeze reg MkWorklist insert T[-203]
freeze reg MkWorklist insert T[-202]
freeze reg MkWorklist insert T[-201]
simplify reg MkWorklist insert T[-200]
simplify reg MkWorklist insert T[-199]
simplify reg MkWorklist insert T[-198]
simplify reg MkWorklist insert T[-197]
simplify reg MkWorklist insert T[-196]
simplify reg MkWorklist insert T[-195]
spill reg MkWorklist insert T[-194]
simplify reg MkWorklist insert T[-193]
simplify reg MkWorklist insert T[-192]
simplify reg MkWorklist insert T[-191]
simplify reg MkWorklist insert T[-190]
spill reg MkWorklist insert T[-189]
simplify reg MkWorklist insert T[-188]
simplify reg MkWorklist insert T[-187]
simplify reg MkWorklist insert T[-186]
simplify reg MkWorklist insert T[-185]
spill reg MkWorklist insert T[-184]
simplify reg MkWorklist insert T[-183]
simplify reg MkWorklist insert T[-182]
simplify reg MkWorklist insert T[-181]
simplify reg MkWorklist insert T[-180]
spill reg MkWorklist insert T[-179]
spill reg MkWorklist insert T[-178]
spill reg MkWorklist insert T[-177]
freeze reg MkWorklist insert T[-176]
simplify reg MkWorklist insert T[-175]
simplify reg MkWorklist insert T[-174]
simplify reg MkWorklist insert T[-173]
spill reg MkWorklist insert T[-172]
freeze reg MkWorklist insert T[-171]
simplify reg MkWorklist insert T[-170]
simplify reg MkWorklist insert T[-169]
simplify reg MkWorklist insert T[-168]
simplify reg MkWorklist insert T[-167]
simplify reg MkWorklist insert T[-166]
simplify reg MkWorklist insert T[-165]
spill reg MkWorklist insert T[-164]
simplify reg MkWorklist insert T[-163]
simplify reg MkWorklist insert T[-162]
simplify reg MkWorklist insert T[-161]
spill reg MkWorklist insert T[-160]
spill reg MkWorklist insert T[-159]
spill reg MkWorklist insert T[-158]
spill reg MkWorklist insert T[-157]
spill reg MkWorklist insert T[-156]
simplify reg MkWorklist insert T[-155]
simplify reg MkWorklist insert T[-154]
simplify reg MkWorklist insert T[-153]
spill reg MkWorklist insert T[-152]
freeze reg MkWorklist insert T[-151]
simplify reg MkWorklist insert T[-150]
simplify reg MkWorklist insert T[-149]
simplify reg MkWorklist insert T[-148]
spill reg MkWorklist insert T[-147]
freeze reg MkWorklist insert T[-146]
simplify reg MkWorklist insert T[-145]
simplify reg MkWorklist insert T[-144]
simplify reg MkWorklist insert T[-143]
simplify reg MkWorklist insert T[-142]
simplify reg MkWorklist insert T[-141]
simplify reg MkWorklist insert T[-140]
spill reg MkWorklist insert T[-139]
simplify reg MkWorklist insert T[-138]
simplify reg MkWorklist insert T[-137]
simplify reg MkWorklist insert T[-136]
spill reg MkWorklist insert T[-135]
spill reg MkWorklist insert T[-134]
spill reg MkWorklist insert T[-133]
spill reg MkWorklist insert T[-132]
spill reg MkWorklist insert T[-131]
simplify reg MkWorklist insert T[-130]
simplify reg MkWorklist insert T[-129]
simplify reg MkWorklist insert T[-128]
simplify reg MkWorklist insert T[-127]
spill reg MkWorklist insert T[-126]
freeze reg MkWorklist insert T[-125]
simplify reg MkWorklist insert T[-124]
simplify reg MkWorklist insert T[-123]
freeze reg MkWorklist insert T[-122]
freeze reg MkWorklist insert T[-121]
simplify reg MkWorklist insert T[-120]
simplify reg MkWorklist insert T[-119]
simplify reg MkWorklist insert T[-118]
simplify reg MkWorklist insert T[-117]
simplify reg MkWorklist insert T[-116]
simplify reg MkWorklist insert T[-115]
spill reg MkWorklist insert T[-114]
simplify reg MkWorklist insert T[-113]
simplify reg MkWorklist insert T[-112]
simplify reg MkWorklist insert T[-111]
spill reg MkWorklist insert T[-110]
spill reg MkWorklist insert T[-109]
spill reg MkWorklist insert T[-108]
spill reg MkWorklist insert T[-107]
simplify reg MkWorklist insert T[-106]
simplify reg MkWorklist insert T[-105]
simplify reg MkWorklist insert T[-104]
spill reg MkWorklist insert T[-103]
freeze reg MkWorklist insert T[-102]
simplify reg MkWorklist insert T[-101]
simplify reg MkWorklist insert T[-100]
freeze reg MkWorklist insert T[-99]
freeze reg MkWorklist insert T[-98]
simplify reg MkWorklist insert T[-97]
simplify reg MkWorklist insert T[-96]
simplify reg MkWorklist insert T[-95]
simplify reg MkWorklist insert T[-94]
simplify reg MkWorklist insert T[-93]
simplify reg MkWorklist insert T[-92]
spill reg MkWorklist insert T[-91]
simplify reg MkWorklist insert T[-90]
simplify reg MkWorklist insert T[-89]
simplify reg MkWorklist insert T[-88]
spill reg MkWorklist insert T[-87]
spill reg MkWorklist insert T[-86]
spill reg MkWorklist insert T[-85]
spill reg MkWorklist insert T[-84]
simplify reg MkWorklist insert T[-83]
simplify reg MkWorklist insert T[-82]
simplify reg MkWorklist insert T[-81]
simplify reg MkWorklist insert T[-80]
spill reg MkWorklist insert T[-79]
freeze reg MkWorklist insert T[-78]
freeze reg MkWorklist insert T[-77]
freeze reg MkWorklist insert T[-76]
simplify reg MkWorklist insert T[-75]
simplify reg MkWorklist insert T[-74]
simplify reg MkWorklist insert T[-73]
simplify reg MkWorklist insert T[-72]
spill reg MkWorklist insert T[-71]
simplify reg MkWorklist insert T[-70]
spill reg MkWorklist insert T[-69]
simplify reg MkWorklist insert T[-68]
simplify reg MkWorklist insert T[-67]
simplify reg MkWorklist insert T[-66]
simplify reg MkWorklist insert T[-65]
freeze reg MkWorklist insert T[-64]
freeze reg MkWorklist insert T[-63]
freeze reg MkWorklist insert T[-62]
simplify reg MkWorklist insert T[-61]
simplify reg MkWorklist insert T[-60]
simplify reg MkWorklist insert T[-59]
simplify reg MkWorklist insert T[-58]
spill reg MkWorklist insert T[-57]
simplify reg MkWorklist insert T[-56]
spill reg MkWorklist insert T[-55]
simplify reg MkWorklist insert T[-54]
simplify reg MkWorklist insert T[-53]
simplify reg MkWorklist insert T[-52]
simplify reg MkWorklist insert T[-51]
simplify reg MkWorklist insert T[-50]
simplify reg MkWorklist insert T[-49]
simplify reg MkWorklist insert T[-48]
spill reg MkWorklist insert T[-47]
simplify reg MkWorklist insert T[-46]
spill reg MkWorklist insert T[-45]
simplify reg MkWorklist insert T[-44]
simplify reg MkWorklist insert T[-43]
simplify reg MkWorklist insert T[-42]
simplify reg MkWorklist insert T[-41]
simplify reg MkWorklist insert T[-40]
simplify reg MkWorklist insert T[-39]
simplify reg MkWorklist insert T[-38]
simplify reg MkWorklist insert T[-37]
spill reg MkWorklist insert T[-36]
simplify reg MkWorklist insert T[-35]
simplify reg MkWorklist insert T[-34]
simplify reg MkWorklist insert T[-33]
freeze reg MkWorklist insert T[-32]
freeze reg MkWorklist insert T[-31]
simplify reg MkWorklist insert T[-30]
simplify reg MkWorklist insert T[-29]
simplify reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-27]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
simplify reg MkWorklist insert T[-24]
simplify reg MkWorklist insert T[-23]
simplify reg MkWorklist insert T[-22]
simplify reg MkWorklist insert T[-21]
spill reg MkWorklist insert T[-20]
freeze reg MkWorklist insert T[-19]
simplify reg MkWorklist insert T[-18]
freeze reg MkWorklist insert T[-17]
simplify reg MkWorklist insert T[-16]
spill reg MkWorklist insert T[-15]
simplify reg MkWorklist insert T[-14]
spill reg MkWorklist insert T[-13]
simplify reg MkWorklist insert T[-12]
simplify reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-8]
simplify reg MkWorklist insert T[-7]
simplify reg MkWorklist insert T[-6]
simplify reg MkWorklist insert T[-5]
spill reg MkWorklist insert T[-4]
spill reg MkWorklist insert T[-3]
main MkWorklist() done
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main AssignColors() done
replace regs

replace regs

main
after compute reg_used
after prologue
end of emitend
