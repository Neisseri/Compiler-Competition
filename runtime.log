--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef a) ;))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) func ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) p)) ) 
                (block { 
                    (blockItem 
                        (stmt 
                            (lVal p) = 
                            (exp 
                                (addExp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (lVal p))))) - 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 1))))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal p)))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef b) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal a) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 10))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal b) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp func ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal a)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal b)))))) ;)) }))) <EOF>)
visitCompUnit
visitVarDecl: int start
visitVarDecl: ident: a
visitCompUnit: funcDef
construct funct block: func
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: b
visitPrimaryExp_ number
visitAssign done!
visitCall ident: func
visitFuncRParams
visitCall args_list size: 1
visitAssign done!
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitVarDef int @a
Info: visitFuncDefint @func(int @p)
Info: visitParamDefint @p
Info: visitBlock
Info: visitStatementAssign@p = @p-1
Info: visitAssignStmtAssign@p = @p-1
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitAssignStmtint
Info: visitExpr@p-1
Info: visitBinopExpr@p-1
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ff0dbe0770
Info: visitStatementReturn @p
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitReturnStmtReturn @p#1function has returnscope id1
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitVarDef int @b
Info: visitStatementAssign@a = 10
Info: visitAssignStmtAssign@a = 10
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmtint
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55ff0dbd96e0
Info: visitStatementAssign@b = Call @func(@a)
Info: visitAssignStmtAssign@b = Call @func(@a)
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmtint
Info: visitExprCall @func(@a)
Info: visiCalltExprCall @func(@a)
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitStatementReturn @b
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitReturnStmtReturn @b#4function has returnscope id3
ast: 
Program
  int @a#0
  int @func(int @p#1)
    {
      Assign@p#1 = @p#1-1
      Return @p#1
    }
  int @main()
    {
      int @b#4
      Assign@a#0 = 10
      Assign@b#4 = Call @func(@a#0)
      Return @b#4
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visit decl global var
visit decl global var done
visitFunction func
visitFunction param decl: p#1
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue p#1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionLValue p#1
function func has 6 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#0
visitStatement
visitExpression
visitExpressionLValue b#4
function main has 7 regs
B2:
  prev: 
  succ: 
B3:
  prev: 
  succ: 

B2:
  prev: 
  succ: 

entryB2
reverse_postorderB2
B2:
  doms: 
  domed_by: B2 

B2:
  DF: 

ir:
; module
@a#0 = global int, 4
define i32 @main(){
B2:
  %2 = 10
  %3 = loadaddr @a#0
  store i32 %2, ptr %3
  %5 = loadaddr @a#0
  %6 = load i32, ptr %5
  %4 = call i32 @func(i32 %6)
  ret i32 %4

}
define i32 @func(i32){
B0:
  %4 = 1
  %5 = sub i32 %1, %4
  ret i32 %5

}
--------------------------- building riscv ---------------------------
riscv: 
