--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) get_one ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) a)) ) 
                (block { 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 1))))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) deepWhileBr ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) a) , 
                    (funcFParam 
                        (bType int) b)) ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef c) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal c) = 
                            (exp 
                                (addExp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp 
                                                (primaryExp 
                                                    (lVal a))))) + 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (lVal b)))))) ;)) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal c)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 75))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef d) ;))) 
                                    (blockItem 
                                        (stmt 
                                            (lVal d) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 42))))))) ;)) 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal c)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 100))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal c) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal c))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal d)))))) ;)) 
                                                    (blockItem 
                                                        (stmt if ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (eqExp 
                                                                            (relExp 
                                                                                (relExp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal c)))))) > 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 99))))))))))) ) 
                                                            (stmt 
                                                                (block { 
                                                                    (blockItem 
                                                                        (decl 
                                                                            (varDecl 
                                                                                (bType int) 
                                                                                (varDef e) ;))) 
                                                                    (blockItem 
                                                                        (stmt 
                                                                            (lVal e) = 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (lVal d)))) * 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 2))))))) ;)) 
                                                                    (blockItem 
                                                                        (stmt if ( 
                                                                            (cond 
                                                                                (lOrExp 
                                                                                    (lAndExp 
                                                                                        (eqExp 
                                                                                            (eqExp 
                                                                                                (relExp 
                                                                                                    (addExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp get_one ( 
                                                                                                                (funcRParams 
                                                                                                                    (funcRParam 
                                                                                                                        (exp 
                                                                                                                            (addExp 
                                                                                                                                (mulExp 
                                                                                                                                    (unaryExp 
                                                                                                                                        (primaryExp 
                                                                                                                                            (number 
                                                                                                                                                (intConst 0))))))))) )))))) == 
                                                                                            (relExp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (number 
                                                                                                                    (intConst 1))))))))))) ) 
                                                                            (stmt 
                                                                                (block { 
                                                                                    (blockItem 
                                                                                        (stmt 
                                                                                            (lVal c) = 
                                                                                            (exp 
                                                                                                (addExp 
                                                                                                    (mulExp 
                                                                                                        (mulExp 
                                                                                                            (unaryExp 
                                                                                                                (primaryExp 
                                                                                                                    (lVal e)))) * 
                                                                                                        (unaryExp 
                                                                                                            (primaryExp 
                                                                                                                (number 
                                                                                                                    (intConst 2))))))) ;)) })))) })))) })))) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp ( 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal c)))))) )))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef p) ;))) 
                    (blockItem 
                        (stmt 
                            (lVal p) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 2))))))) ;)) 
                    (blockItem 
                        (stmt 
                            (lVal p) = 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp deepWhileBr ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal p))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal p)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putint ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal p)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: get_one
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: deepWhileBr
visitVarDecl: int start
visitVarDecl: ident: c
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: d
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: e
visitPrimaryExp_ number
visitAssign done!
visitCall ident: get_one
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitBlock done!
visitBlock done!
visitBlock done!
visitPrimaryExp_ exp
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: p
visitPrimaryExp_ number
visitAssign done!
visitCall ident: deepWhileBr
visitFuncRParams
visitCall args_list size: 2
visitAssign done!
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitCall args_list size: 1
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefi32 @get_one(i32 @a)
Info: visitParamDefi32 @a
Info: visitBlock
Info: visitStatementReturn 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ba544d60e0
Info: visitReturnStmtReturn 1function has returnscope id1
Info: visitFuncDefi32 @deepWhileBr(i32 @a, i32 @b)
Info: visitParamDefi32 @a
Info: visitParamDefi32 @b
Info: visitBlock
Info: visitVarDef i32 @c
Info: visitStatementAssign@c = @a+@b
Info: visitAssignStmtAssign@c = @a+@b
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmti32
Info: visitExpr@a+@b
Info: visitBinopExpr@a+@b
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitStatementWhile
Info: visitExpr@c<75
Info: visitBinopExpr@c<75
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr75
Info: visitIntLiteralExpr75
ret->type 0x55ba544d6190
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @d
Info: visitStatementAssign@d = 42
Info: visitAssignStmtAssign@d = 42
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitAssignStmti32
Info: visitExpr42
Info: visitIntLiteralExpr42
ret->type 0x55ba544d5fa0
Info: visitStatementIfElse
Info: visitExpr@c<100
Info: visitBinopExpr@c<100
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr100
Info: visitIntLiteralExpr100
ret->type 0x55ba544d6110
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@c = @c+@d
Info: visitAssignStmtAssign@c = @c+@d
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmti32
Info: visitExpr@c+@d
Info: visitBinopExpr@c+@d
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitStatementIfElse
Info: visitExpr@c>99
Info: visitBinopExpr@c>99
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitExpr99
Info: visitIntLiteralExpr99
ret->type 0x55ba544d63a0
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @e
Info: visitStatementAssign@e = @d*2
Info: visitAssignStmtAssign@e = @d*2
Info: visitExpr@e
Info: visitLvalExpr@e
Info: visitAssignStmti32
Info: visitExpr@d*2
Info: visitBinopExpr@d*2
Info: visitExpr@d
Info: visitLvalExpr@d
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55ba544d6420
Info: visitStatementIfElse
Info: visitExprCall @get_one(0)==1
Info: visitBinopExprCall @get_one(0)==1
Info: visitExprCall @get_one(0)
Info: visiCalltExprCall @get_one(0)
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ba544d64a0
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55ba544d6520
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@c = @e*2
Info: visitAssignStmtAssign@c = @e*2
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitAssignStmti32
Info: visitExpr@e*2
Info: visitBinopExpr@e*2
Info: visitExpr@e
Info: visitLvalExpr@e
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55ba544d6550
Info: visitStatementReturn @c
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitReturnStmtReturn @c#4function has returnscope id3
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitVarDef i32 @p
Info: visitStatementAssign@p = 2
Info: visitAssignStmtAssign@p = 2
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitAssignStmti32
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55ba544d6580
Info: visitStatementAssign@p = Call @deepWhileBr(@p, @p)
Info: visitAssignStmtAssign@p = Call @deepWhileBr(@p, @p)
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitAssignStmti32
Info: visitExprCall @deepWhileBr(@p, @p)
Info: visiCalltExprCall @deepWhileBr(@p, @p)
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitStatementCall @putint(@p)
Info: visitExprStmtCall @putint(@p)
Info: visitExprCall @putint(@p)
Info: visiCalltExprCall @putint(@p)
Info: use of undeclared function putint
Info: visitExpr@p
Info: visitLvalExpr@p
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55ba544d6610
Info: visitReturnStmtReturn 0function has returnscope id10
ast: 
Program
  i32 @get_one(i32 @a#1)
    {
      Return 1
    }
  i32 @deepWhileBr(i32 @a#3, i32 @b#3)
    {
      i32 @c#4
      Assign@c#4 = @a#3+@b#3
      While        @c#4<75
        {
          i32 @d#6
          Assign@d#6 = 42
          If            @c#4<100
            {
              Assign@c#4 = @c#4+@d#6
              If                @c#4>99
                {
                  i32 @e#8
                  Assign@e#8 = @d#6*2
                  If                    Call @get_one(0)==1
                    {
                      Assign@c#4 = @e#8*2
                    }
                }
            }
        }
      Return @c#4
    }
  i32 @main()
    {
      i32 @p#11
      Assign@p#11 = 2
      Assign@p#11 = Call @deepWhileBr(@p#11, @p#11)
      Call @putint        @p#11
      Return 0
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visitFunction get_one
visitFunction param decl: a#1
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function get_one has 3 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visitFunction deepWhileBr
visitFunction param decl: a#3
visitFunction param decl: b#3
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue a#3
visitExpression
visitExpressionLValue b#3
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#4
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#4
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#4
visitExpression
visitExpressionLValue d#6
visitStatement
visitExpression
visitExpression
visitExpressionLValue c#4
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue d#6
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue e#8
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionLValue c#4
function deepWhileBr has 34 regs
B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B8 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 B11 
  succ: B3 
B9:
  prev: B7 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 B14 
  succ: B8 
B12:
  prev: B10 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B14 
B14:
  prev: B12 B13 
  succ: B11 
B15:
  prev: 
  succ: 

B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B8 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 B11 
  succ: B3 
B9:
  prev: B7 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 B14 
  succ: B8 
B12:
  prev: B10 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B14 
B14:
  prev: B12 B13 
  succ: B11 

entryB2
B3
B4
B5
B6
B7
B8
B9
B10
B11
B12
B13
B14
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB7
reverse_postorderB9
reverse_postorderB10
reverse_postorderB12
reverse_postorderB13
reverse_postorderB14
reverse_postorderB11
reverse_postorderB8
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB7
reverse_postorderB9
reverse_postorderB10
reverse_postorderB12
reverse_postorderB13
reverse_postorderB14
reverse_postorderB11
reverse_postorderB8
compute_dom_fro bb: B3 func: deepWhileBr
compute_dom_fro bb: B3 func: deepWhileBr
compute_dom_fro bb: B3 func: deepWhileBr
compute_dom_fro bb: B8 func: deepWhileBr
compute_dom_fro bb: B8 func: deepWhileBr
compute_dom_fro bb: B8 func: deepWhileBr
compute_dom_fro bb: B11 func: deepWhileBr
compute_dom_fro bb: B11 func: deepWhileBr
compute_dom_fro bb: B11 func: deepWhileBr
compute_dom_fro bb: B14 func: deepWhileBr
B2:
  doms: B3 
  domed_by: B2 
B3:
  doms: B4 B5 
  domed_by: B2 B3 
B4:
  doms: B6 
  domed_by: B2 B3 B4 
B5:
  doms: 
  domed_by: B2 B3 B5 
B6:
  doms: B7 B8 
  domed_by: B2 B3 B4 B6 
B7:
  doms: B9 
  domed_by: B2 B3 B4 B6 B7 
B8:
  doms: 
  domed_by: B2 B3 B4 B6 B8 
B9:
  doms: B10 B11 
  domed_by: B2 B3 B4 B6 B7 B9 
B10:
  doms: B12 
  domed_by: B2 B3 B4 B6 B7 B9 B10 
B11:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B11 
B12:
  doms: B13 B14 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 
B13:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B13 
B14:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 B12 B14 

B2:
  DF: 
B3:
  DF: 
B4:
  DF: B3 
B5:
  DF: 
B6:
  DF: B3 
B7:
  DF: B8 
B8:
  DF: B3 
B9:
  DF: B8 
B10:
  DF: B11 
B11:
  DF: B8 
B12:
  DF: B11 
B13:
  DF: B14 
B14:
  DF: B11 

visitFunction main
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue p#11
visitExpression
visitExpressionLValue p#11
visitStatement
visitExpression
visitExpression
visitExpressionLValue p#11
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 8 regs
B16:
  prev: 
  succ: 
B17:
  prev: 
  succ: 

B16:
  prev: 
  succ: 

entryB16
reverse_postorderB16
B16:
  doms: 
  domed_by: B16 

B16:
  DF: 

ir_origin:
; module
define i32 @main(){
B16:
  %r1 = alloca i32, i32 4
  %r2 = add i32 0, 2 ; loadint
  store i32 %r2, ptr %r1
  %r4 = load i32, ptr %r1
  %r5 = load i32, ptr %r1
  %r3 = call i32 @deepWhileBr(i32 %r4, i32 %r5)
  store i32 %r3, ptr %r1
  %r7 = load i32, ptr %r1
  %r6 = call i32 @putint(i32 %r7)
  %r8 = add i32 0, 0 ; loadint
  ret i32 %r8

}
define i32 @deepWhileBr(i32 %r1, i32 %r2){
B2:
  %r3 = alloca i32, i32 4
  store i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store i32 %r2, ptr %r4
  %r5 = alloca i32, i32 4
  %r6 = load i32, ptr %r3
  %r7 = load i32, ptr %r4
  %r8 = add i32 %r6, %r7
  store i32 %r8, ptr %r5
  br label %B3

B3:
  %r9 = load i32, ptr %r5
  %r10 = add i32 0, 75 ; loadint
  %r11 = icmp slt i32 %r9, %r10
  br i1 %r11, label %B4, label %B5

B4:
  %r12 = alloca i32, i32 4
  %r13 = add i32 0, 42 ; loadint
  store i32 %r13, ptr %r12
  br label %B6

B5:
  %r34 = load i32, ptr %r5
  ret i32 %r34

B6:
  %r14 = load i32, ptr %r5
  %r15 = add i32 0, 100 ; loadint
  %r16 = icmp slt i32 %r14, %r15
  br i1 %r16, label %B7, label %B8

B7:
  %r17 = load i32, ptr %r5
  %r18 = load i32, ptr %r12
  %r19 = add i32 %r17, %r18
  store i32 %r19, ptr %r5
  br label %B9

B8:
  br label %B3

B9:
  %r20 = load i32, ptr %r5
  %r21 = add i32 0, 99 ; loadint
  %r22 = icmp sgt i32 %r20, %r21
  br i1 %r22, label %B10, label %B11

B10:
  %r23 = alloca i32, i32 4
  %r24 = load i32, ptr %r12
  %r25 = add i32 0, 2 ; loadint
  %r26 = mul i32 %r24, %r25
  store i32 %r26, ptr %r23
  br label %B12

B11:
  br label %B8

B12:
  %r28 = add i32 0, 0 ; loadint
  %r27 = call i32 @get_one(i32 %r28)
  %r29 = add i32 0, 1 ; loadint
  %r30 = icmp eq i32 %r27, %r29
  br i1 %r30, label %B13, label %B14

B13:
  %r31 = load i32, ptr %r23
  %r32 = add i32 0, 2 ; loadint
  %r33 = mul i32 %r31, %r32
  store i32 %r33, ptr %r5
  br label %B14

B14:
  br label %B11

}
define i32 @get_one(i32 %r1){
B0:
  %r2 = alloca i32, i32 4
  store i32 %r1, ptr %r2
  %r3 = add i32 0, 1 ; loadint
  ret i32 %r3

}
---------------------------------ir after mem2reg-------------------------------------
; module
define i32 @main(){
B16:
  %r2 = add i32 0, 2 ; loadint
  %r3 = call i32 @deepWhileBr(i32 %r2, i32 %r2)
  %r6 = call i32 @putint(i32 %r3)
  %r8 = add i32 0, 0 ; loadint
  ret i32 %r8

}
define i32 @deepWhileBr(i32 %r1, i32 %r2){
B2:
  %r8 = add i32 %r1, %r2
  br label %B3

B3:
  %r42 = phi i32 [ %r1, %B2 ], [ %r41, %B8 ]
  %r39 = phi i32 [ %r1, %B2 ], [ %r13, %B8 ]
  %r36 = phi i32 [ %r8, %B2 ], [ %r35, %B8 ]
  %r10 = add i32 0, 75 ; loadint
  %r11 = icmp slt i32 %r36, %r10
  br i1 %r11, label %B4, label %B5

B4:
  %r13 = add i32 0, 42 ; loadint
  br label %B6

B5:
  ret i32 %r36

B6:
  %r15 = add i32 0, 100 ; loadint
  %r16 = icmp slt i32 %r36, %r15
  br i1 %r16, label %B7, label %B8

B7:
  %r19 = add i32 %r36, %r13
  br label %B9

B8:
  %r41 = phi i32 [ %r42, %B6 ], [ %r40, %B11 ]
  %r35 = phi i32 [ %r36, %B6 ], [ %r38, %B11 ]
  br label %B3

B9:
  %r21 = add i32 0, 99 ; loadint
  %r22 = icmp sgt i32 %r19, %r21
  br i1 %r22, label %B10, label %B11

B10:
  %r25 = add i32 0, 2 ; loadint
  %r26 = mul i32 %r13, %r25
  br label %B12

B11:
  %r40 = phi i32 [ %r42, %B9 ], [ %r26, %B14 ]
  %r38 = phi i32 [ %r19, %B9 ], [ %r37, %B14 ]
  br label %B8

B12:
  %r28 = add i32 0, 0 ; loadint
  %r27 = call i32 @get_one(i32 %r28)
  %r29 = add i32 0, 1 ; loadint
  %r30 = icmp eq i32 %r27, %r29
  br i1 %r30, label %B13, label %B14

B13:
  %r32 = add i32 0, 2 ; loadint
  %r33 = mul i32 %r26, %r32
  br label %B14

B14:
  %r37 = phi i32 [ %r19, %B12 ], [ %r33, %B13 ]
  br label %B11

}
define i32 @get_one(i32 %r1){
B0:
  %r3 = add i32 0, 1 ; loadint
  ret i32 %r3

}
---------------------------------ir -------------------------------------
; module
define i32 @main(){
B16:
  %r2 = add i32 0, 2 ; loadint
  %r3 = call i32 @deepWhileBr(i32 %r2, i32 %r2)
  %r6 = call i32 @putint(i32 %r3)
  %r8 = add i32 0, 0 ; loadint
  ret i32 %r8

}
define i32 @deepWhileBr(i32 %r1, i32 %r2){
B2:
  %r8 = add i32 %r1, %r2
  br label %B3

B3:
  %r42 = phi i32 [ %r1, %B2 ], [ %r41, %B8 ]
  %r39 = phi i32 [ %r1, %B2 ], [ %r13, %B8 ]
  %r36 = phi i32 [ %r8, %B2 ], [ %r35, %B8 ]
  %r10 = add i32 0, 75 ; loadint
  %r11 = icmp slt i32 %r36, %r10
  br i1 %r11, label %B4, label %B5

B4:
  %r13 = add i32 0, 42 ; loadint
  br label %B6

B5:
  ret i32 %r36

B6:
  %r15 = add i32 0, 100 ; loadint
  %r16 = icmp slt i32 %r36, %r15
  br i1 %r16, label %B7, label %B8

B7:
  %r19 = add i32 %r36, %r13
  br label %B9

B8:
  %r41 = phi i32 [ %r42, %B6 ], [ %r40, %B11 ]
  %r35 = phi i32 [ %r36, %B6 ], [ %r38, %B11 ]
  br label %B3

B9:
  %r21 = add i32 0, 99 ; loadint
  %r22 = icmp sgt i32 %r19, %r21
  br i1 %r22, label %B10, label %B11

B10:
  %r25 = add i32 0, 2 ; loadint
  %r26 = mul i32 %r13, %r25
  br label %B12

B11:
  %r40 = phi i32 [ %r42, %B9 ], [ %r26, %B14 ]
  %r38 = phi i32 [ %r19, %B9 ], [ %r37, %B14 ]
  br label %B8

B12:
  %r28 = add i32 0, 0 ; loadint
  %r27 = call i32 @get_one(i32 %r28)
  %r29 = add i32 0, 1 ; loadint
  %r30 = icmp eq i32 %r27, %r29
  br i1 %r30, label %B13, label %B14

B13:
  %r32 = add i32 0, 2 ; loadint
  %r33 = mul i32 %r26, %r32
  br label %B14

B14:
  %r37 = phi i32 [ %r19, %B12 ], [ %r33, %B13 ]
  br label %B11

}
define i32 @get_one(i32 %r1){
B0:
  %r3 = add i32 0, 1 ; loadint
  ret i32 %r3

}
--------------------------- building riscv ---------------------------
riscv: 
    li T[-2], 2
    mv a1, T[-2]
    mv a2, T[-2]
    call deepWhileBr
    mv T[-3], a0
    mv a0, T[-3]
    call putint
    mv T[-6], a0
    li T[-8], 0
    mv a0, T[-8]
    ret
T[-1] B3
T[-41] B9
T[-1] B3
T[-13] B9
T[-8] B3
T[-35] B9
T[-42] B7
T[-40] B12
T[-36] B7
T[-38] B12
T[-42] B10
T[-26] B15
T[-19] B10
T[-37] B15
T[-19] B13
T[-33] B14
    add T[-8], a1, a2
    j B4
    phi T[-42] = T[-1] B3
[ T[-1], B3] T[-41] B9
[ T[-41], B9] 
    phi T[-39] = T[-1] B3
[ T[-1], B3] T[-13] B9
[ T[-13], B9] 
    phi T[-36] = T[-8] B3
[ T[-8], B3] T[-35] B9
[ T[-35], B9] 
    li T[-10], 75
    slt T[-11], T[-36], T[-10]
    beq x0, T[-11], B6
    j B5
    li T[-13], 42
    j B7
    mv a0, T[-36]
    ret
    li T[-15], 100
    slt T[-16], T[-36], T[-15]
    beq x0, T[-16], B9
    j B8
    add T[-19], T[-36], T[-13]
    j B10
    phi T[-41] = T[-42] B7
[ T[-42], B7] T[-40] B12
[ T[-40], B12] 
    phi T[-35] = T[-36] B7
[ T[-36], B7] T[-38] B12
[ T[-38], B12] 
    j B4
    li T[-21], 99
    sgt T[-22], T[-19], T[-21]
    beq x0, T[-22], B12
    j B11
    li T[-25], 2
    mul T[-26], T[-13], T[-25]
    j B13
    phi T[-40] = T[-42] B10
[ T[-42], B10] T[-26] B15
[ T[-26], B15] 
    phi T[-38] = T[-19] B10
[ T[-19], B10] T[-37] B15
[ T[-37], B15] 
    j B9
    li T[-28], 0
    sw a1, 48(sp)
    sw a2, 52(sp)
    mv a1, T[-28]
    call get_one
    mv T[-27], a0
    lw a1, 48(sp)
    lw a2, 52(sp)
    li T[-29], 1
    sub T[-30], T[-27], T[-29]
    seqz T[-30], T[-30]
    beq x0, T[-30], B15
    j B14
    li T[-32], 2
    mul T[-33], T[-26], T[-32]
    j B15
    phi T[-37] = T[-19] B13
[ T[-19], B13] T[-33] B14
[ T[-33], B14] 
    j B12
    li T[-3], 1
    mv a0, T[-3]
    ret
?
---------------------------------ir after resolve phi-------------------------------------
get_one:
B16:

B17:
    li T[-3], 1
    mv a0, T[-3]
    ret

---------------------------------ir after resolve phi end --------------------------------
get_one
get_one Main()
get_one do_liveness_analysis() done
get_one Build() done
freeze reg MkWorklist insert T[-3]
get_one MkWorklist() done
get_one Coalesce()
get_one AssignColors() done
replace regs

get_one
after compute reg_used
after prologue
end of emitend
---------------------------------ir after resolve phi-------------------------------------
deepWhileBr:
B2:

B3:
    add T[-8], a1, a2
    mv T[-42], T[-1]
    mv T[-39], T[-1]
    mv T[-36], T[-8]
    j B4

B4:
    li T[-10], 75
    slt T[-11], T[-36], T[-10]
    beq x0, T[-11], B6
    j B5

B5:
    li T[-13], 42
    j B7

B6:
    mv a0, T[-36]
    ret

B7:
    li T[-15], 100
    slt T[-16], T[-36], T[-15]
    beq x0, T[-16], B9
    mv T[-41], T[-42]
    mv T[-35], T[-36]
    j B8

B8:
    add T[-19], T[-36], T[-13]
    j B10

B9:
    mv T[-42], T[-41]
    mv T[-39], T[-13]
    mv T[-36], T[-35]
    j B4

B10:
    li T[-21], 99
    sgt T[-22], T[-19], T[-21]
    beq x0, T[-22], B12
    mv T[-40], T[-42]
    mv T[-38], T[-19]
    j B11

B11:
    li T[-25], 2
    mul T[-26], T[-13], T[-25]
    j B13

B12:
    mv T[-41], T[-40]
    mv T[-35], T[-38]
    j B9

B13:
    li T[-28], 0
    sw a1, 48(sp)
    sw a2, 52(sp)
    mv a1, T[-28]
    call get_one
    mv T[-27], a0
    lw a1, 48(sp)
    lw a2, 52(sp)
    li T[-29], 1
    sub T[-30], T[-27], T[-29]
    seqz T[-30], T[-30]
    beq x0, T[-30], B15
    mv T[-37], T[-19]
    j B14

B14:
    li T[-32], 2
    mul T[-33], T[-26], T[-32]
    mv T[-37], T[-33]
    j B15

B15:
    mv T[-40], T[-26]
    mv T[-38], T[-37]
    j B12

---------------------------------ir after resolve phi end --------------------------------
deepWhileBr
deepWhileBr Main()
deepWhileBr do_liveness_analysis() done
deepWhileBr Build() done
simplify reg MkWorklist insert T[-42]
simplify reg MkWorklist insert T[-41]
simplify reg MkWorklist insert T[-40]
simplify reg MkWorklist insert T[-39]
simplify reg MkWorklist insert T[-38]
simplify reg MkWorklist insert T[-37]
freeze reg MkWorklist insert T[-36]
simplify reg MkWorklist insert T[-35]
simplify reg MkWorklist insert T[-33]
simplify reg MkWorklist insert T[-32]
simplify reg MkWorklist insert T[-30]
simplify reg MkWorklist insert T[-29]
freeze reg MkWorklist insert T[-28]
freeze reg MkWorklist insert T[-27]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
simplify reg MkWorklist insert T[-22]
simplify reg MkWorklist insert T[-21]
spill reg MkWorklist insert T[-19]
simplify reg MkWorklist insert T[-16]
simplify reg MkWorklist insert T[-15]
spill reg MkWorklist insert T[-13]
simplify reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-8]
simplify reg MkWorklist insert T[-1]
deepWhileBr MkWorklist() done
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Simplify()
deepWhileBr Coalesce()
deepWhileBr Coalesce()
deepWhileBr Simplify()
deepWhileBr Coalesce()
deepWhileBr AssignColors() done
replace regs

deepWhileBr
after compute reg_used
after prologue
end of emitend
---------------------------------ir after resolve phi-------------------------------------
main:
B0:

B1:
    li T[-2], 2
    mv a1, T[-2]
    mv a2, T[-2]
    call deepWhileBr
    mv T[-3], a0
    mv a0, T[-3]
    call putint
    mv T[-6], a0
    li T[-8], 0
    mv a0, T[-8]
    ret

---------------------------------ir after resolve phi end --------------------------------
main
main Main()
main do_liveness_analysis() done
main Build() done
freeze reg MkWorklist insert T[-8]
freeze reg MkWorklist insert T[-6]
freeze reg MkWorklist insert T[-3]
freeze reg MkWorklist insert T[-2]
main MkWorklist() done
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main AssignColors() done
replace regs

main
after compute reg_used
after prologue
end of emitend
