--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
<<<<<<< HEAD
=======
            (decl 
                (constDecl const 
                    (bType int) 
                    (constDef N = 
                        (initVal 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 1024))))))))) ;))) 
        (compUnitItem 
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
            (funcDef 
                (funcType void) mm ( 
                (funcFParams 
                    (funcFParam 
<<<<<<< HEAD
                        (bType int) low) , 
                    (funcFParam 
                        (bType int) high)) ) 
                (block { 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal low)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal high)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef i = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (lVal low)))))))) ;))) 
                                    (blockItem 
                                        (decl 
                                            (varDecl 
                                                (bType int) 
                                                (varDef j = 
                                                    (initVal 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (lVal high)))))))) ;))) 
                                    (blockItem 
                                        (stmt while ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
=======
                        (bType int) A [ ] [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (lVal N)))))) ])) ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef k = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (lVal A [ 
                                                                (exp 
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
<<<<<<< HEAD
                                                                                    (lVal i)))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal j)))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal i) = 
                                                            (exp 
                                                                (addExp 
=======
                                                                                    (number 
                                                                                        (intConst 1))))))) ] [ 
                                                                (exp 
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
<<<<<<< HEAD
                                                                                    (lVal i))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) })))) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp QuickSort ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal low))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal i))))) - 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 1))))))))) ))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp QuickSort ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal i))))) + 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 1)))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal high)))))))) ))))) ;)) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) 
=======
                                                                                    (number 
                                                                                        (intConst 2))))))) ])))))))) ;))) }))) 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef A [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (lVal N)))))) ] [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (lVal N)))))) ]) ;))) 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef B [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (lVal N)))))) ] [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (lVal N)))))) ]) ;))) 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef C [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (lVal N)))))) ] [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (lVal N)))))) ]) ;))) 
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
<<<<<<< HEAD
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp QuickSort ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 0)))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 1))))))))) ))))) ;)) 
                    (blockItem 
=======
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
<<<<<<< HEAD
visitCompUnit: funcDef
construct funct block: QuickSort
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: i
visitVarDecl: initVal
visitInit
visitVarDecl: int start
visitVarDecl: ident: j
visitVarDecl: initVal
visitInit
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitExprStmt
visitCall ident: QuickSort
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 2
visitExprStmt
visitCall ident: QuickSort
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 2
visitBlock done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitExprStmt
visitCall ident: QuickSort
visitFuncRParams
visitPrimaryExp_ number
visitPrimaryExp_ number
visitCall args_list size: 2
=======
visitConstDecl: int start
visitConstDecl: ident: N
visitConstDecl: initVal
visitInit
visitPrimaryExp_ number
visitCompUnit: funcDef
visitArrayParam
visitArrayParam: dim_ is not nullptr
construct funct block: mm
visitVarDecl: int start
visitVarDecl: ident: k
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitVarDecl: int start
visitVarDecl: array dim_size=2
visitVarDecl: ident: A
visitVarDecl: int start
visitVarDecl: array dim_size=2
visitVarDecl: ident: B
visitVarDecl: int start
visitVarDecl: array dim_size=2
visitVarDecl: ident: C
visitCompUnit: funcDef
construct funct block: main
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
<<<<<<< HEAD
Info: visitFuncDefi32 @QuickSort(i32 @low, i32 @high)
Info: visitParamDefi32 @low
Info: visitParamDefi32 @high
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@low<@high
Info: visitBinopExpr@low<@high
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitExpr@high
Info: visitLvalExpr@high
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @i = @low
Info: visitExpr@low
Info: visitAssignmentExpr@low
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitVarDef i32 @j = @high
Info: visitExpr@high
Info: visitAssignmentExpr@high
Info: visitExpr@high
Info: visitLvalExpr@high
Info: visitStatementWhile
Info: visitExpr@i<@j
Info: visitBinopExpr@i<@j
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@i = @i+1
Info: visitAssignStmtAssign@i = @i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmti32
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55b126a99af0
Info: visitStatementCall @QuickSort(@low, @i-1)
Info: visitExprStmtCall @QuickSort(@low, @i-1)
Info: visitExprCall @QuickSort(@low, @i-1)
Info: visiCalltExprCall @QuickSort(@low, @i-1)
Info: visitExpr@low
Info: visitLvalExpr@low
Info: visitExpr@i-1
Info: visitBinopExpr@i-1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55b126a99ac0
Info: visitStatementCall @QuickSort(@i+1, @high)
Info: visitExprStmtCall @QuickSort(@i+1, @high)
Info: visitExprCall @QuickSort(@i+1, @high)
Info: visiCalltExprCall @QuickSort(@i+1, @high)
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55b126a99e40
Info: visitExpr@high
Info: visitLvalExpr@high
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55b126a99e70
Info: visitReturnStmtReturn 0function has returnscope id1
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitStatementCall @QuickSort(0, 1)
Info: visitExprStmtCall @QuickSort(0, 1)
Info: visitExprCall @QuickSort(0, 1)
Info: visiCalltExprCall @QuickSort(0, 1)
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55b126a99ea0
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55b126a99ed0
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55b126a99f00
Info: visitReturnStmtReturn 0function has returnscope id6
ast: 
Program
  i32 @QuickSort(i32 @low#1, i32 @high#1)
    {
      If        @low#1<@high#1
        {
          i32 @i#3 = @low#1
          i32 @j#3 = @high#1
          While            @i#3<@j#3
            {
              Assign@i#3 = @i#3+1
            }
          Call @QuickSort            @low#1, @i#3-1
          Call @QuickSort            @i#3+1, @high#1
        }
=======
Info: visitVarDef i32 @N = 1024
Info: visitExpr1024
Info: visitAssignmentExpr1024
Info: visitExpr1024
Info: visitIntLiteralExpr1024
ret->type 0x55e34c6cf7d0
Info: visitFuncDefvoid @mm(i32 @A[0, @N])
Info: visitParamDefi32 @A[0, @N]
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55e34c6cf800
Info: visitExpr@N
Info: visitLvalExpr@N
Info: visitBlock
Info: visitVarDef i32 @k = @A[1][2]
Info: visitExpr@A[1][2]
Info: visitAssignmentExpr@A[1][2]
Info: visitExpr@A[1][2]
Info: visitLvalExpr@A[1][2]
Info: lval->indices->children.size() 2
Info: visitDims 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55e34c6cfcc0
Info: visitDims 2
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55e34c6cf490
Info: function mm has no returnscope id1
Info: visitVarDef i32 @A[@N, @N]
Info: var_def->indices->children.size() 2
Info: visitDims @N
Info: visitExpr@N
Info: visitLvalExpr@N
Info: visitDims @N
Info: visitExpr@N
Info: visitLvalExpr@N
Info: visitVarDef i32 @B[@N, @N]
Info: var_def->indices->children.size() 2
Info: visitDims @N
Info: visitExpr@N
Info: visitLvalExpr@N
Info: visitDims @N
Info: visitExpr@N
Info: visitLvalExpr@N
Info: visitVarDef i32 @C[@N, @N]
Info: var_def->indices->children.size() 2
Info: visitDims @N
Info: visitExpr@N
Info: visitLvalExpr@N
Info: visitDims @N
Info: visitExpr@N
Info: visitLvalExpr@N
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55e34c6cf4c0
Info: visitReturnStmtReturn 0function has returnscope id3
ast: 
Program
  i32 @N#0 = 1024
  void @mm(i32 @A#1[0, @N#0])
    {
      i32 @k#2 = @A#1[1][2]
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
      Return 0
    }
  i32 @A#0[@N#0, @N#0]
  i32 @B#0[@N#0, @N#0]
  i32 @C#0[@N#0, @N#0]
  i32 @main()
    {
<<<<<<< HEAD
      Call @QuickSort        0, 1
=======
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
      Return 0
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
<<<<<<< HEAD
visitFunction QuickSort
visitFunction param decl: low#1
visitFunction param decl: high#1
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue low#1
visitExpression
visitExpressionLValue high#1
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpressionLValue low#1
visitExpression
visitExpression
visitExpressionLValue high#1
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionLValue j#3
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue low#1
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue i#3
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionLValue high#1
=======
visit decl global var
visit_global_init
visitExpressionVal
visitExpressionVal
visitExpressionVal
visit decl global const var N#0: 1024
visit decl global var done
visitFunction mm
visitFunction param decl: A#1
visitFunction param decl array dim:visitExpressionVal
 0visitExpressionVal
 1024
visitBlock 
visitExpression
visitExpression
visitExpressionLValue A#1
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex calc blocksize 1 1024
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
<<<<<<< HEAD
function QuickSort has 28 regs
=======
function mm has 13 regs
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
B0:
  prev: 
  succ: 
<<<<<<< HEAD
B4:
  prev: B2 B5 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B4 
B6:
  prev: B4 
  succ: B3 
B7:
=======
B1:
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
  prev: 
  succ: 

B0:
  prev: 
  succ: 
<<<<<<< HEAD
B4:
  prev: B2 B5 
  succ: B5 B6 
B5:
  prev: B4 
  succ: B4 
B6:
  prev: B4 
  succ: B3 

entryB0
B1
B2
B3
B4
B5
B6
reverse_postorderB0
reverse_postorderB1
reverse_postorderB2
reverse_postorderB4
reverse_postorderB6
reverse_postorderB3
reverse_postorderB5
reverse_postorderB0
reverse_postorderB1
reverse_postorderB2
reverse_postorderB4
reverse_postorderB6
reverse_postorderB3
reverse_postorderB5
compute_dom_fro bb: B3 func: QuickSort
compute_dom_fro bb: B3 func: QuickSort
compute_dom_fro bb: B3 func: QuickSort
compute_dom_fro bb: B4 func: QuickSort
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 
  domed_by: B0 B1 
B2:
  doms: B4 
  domed_by: B0 B1 B2 
B3:
  doms: 
  domed_by: B0 B1 B3 
B4:
  doms: B5 B6 
  domed_by: B0 B1 B2 B4 
B5:
  doms: 
  domed_by: B0 B1 B2 B4 B5 
B6:
  doms: 
  domed_by: B0 B1 B2 B4 B6 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: B3 
B3:
  DF: 
B4:
  DF: B3 
B5:
  DF: B4 
B6:
  DF: B3 

=======

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visit decl global array
visitExpressionVal
visitExpressionVal
global array size: 1048576
visit decl global array done
visit decl global array
visitExpressionVal
visitExpressionVal
global array size: 1048576
visit decl global array done
visit decl global array
visitExpressionVal
visitExpressionVal
global array size: 1048576
visit decl global array done
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
visitFunction main
visitBlock 
visitStatement
visitExpression
<<<<<<< HEAD
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 4 regs
B8:
  prev: 
  succ: 
B9:
  prev: 
  succ: 

B8:
  prev: 
  succ: 

entryB8
reverse_postorderB8
B8:
  doms: 
  domed_by: B8 

B8:
=======
visitExpressionintliteral
visitExpressionintliteral done
function main has 1 regs
B2:
  prev: 
  succ: 
B3:
  prev: 
  succ: 

B2:
  prev: 
  succ: 

entryB2
reverse_postorderB2
B2:
  doms: 
  domed_by: B2 

B2:
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
  DF: 

ir_origin:
; module
<<<<<<< HEAD
define i32 @main(){
B8:
  %r2 = add i32 0, 0 ; loadint
  %r3 = add i32 0, 1 ; loadint
  %r1 = call i32 @QuickSort(i32 %r2, i32 %r3)
  %r4 = add i32 0, 0 ; loadint
  ret i32 %r4

}
define i32 @QuickSort(i32 %r1, i32 %r2){
B0:
  %r3 = alloca i32, i32 4
  store low#1 i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store high#1 i32 %r2, ptr %r4
  br label %B1

B1:
  %r5 = load low#1 i32, ptr %r3
  %r6 = load high#1 i32, ptr %r4
  %r7 = icmp slt i32 %r5, %r6
  br i1 %r7, label %B2, label %B3

B2:
  %r8 = alloca i32, i32 4
  %r9 = load low#1 i32, ptr %r3
  store i#3 i32 %r9, ptr %r8
  %r10 = alloca i32, i32 4
  %r11 = load high#1 i32, ptr %r4
  store j#3 i32 %r11, ptr %r10
  br label %B4

B3:
  %r28 = add i32 0, 0 ; loadint
  ret i32 %r28

B4:
  %r12 = load i#3 i32, ptr %r8
  %r13 = load j#3 i32, ptr %r10
  %r14 = icmp slt i32 %r12, %r13
  br i1 %r14, label %B5, label %B6

B5:
  %r15 = load i#3 i32, ptr %r8
  %r16 = add i32 0, 1 ; loadint
  %r17 = add i32 %r15, %r16
  store i#3 i32 %r17, ptr %r8
  br label %B4

B6:
  %r19 = load low#1 i32, ptr %r3
  %r20 = load i#3 i32, ptr %r8
  %r21 = add i32 0, 1 ; loadint
  %r22 = sub i32 %r20, %r21
  %r18 = call i32 @QuickSort(i32 %r19, i32 %r22)
  %r24 = load i#3 i32, ptr %r8
  %r25 = add i32 0, 1 ; loadint
  %r26 = add i32 %r24, %r25
  %r27 = load high#1 i32, ptr %r4
  %r23 = call i32 @QuickSort(i32 %r26, i32 %r27)
  br label %B3
=======
@N = global i32 1024, i32 4
@A = global i32, i32 4194304
@B = global i32, i32 4194304
@C = global i32, i32 4194304
define i32 @main(){
B2:
  %r1 = add i32 0, 0 ; loadint
  ret i32 %r1

}
define void @mm(i32 %r1){
B0:
  %r2 = alloca i32, i32 4
  %r3 = add i32 0, 4 ; loadint
  %r4 = add i32 0, 2 ; loadint
  %r5 = mul i32 %r4, %r3
  %r6 = add i32 %r1, %r5
  %r7 = add i32 0, 1024 ; loadint
  %r8 = mul i32 %r3, %r7
  %r9 = add i32 0, 1 ; loadint
  %r10 = mul i32 %r9, %r8
  %r11 = add i32 %r6, %r10
  %r12 = load A#1 i32, ptr %r11
  store k#2 i32 %r12, ptr %r2
  %r13 = add i32 0, 0 ; loadint
  ret i32 %r13
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3

}
---------------------------------ir -------------------------------------
; module
<<<<<<< HEAD
define i32 @main(){
B8:
  %r2 = add i32 0, 0 ; loadint
  %r3 = add i32 0, 1 ; loadint
  %r1 = call i32 @QuickSort(i32 %r2, i32 %r3)
  %r4 = add i32 0, 0 ; loadint
  ret i32 %r4

}
define i32 @QuickSort(i32 %r1, i32 %r2){
B0:
  %r3 = alloca i32, i32 4
  store low#1 i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store high#1 i32 %r2, ptr %r4
  br label %B1

B1:
  %r5 = load low#1 i32, ptr %r3
  %r6 = load high#1 i32, ptr %r4
  %r7 = icmp slt i32 %r5, %r6
  br i1 %r7, label %B2, label %B3

B2:
  %r8 = alloca i32, i32 4
  %r9 = load low#1 i32, ptr %r3
  store i#3 i32 %r9, ptr %r8
  %r10 = alloca i32, i32 4
  %r11 = load high#1 i32, ptr %r4
  store j#3 i32 %r11, ptr %r10
  br label %B4

B3:
  %r28 = add i32 0, 0 ; loadint
  ret i32 %r28

B4:
  %r12 = load i#3 i32, ptr %r8
  %r13 = load j#3 i32, ptr %r10
  %r14 = icmp slt i32 %r12, %r13
  br i1 %r14, label %B5, label %B6

B5:
  %r15 = load i#3 i32, ptr %r8
  %r16 = add i32 0, 1 ; loadint
  %r17 = add i32 %r15, %r16
  store i#3 i32 %r17, ptr %r8
  br label %B4

B6:
  %r19 = load low#1 i32, ptr %r3
  %r20 = load i#3 i32, ptr %r8
  %r21 = add i32 0, 1 ; loadint
  %r22 = sub i32 %r20, %r21
  %r18 = call i32 @QuickSort(i32 %r19, i32 %r22)
  %r24 = load i#3 i32, ptr %r8
  %r25 = add i32 0, 1 ; loadint
  %r26 = add i32 %r24, %r25
  %r27 = load high#1 i32, ptr %r4
  %r23 = call i32 @QuickSort(i32 %r26, i32 %r27)
  br label %B3

}
--------------------------- building riscv ---------------------------
=======
@N = global i32 1024, i32 4
@A = global i32, i32 4194304
@B = global i32, i32 4194304
@C = global i32, i32 4194304
define i32 @main(){
B2:
  %r1 = add i32 0, 0 ; loadint
  ret i32 %r1

}
define void @mm(i32 %r1){
B0:
  %r2 = alloca i32, i32 4
  %r3 = add i32 0, 4 ; loadint
  %r4 = add i32 0, 2 ; loadint
  %r5 = mul i32 %r4, %r3
  %r6 = add i32 %r1, %r5
  %r7 = add i32 0, 1024 ; loadint
  %r8 = mul i32 %r3, %r7
  %r9 = add i32 0, 1 ; loadint
  %r10 = mul i32 %r9, %r8
  %r11 = add i32 %r6, %r10
  %r12 = load A#1 i32, ptr %r11
  store k#2 i32 %r12, ptr %r2
  %r13 = add i32 0, 0 ; loadint
  ret i32 %r13

}
--------------------------- building riscv ---------------------------
riscv: 
    li T[-1], 0
    mv a0, T[-1]
    ret
    addi T[-2], sp, 108
    li T[-3], 4
    li T[-4], 2
    mul T[-5], T[-4], T[-3]
    add T[-6], a1, T[-5]
    li T[-7], 1024
    mul T[-8], T[-3], T[-7]
    li T[-9], 1
    mul T[-10], T[-9], T[-8]
    add T[-11], T[-6], T[-10]
    lw T[-12], 0(T[-11])
    sw T[-12], 0(T[-2])
    li T[-13], 0
    mv a0, T[-13]
    ret
?
mm Main()
mm do_liveness_analysis() done
mm Build() done
freeze reg MkWorklist insert T[-13]
simplify reg MkWorklist insert T[-12]
simplify reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-8]
simplify reg MkWorklist insert T[-7]
simplify reg MkWorklist insert T[-6]
simplify reg MkWorklist insert T[-5]
simplify reg MkWorklist insert T[-4]
simplify reg MkWorklist insert T[-3]
simplify reg MkWorklist insert T[-2]
mm MkWorklist() done
mm Simplify()
mm Simplify()
mm Simplify()
mm Simplify()
mm Simplify()
mm Simplify()
mm Simplify()
mm Simplify()
mm Simplify()
mm Simplify()
mm Simplify()
mm Coalesce()
mm AssignColors() done
replace regs

mm
after compute reg_used
after prologue
end of emitend
main Main()
main do_liveness_analysis() done
main Build() done
freeze reg MkWorklist insert T[-1]
main MkWorklist() done
main Coalesce()
main AssignColors() done
replace regs

main
after compute reg_used
after prologue
end of emitend
>>>>>>> f3d77da5fad86ae50957ac2f13aa7487c2de3ae3
