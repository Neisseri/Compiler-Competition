--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType void) move ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) x) , 
                    (funcFParam 
                        (bType int) y)) ) 
                (block { 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putint ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal x)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putch ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 32))))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putint ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal y)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putch ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 44))))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putch ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 32))))))))) ))))) ;)) }))) 
        (compUnitItem 
            (funcDef 
                (funcType void) hanoi ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) n) , 
                    (funcFParam 
                        (bType int) one) , 
                    (funcFParam 
                        (bType int) two) , 
                    (funcFParam 
                        (bType int) three)) ) 
                (block { 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (eqExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal n))))))) == 
                                            (relExp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))))))) ) 
                            (stmt 
                                (exp 
                                    (addExp 
                                        (mulExp 
                                            (unaryExp move ( 
                                                (funcRParams 
                                                    (funcRParam 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (lVal one))))))) , 
                                                    (funcRParam 
                                                        (exp 
                                                            (addExp 
                                                                (mulExp 
                                                                    (unaryExp 
                                                                        (primaryExp 
                                                                            (lVal three)))))))) ))))) ;) else 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp hanoi ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal n))))) - 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 1)))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal one))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal three))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal two)))))))) ))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp move ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal one))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal three)))))))) ))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp hanoi ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (addExp 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal n))))) - 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 1)))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal two))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal one))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal three)))))))) ))))) ;)) })))) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef n = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp getint ( ))))))) ;))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal n)))))) > 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 0))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp hanoi ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp getint ( )))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 1)))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 2)))))))) , 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 3))))))))) ))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp putch ( 
                                                            (funcRParams 
                                                                (funcRParam 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 10))))))))) ))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal n) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal n))))) - 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: move
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitCall args_list size: 1
visitExprStmt
visitCall ident: putch
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitCall args_list size: 1
visitExprStmt
visitCall ident: putch
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitExprStmt
visitCall ident: putch
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: hanoi
visitPrimaryExp_ number
visitExprStmt
visitCall ident: move
visitFuncRParams
visitCall args_list size: 2
visit block stmt
visitExprStmt
visitCall ident: hanoi
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 4
visitExprStmt
visitCall ident: move
visitFuncRParams
visitCall args_list size: 2
visitExprStmt
visitCall ident: hanoi
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 4
visitBlock done!
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: n
visitVarDecl: initVal
visitInit
visitCall ident: getint
visitCall args_list size: 0
visitPrimaryExp_ number
visit block stmt
visitExprStmt
visitCall ident: hanoi
visitFuncRParams
visitCall ident: getint
visitCall args_list size: 0
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visitCall args_list size: 4
visitExprStmt
visitCall ident: putch
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefvoid @move(i32 @x, i32 @y)
Info: visitParamDefi32 @x
Info: visitParamDefi32 @y
Info: visitBlock
Info: visitStatementCall @putint(@x)
Info: visitExprStmtCall @putint(@x)
Info: visitExprCall @putint(@x)
Info: visiCalltExprCall @putint(@x)
Info: use of undeclared function putint
Info: visitExpr@x
Info: visitLvalExpr@x
Info: visitStatementCall @putch(32)
Info: visitExprStmtCall @putch(32)
Info: visitExprCall @putch(32)
Info: visiCalltExprCall @putch(32)
Info: use of undeclared function putch
Info: visitExpr32
Info: visitIntLiteralExpr32
ret->type 0x55c9a6a5cb30
Info: visitStatementCall @putint(@y)
Info: visitExprStmtCall @putint(@y)
Info: visitExprCall @putint(@y)
Info: visiCalltExprCall @putint(@y)
Info: use of undeclared function putint
Info: visitExpr@y
Info: visitLvalExpr@y
Info: visitStatementCall @putch(44)
Info: visitExprStmtCall @putch(44)
Info: visitExprCall @putch(44)
Info: visiCalltExprCall @putch(44)
Info: use of undeclared function putch
Info: visitExpr44
Info: visitIntLiteralExpr44
ret->type 0x55c9a6a5ccd0
Info: visitStatementCall @putch(32)
Info: visitExprStmtCall @putch(32)
Info: visitExprCall @putch(32)
Info: visiCalltExprCall @putch(32)
Info: use of undeclared function putch
Info: visitExpr32
Info: visitIntLiteralExpr32
ret->type 0x55c9a6a5cd00
Info: function move has no returnscope id1
Info: visitFuncDefvoid @hanoi(i32 @n, i32 @one, i32 @two, i32 @three)
Info: visitParamDefi32 @n
Info: visitParamDefi32 @one
Info: visitParamDefi32 @two
Info: visitParamDefi32 @three
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@n==1
Info: visitBinopExpr@n==1
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c9a6a5ce50
Info: visitStatementCall @move(@one, @three)
Info: visitExprStmtCall @move(@one, @three)
Info: visitExprCall @move(@one, @three)
Info: visiCalltExprCall @move(@one, @three)
Info: visitExpr@one
Info: visitLvalExpr@one
Info: visitExpr@three
Info: visitLvalExpr@three
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @hanoi(@n-1, @one, @three, @two)
Info: visitExprStmtCall @hanoi(@n-1, @one, @three, @two)
Info: visitExprCall @hanoi(@n-1, @one, @three, @two)
Info: visiCalltExprCall @hanoi(@n-1, @one, @three, @two)
Info: visitExpr@n-1
Info: visitBinopExpr@n-1
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c9a6a5cf20
Info: visitExpr@one
Info: visitLvalExpr@one
Info: visitExpr@three
Info: visitLvalExpr@three
Info: visitExpr@two
Info: visitLvalExpr@two
Info: visitStatementCall @move(@one, @three)
Info: visitExprStmtCall @move(@one, @three)
Info: visitExprCall @move(@one, @three)
Info: visiCalltExprCall @move(@one, @three)
Info: visitExpr@one
Info: visitLvalExpr@one
Info: visitExpr@three
Info: visitLvalExpr@three
Info: visitStatementCall @hanoi(@n-1, @two, @one, @three)
Info: visitExprStmtCall @hanoi(@n-1, @two, @one, @three)
Info: visitExprCall @hanoi(@n-1, @two, @one, @three)
Info: visiCalltExprCall @hanoi(@n-1, @two, @one, @three)
Info: visitExpr@n-1
Info: visitBinopExpr@n-1
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c9a6a5cfa0
Info: visitExpr@two
Info: visitLvalExpr@two
Info: visitExpr@one
Info: visitLvalExpr@one
Info: visitExpr@three
Info: visitLvalExpr@three
Info: function hanoi has no returnscope id3
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitVarDef i32 @n = Call @getint()
Info: visitExprCall @getint()
Info: visitAssignmentExprCall @getint()
Info: visitExprCall @getint()
Info: visiCalltExprCall @getint()
Info: use of undeclared function getint
Info: expr_type is nullptr , its an array ,return
Info: visitStatementWhile
Info: visitExpr@n>0
Info: visitBinopExpr@n>0
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c9a6a5d260
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @hanoi(Call @getint(), 1, 2, 3)
Info: visitExprStmtCall @hanoi(Call @getint(), 1, 2, 3)
Info: visitExprCall @hanoi(Call @getint(), 1, 2, 3)
Info: visiCalltExprCall @hanoi(Call @getint(), 1, 2, 3)
Info: visitExprCall @getint()
Info: visiCalltExprCall @getint()
Info: use of undeclared function getint
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c9a6a5cb60
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55c9a6a5d020
Info: visitExpr3
Info: visitIntLiteralExpr3
ret->type 0x55c9a6a5d290
Info: visitStatementCall @putch(10)
Info: visitExprStmtCall @putch(10)
Info: visitExprCall @putch(10)
Info: visiCalltExprCall @putch(10)
Info: use of undeclared function putch
Info: visitExpr10
Info: visitIntLiteralExpr10
ret->type 0x55c9a6a5d2c0
Info: visitStatementAssign@n = @n-1
Info: visitAssignStmtAssign@n = @n-1
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitAssignStmti32
Info: visitExpr@n-1
Info: visitBinopExpr@n-1
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c9a6a5d2f0
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c9a6a5d320
Info: visitReturnStmtReturn 0function has returnscope id6
ast: 
Program
  void @move(i32 @x#1, i32 @y#1)
    {
      Call @putint        @x#1
      Call @putch        32
      Call @putint        @y#1
      Call @putch        44
      Call @putch        32
      Return 0
    }
  void @hanoi(i32 @n#3, i32 @one#3, i32 @two#3, i32 @three#3)
    {
      If        @n#3==1
        Call @move          @one#3, @three#3
      Else
        {
          Call @hanoi            @n#3-1, @one#3, @three#3, @two#3
          Call @move            @one#3, @three#3
          Call @hanoi            @n#3-1, @two#3, @one#3, @three#3
        }
      Return 0
    }
  i32 @main()
    {
      i32 @n#7 = Call @getint()
      While        @n#7>0
        {
          Call @hanoi            Call @getint(), 1, 2, 3
          Call @putch            10
          Assign@n#7 = @n#7-1
        }
      Return 0
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visitFunction move
get_new_reg move numregs: 0
get_new_reg move numregs: 1
visitFunction param decl: x#1
get_new_reg move numregs: 2
visitFunction param decl: y#1
get_new_reg move numregs: 3
visitBlock 
visitStatement
visitExpression
get_new_reg move numregs: 4
visitExpression
visitExpressionLValue x#1
get_new_reg move numregs: 5
visitStatement
visitExpression
get_new_reg move numregs: 6
visitExpression
visitExpressionintliteral
get_new_reg move numregs: 7
visitExpressionintliteral done
visitStatement
visitExpression
get_new_reg move numregs: 8
visitExpression
visitExpressionLValue y#1
get_new_reg move numregs: 9
visitStatement
visitExpression
get_new_reg move numregs: 10
visitExpression
visitExpressionintliteral
get_new_reg move numregs: 11
visitExpressionintliteral done
visitStatement
visitExpression
get_new_reg move numregs: 12
visitExpression
visitExpressionintliteral
get_new_reg move numregs: 13
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
get_new_reg move numregs: 14
visitExpressionintliteral done
function move has 15 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visitFunction hanoi
get_new_reg hanoi numregs: 0
get_new_reg hanoi numregs: 1
get_new_reg hanoi numregs: 2
get_new_reg hanoi numregs: 3
visitFunction param decl: n#3
get_new_reg hanoi numregs: 4
visitFunction param decl: one#3
get_new_reg hanoi numregs: 5
visitFunction param decl: two#3
get_new_reg hanoi numregs: 6
visitFunction param decl: three#3
get_new_reg hanoi numregs: 7
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue n#3
get_new_reg hanoi numregs: 8
visitExpression
visitExpressionintliteral
get_new_reg hanoi numregs: 9
visitExpressionintliteral done
get_new_reg hanoi numregs: 10
visitStatement
visitExpression
get_new_reg hanoi numregs: 11
visitExpression
visitExpressionLValue one#3
get_new_reg hanoi numregs: 12
visitExpression
visitExpressionLValue three#3
get_new_reg hanoi numregs: 13
visitStatement
visitBlock 
visitStatement
visitExpression
get_new_reg hanoi numregs: 14
visitExpression
visitExpression
visitExpressionLValue n#3
get_new_reg hanoi numregs: 15
visitExpression
visitExpressionintliteral
get_new_reg hanoi numregs: 16
visitExpressionintliteral done
get_new_reg hanoi numregs: 17
visitExpression
visitExpressionLValue one#3
get_new_reg hanoi numregs: 18
visitExpression
visitExpressionLValue three#3
get_new_reg hanoi numregs: 19
visitExpression
visitExpressionLValue two#3
get_new_reg hanoi numregs: 20
visitStatement
visitExpression
get_new_reg hanoi numregs: 21
visitExpression
visitExpressionLValue one#3
get_new_reg hanoi numregs: 22
visitExpression
visitExpressionLValue three#3
get_new_reg hanoi numregs: 23
visitStatement
visitExpression
get_new_reg hanoi numregs: 24
visitExpression
visitExpression
visitExpressionLValue n#3
get_new_reg hanoi numregs: 25
visitExpression
visitExpressionintliteral
get_new_reg hanoi numregs: 26
visitExpressionintliteral done
get_new_reg hanoi numregs: 27
visitExpression
visitExpressionLValue two#3
get_new_reg hanoi numregs: 28
visitExpression
visitExpressionLValue one#3
get_new_reg hanoi numregs: 29
visitExpression
visitExpressionLValue three#3
get_new_reg hanoi numregs: 30
visitStatement
visitExpression
visitExpressionintliteral
get_new_reg hanoi numregs: 31
visitExpressionintliteral done
function hanoi has 32 regs
B2:
  prev: 
  succ: B3 
B3:
  prev: B2 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: B6 
B6:
  prev: B4 B5 
  succ: 
B7:
  prev: 
  succ: 

B2:
  prev: 
  succ: B3 
B3:
  prev: B2 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: B6 
B6:
  prev: B4 B5 
  succ: 

entryB2
B3
B4
B5
B6
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
compute_dom_fro bb: B6 func: hanoi
compute_dom_fro bb: B6 func: hanoi
B2:
  doms: B3 
  domed_by: B2 
B3:
  doms: B4 B5 B6 
  domed_by: B2 B3 
B4:
  doms: 
  domed_by: B2 B3 B4 
B5:
  doms: 
  domed_by: B2 B3 B5 
B6:
  doms: 
  domed_by: B2 B3 B6 

B2:
  DF: 
B3:
  DF: 
B4:
  DF: B6 
B5:
  DF: B6 
B6:
  DF: 

visitFunction main
visitBlock 
get_new_reg main numregs: 0
visitExpression
visitExpression
get_new_reg main numregs: 1
visitStatement
visitExpression
visitExpression
visitExpressionLValue n#7
get_new_reg main numregs: 2
visitExpression
visitExpressionintliteral
get_new_reg main numregs: 3
visitExpressionintliteral done
get_new_reg main numregs: 4
visitStatement
visitBlock 
visitStatement
visitExpression
get_new_reg main numregs: 5
visitExpression
get_new_reg main numregs: 6
visitExpression
visitExpressionintliteral
get_new_reg main numregs: 7
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
get_new_reg main numregs: 8
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
get_new_reg main numregs: 9
visitExpressionintliteral done
visitStatement
visitExpression
get_new_reg main numregs: 10
visitExpression
visitExpressionintliteral
get_new_reg main numregs: 11
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue n#7
get_new_reg main numregs: 12
visitExpression
visitExpressionintliteral
get_new_reg main numregs: 13
visitExpressionintliteral done
get_new_reg main numregs: 14
visitStatement
visitExpression
visitExpressionintliteral
get_new_reg main numregs: 15
visitExpressionintliteral done
function main has 16 regs
B8:
  prev: 
  succ: B9 
B9:
  prev: B8 B10 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B9 
B11:
  prev: B9 
  succ: 
B12:
  prev: 
  succ: 

B8:
  prev: 
  succ: B9 
B9:
  prev: B8 B10 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B9 
B11:
  prev: B9 
  succ: 

entryB8
B9
B10
B11
reverse_postorderB8
reverse_postorderB9
reverse_postorderB11
reverse_postorderB10
reverse_postorderB8
reverse_postorderB9
reverse_postorderB11
reverse_postorderB10
compute_dom_fro bb: B9 func: main
B8:
  doms: B9 
  domed_by: B8 
B9:
  doms: B10 B11 
  domed_by: B8 B9 
B10:
  doms: 
  domed_by: B8 B9 B10 
B11:
  doms: 
  domed_by: B8 B9 B11 

B8:
  DF: 
B9:
  DF: 
B10:
  DF: B9 
B11:
  DF: 

ir_origin:
; module
define i32 @main(){
B8:
  %r1 = alloca i32, i32 4
  %r2 = call i32 @getint()
  store i32 %r2, ptr %r1
  br label %B9

B9:
  %r3 = load i32, ptr %r1
  %r4 = add i32 0, 0 ; loadint
  %tmpcmp5 = icmp sgt i32 %r3, %r4
  %r5 = zext i1 %tmpcmp5 to i32
  %tmpconbr5 = trunc i32 %r5 to i1
  br i1 %tmpconbr5, label %B10, label %B11

B10:
  %r7 = call i32 @getint()
  %r8 = add i32 0, 1 ; loadint
  %r9 = add i32 0, 2 ; loadint
  %r10 = add i32 0, 3 ; loadint
  %r6 = call i32 @hanoi(i32 %r7, i32 %r8, i32 %r9, i32 %r10)
  %r12 = add i32 0, 10 ; loadint
  %r11 = call i32 @putch(i32 %r12)
  %r13 = load i32, ptr %r1
  %r14 = add i32 0, 1 ; loadint
  %r15 = sub i32 %r13, %r14
  store i32 %r15, ptr %r1
  br label %B9

B11:
  %r16 = add i32 0, 0 ; loadint
  ret i32 %r16

}
define i32 @hanoi(i32 %r1, i32 %r2, i32 %r3, i32 %r4){
B2:
  %r5 = alloca i32, i32 4
  store i32 %r1, ptr %r5
  %r6 = alloca i32, i32 4
  store i32 %r2, ptr %r6
  %r7 = alloca i32, i32 4
  store i32 %r3, ptr %r7
  %r8 = alloca i32, i32 4
  store i32 %r4, ptr %r8
  br label %B3

B3:
  %r9 = load i32, ptr %r5
  %r10 = add i32 0, 1 ; loadint
  %tmpcmp11 = icmp eq i32 %r9, %r10
  %r11 = zext i1 %tmpcmp11 to i32
  %tmpconbr11 = trunc i32 %r11 to i1
  br i1 %tmpconbr11, label %B4, label %B5

B4:
  %r13 = load i32, ptr %r6
  %r14 = load i32, ptr %r8
  %r12 = call i32 @move(i32 %r13, i32 %r14)
  br label %B6

B5:
  %r16 = load i32, ptr %r5
  %r17 = add i32 0, 1 ; loadint
  %r18 = sub i32 %r16, %r17
  %r19 = load i32, ptr %r6
  %r20 = load i32, ptr %r8
  %r21 = load i32, ptr %r7
  %r15 = call i32 @hanoi(i32 %r18, i32 %r19, i32 %r20, i32 %r21)
  %r23 = load i32, ptr %r6
  %r24 = load i32, ptr %r8
  %r22 = call i32 @move(i32 %r23, i32 %r24)
  %r26 = load i32, ptr %r5
  %r27 = add i32 0, 1 ; loadint
  %r28 = sub i32 %r26, %r27
  %r29 = load i32, ptr %r7
  %r30 = load i32, ptr %r6
  %r31 = load i32, ptr %r8
  %r25 = call i32 @hanoi(i32 %r28, i32 %r29, i32 %r30, i32 %r31)
  br label %B6

B6:
  %r32 = add i32 0, 0 ; loadint
  ret i32 %r32

}
define i32 @move(i32 %r1, i32 %r2){
B0:
  %r3 = alloca i32, i32 4
  store i32 %r1, ptr %r3
  %r4 = alloca i32, i32 4
  store i32 %r2, ptr %r4
  %r6 = load i32, ptr %r3
  %r5 = call i32 @putint(i32 %r6)
  %r8 = add i32 0, 32 ; loadint
  %r7 = call i32 @putch(i32 %r8)
  %r10 = load i32, ptr %r4
  %r9 = call i32 @putint(i32 %r10)
  %r12 = add i32 0, 44 ; loadint
  %r11 = call i32 @putch(i32 %r12)
  %r14 = add i32 0, 32 ; loadint
  %r13 = call i32 @putch(i32 %r14)
  %r15 = add i32 0, 0 ; loadint
  ret i32 %r15

}
---------------------------------ir after mem2reg-------------------------------------
get_new_reg main numregs: 16
; module
define i32 @main(){
B8:
  %r2 = call i32 @getint()
  br label %B9

B9:
  %r17 = phi i32 [ %r2, %B8 ], [ %r15, %B10 ]
  %r4 = add i32 0, 0 ; loadint
  %tmpcmp5 = icmp sgt i32 %r17, %r4
  %r5 = zext i1 %tmpcmp5 to i32
  %tmpconbr5 = trunc i32 %r5 to i1
  br i1 %tmpconbr5, label %B10, label %B11

B10:
  %r7 = call i32 @getint()
  %r8 = add i32 0, 1 ; loadint
  %r9 = add i32 0, 2 ; loadint
  %r10 = add i32 0, 3 ; loadint
  %r6 = call i32 @hanoi(i32 %r7, i32 %r8, i32 %r9, i32 %r10)
  %r12 = add i32 0, 10 ; loadint
  %r11 = call i32 @putch(i32 %r12)
  %r14 = add i32 0, 1 ; loadint
  %r15 = sub i32 %r17, %r14
  br label %B9

B11:
  %r16 = add i32 0, 0 ; loadint
  ret i32 %r16

}
define i32 @hanoi(i32 %r1, i32 %r2, i32 %r3, i32 %r4){
B2:
  br label %B3

B3:
  %r10 = add i32 0, 1 ; loadint
  %tmpcmp11 = icmp eq i32 %r1, %r10
  %r11 = zext i1 %tmpcmp11 to i32
  %tmpconbr11 = trunc i32 %r11 to i1
  br i1 %tmpconbr11, label %B4, label %B5

B4:
  %r12 = call i32 @move(i32 %r2, i32 %r4)
  br label %B6

B5:
  %r17 = add i32 0, 1 ; loadint
  %r18 = sub i32 %r1, %r17
  %r15 = call i32 @hanoi(i32 %r18, i32 %r2, i32 %r4, i32 %r3)
  %r22 = call i32 @move(i32 %r2, i32 %r4)
  %r27 = add i32 0, 1 ; loadint
  %r28 = sub i32 %r1, %r27
  %r25 = call i32 @hanoi(i32 %r28, i32 %r3, i32 %r2, i32 %r4)
  br label %B6

B6:
  %r32 = add i32 0, 0 ; loadint
  ret i32 %r32

}
define i32 @move(i32 %r1, i32 %r2){
B0:
  %r5 = call i32 @putint(i32 %r1)
  %r8 = add i32 0, 32 ; loadint
  %r7 = call i32 @putch(i32 %r8)
  %r9 = call i32 @putint(i32 %r2)
  %r12 = add i32 0, 44 ; loadint
  %r11 = call i32 @putch(i32 %r12)
  %r14 = add i32 0, 32 ; loadint
  %r13 = call i32 @putch(i32 %r14)
  %r15 = add i32 0, 0 ; loadint
  ret i32 %r15

}
---------------------------------ir -------------------------------------
; module
define i32 @main(){
B8:
  %r2 = call i32 @getint()
  br label %B9

B9:
  %r17 = phi i32 [ %r2, %B8 ], [ %r15, %B10 ]
  %r4 = add i32 0, 0 ; loadint
  %tmpcmp5 = icmp sgt i32 %r17, %r4
  %r5 = zext i1 %tmpcmp5 to i32
  %tmpconbr5 = trunc i32 %r5 to i1
  br i1 %tmpconbr5, label %B10, label %B11

B10:
  %r7 = call i32 @getint()
  %r8 = add i32 0, 1 ; loadint
  %r9 = add i32 0, 2 ; loadint
  %r10 = add i32 0, 3 ; loadint
  %r6 = call i32 @hanoi(i32 %r7, i32 %r8, i32 %r9, i32 %r10)
  %r12 = add i32 0, 10 ; loadint
  %r11 = call i32 @putch(i32 %r12)
  %r14 = add i32 0, 1 ; loadint
  %r15 = sub i32 %r17, %r14
  br label %B9

B11:
  %r16 = add i32 0, 0 ; loadint
  ret i32 %r16

}
define i32 @hanoi(i32 %r1, i32 %r2, i32 %r3, i32 %r4){
B2:
  br label %B3

B3:
  %r10 = add i32 0, 1 ; loadint
  %tmpcmp11 = icmp eq i32 %r1, %r10
  %r11 = zext i1 %tmpcmp11 to i32
  %tmpconbr11 = trunc i32 %r11 to i1
  br i1 %tmpconbr11, label %B4, label %B5

B4:
  %r12 = call i32 @move(i32 %r2, i32 %r4)
  br label %B6

B5:
  %r17 = add i32 0, 1 ; loadint
  %r18 = sub i32 %r1, %r17
  %r15 = call i32 @hanoi(i32 %r18, i32 %r2, i32 %r4, i32 %r3)
  %r22 = call i32 @move(i32 %r2, i32 %r4)
  %r27 = add i32 0, 1 ; loadint
  %r28 = sub i32 %r1, %r27
  %r25 = call i32 @hanoi(i32 %r28, i32 %r3, i32 %r2, i32 %r4)
  br label %B6

B6:
  %r32 = add i32 0, 0 ; loadint
  ret i32 %r32

}
define i32 @move(i32 %r1, i32 %r2){
B0:
  %r5 = call i32 @putint(i32 %r1)
  %r8 = add i32 0, 32 ; loadint
  %r7 = call i32 @putch(i32 %r8)
  %r9 = call i32 @putint(i32 %r2)
  %r12 = add i32 0, 44 ; loadint
  %r11 = call i32 @putch(i32 %r12)
  %r14 = add i32 0, 32 ; loadint
  %r13 = call i32 @putch(i32 %r14)
  %r15 = add i32 0, 0 ; loadint
  ret i32 %r15

}
--------------------------- building riscv ---------------------------
riscv: 
T[-2] B1
T[-15] B3
    call getint
    mv T[-2], a0
    j B2
    phi T[-17] = T[-2] B1
[ T[-2], B1] T[-15] B3
[ T[-15], B3] 
    li T[-4], 0
    sgt T[-5], T[-17], T[-4]
    beq x0, T[-5], B4
    j B3
    call getint
    mv T[-7], a0
    li T[-8], 1
    li T[-9], 2
    li T[-10], 3
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-7]
    mv a2, T[-8]
    mv a3, T[-9]
    mv a4, T[-10]
    call hanoi
    mv T[-6], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    li T[-12], 10
    mv a0, T[-12]
    call putch
    mv T[-11], a0
    li T[-14], 1
    sub T[-15], T[-17], T[-14]
    j B2
    li T[-16], 0
    mv a0, T[-16]
    ret
    j B7
    li T[-10], 1
    sub T[-11], a1, T[-10]
    seqz T[-11], T[-11]
    beq x0, T[-11], B9
    j B8
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, a2
    mv a2, a4
    call move
    mv T[-12], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B10
    li T[-17], 1
    sub T[-18], a1, T[-17]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-18]
    mv a3, a4
    mv a4, a3
    call hanoi
    mv T[-15], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, a2
    mv a2, a4
    call move
    mv T[-22], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    li T[-27], 1
    sub T[-28], a1, T[-27]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-28]
    mv a2, a3
    mv a3, a2
    call hanoi
    mv T[-25], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B10
    li T[-32], 0
    mv a0, T[-32]
    ret
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, a1
    call putint
    mv T[-5], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    li T[-8], 32
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, T[-8]
    call putch
    mv T[-7], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, a2
    call putint
    mv T[-9], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    li T[-12], 44
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, T[-12]
    call putch
    mv T[-11], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    li T[-14], 32
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, T[-14]
    call putch
    mv T[-13], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    li T[-15], 0
    mv a0, T[-15]
    ret
?
---------------------------------ir after resolve phi-------------------------------------
move:
B11:

B12:
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, a1
    call putint
    mv T[-5], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    li T[-8], 32
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, T[-8]
    call putch
    mv T[-7], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, a2
    call putint
    mv T[-9], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    li T[-12], 44
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, T[-12]
    call putch
    mv T[-11], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    li T[-14], 32
    sw a1, 64(sp)
    sw a2, 68(sp)
    mv a0, T[-14]
    call putch
    mv T[-13], a0
    lw a1, 64(sp)
    lw a2, 68(sp)
    li T[-15], 0
    mv a0, T[-15]
    ret

---------------------------------ir after resolve phi end --------------------------------
move Main()
move do_liveness_analysis() done
move Build() done
freeze reg MkWorklist insert T[-15]
freeze reg MkWorklist insert T[-14]
freeze reg MkWorklist insert T[-13]
freeze reg MkWorklist insert T[-12]
freeze reg MkWorklist insert T[-11]
freeze reg MkWorklist insert T[-9]
freeze reg MkWorklist insert T[-8]
freeze reg MkWorklist insert T[-7]
freeze reg MkWorklist insert T[-5]
move MkWorklist() done
move Coalesce()
move Coalesce()
move Coalesce()
move Coalesce()
move Coalesce()
move Coalesce()
move Coalesce()
move Coalesce()
move Coalesce()
move Coalesce()
move Coalesce()
move AssignColors() done
replace regs

move
after compute reg_used
after prologue
end of emitend
---------------------------------ir after resolve phi-------------------------------------
hanoi:
B5:

B6:
    j B7

B7:
    li T[-10], 1
    sub T[-11], a1, T[-10]
    seqz T[-11], T[-11]
    beq x0, T[-11], B9
    j B8

B8:
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, a2
    mv a2, a4
    call move
    mv T[-12], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B10

B9:
    li T[-17], 1
    sub T[-18], a1, T[-17]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-18]
    mv a3, a4
    mv a4, a3
    call hanoi
    mv T[-15], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, a2
    mv a2, a4
    call move
    mv T[-22], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    li T[-27], 1
    sub T[-28], a1, T[-27]
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-28]
    mv a2, a3
    mv a3, a2
    call hanoi
    mv T[-25], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B10

B10:
    li T[-32], 0
    mv a0, T[-32]
    ret

---------------------------------ir after resolve phi end --------------------------------
hanoi Main()
hanoi do_liveness_analysis() done
hanoi Build() done
freeze reg MkWorklist insert T[-32]
freeze reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-27]
freeze reg MkWorklist insert T[-25]
freeze reg MkWorklist insert T[-22]
freeze reg MkWorklist insert T[-18]
simplify reg MkWorklist insert T[-17]
freeze reg MkWorklist insert T[-15]
freeze reg MkWorklist insert T[-12]
simplify reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
hanoi MkWorklist() done
hanoi Simplify()
hanoi Simplify()
hanoi Simplify()
hanoi Simplify()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Simplify()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Simplify()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi Coalesce()
hanoi AssignColors() done
replace regs

hanoi
after compute reg_used
after prologue
end of emitend
insert_tag:     j B2

insert_tag:     j B2

---------------------------------ir after resolve phi-------------------------------------
main:
B0:

B1:
    call getint
    mv T[-2], a0
    mv T[-17], T[-2]
    j B2

B2:
    li T[-4], 0
    sgt T[-5], T[-17], T[-4]
    beq x0, T[-5], B4
    j B3

B3:
    call getint
    mv T[-7], a0
    li T[-8], 1
    li T[-9], 2
    li T[-10], 3
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    mv a1, T[-7]
    mv a2, T[-8]
    mv a3, T[-9]
    mv a4, T[-10]
    call hanoi
    mv T[-6], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    li T[-12], 10
    mv a0, T[-12]
    call putch
    mv T[-11], a0
    li T[-14], 1
    sub T[-15], T[-17], T[-14]
    mv T[-17], T[-15]
    j B2

B4:
    li T[-16], 0
    mv a0, T[-16]
    ret

---------------------------------ir after resolve phi end --------------------------------
main Main()
main do_liveness_analysis() done
main Build() done
spill reg MkWorklist insert T[-17]
freeze reg MkWorklist insert T[-16]
simplify reg MkWorklist insert T[-15]
simplify reg MkWorklist insert T[-14]
freeze reg MkWorklist insert T[-12]
freeze reg MkWorklist insert T[-11]
freeze reg MkWorklist insert T[-10]
freeze reg MkWorklist insert T[-9]
freeze reg MkWorklist insert T[-8]
freeze reg MkWorklist insert T[-7]
freeze reg MkWorklist insert T[-6]
simplify reg MkWorklist insert T[-5]
simplify reg MkWorklist insert T[-4]
freeze reg MkWorklist insert T[-2]
main MkWorklist() done
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Simplify()
main Coalesce()
main Coalesce()
main Coalesce()
main Coalesce()
main AssignColors() done
replace regs

main
after compute reg_used
after prologue
end of emitend
