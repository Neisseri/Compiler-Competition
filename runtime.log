--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (decl 
                (varDecl 
                    (bType int) 
                    (varDef buf [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (number 
                                                (intConst 2))))))) ] [ 
                        (exp 
                            (addExp 
                                (mulExp 
                                    (unaryExp 
                                        (primaryExp 
                                            (number 
                                                (intConst 100))))))) ]) ;))) 
        (compUnitItem 
            (funcDef 
                (funcType void) merge_sort ( 
                (funcFParams 
                    (funcFParam 
                        (bType int) l) , 
                    (funcFParam 
                        (bType int) r)) ) 
                (block { 
                    (blockItem 
                        (stmt if ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal l))))) + 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 1))))))) >= 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal r)))))))))) ) 
                            (stmt return ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef mid = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp ( 
                                                                (exp 
                                                                    (addExp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal l))))) + 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal r)))))) )))) / 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 2))))))))) ;))) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp merge_sort ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal l))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal mid)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp merge_sort ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal mid))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal r)))))))) ))))) ;)) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (lVal l)))))))) , 
                                (varDef j = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (lVal mid)))))))) , 
                                (varDef k = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (lVal l)))))))) ;))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (lAndExp 
                                            (eqExp 
                                                (relExp 
                                                    (relExp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal i)))))) < 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal mid)))))))) && 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal j)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal r)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (relExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal buf [ 
                                                                                        (exp 
                                                                                            (addExp 
                                                                                                (mulExp 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (number 
                                                                                                                (intConst 0))))))) ] [ 
                                                                                        (exp 
                                                                                            (addExp 
                                                                                                (mulExp 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (lVal i)))))) ])))))) < 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal buf [ 
                                                                                    (exp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp 
                                                                                                    (primaryExp 
                                                                                                        (number 
                                                                                                            (intConst 0))))))) ] [ 
                                                                                    (exp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp 
                                                                                                    (primaryExp 
                                                                                                        (lVal j)))))) ])))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal buf [ 
                                                                (exp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (number 
                                                                                        (intConst 1))))))) ] [ 
                                                                (exp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal k)))))) ]) = 
                                                            (exp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal buf [ 
                                                                                    (exp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp 
                                                                                                    (primaryExp 
                                                                                                        (number 
                                                                                                            (intConst 0))))))) ] [ 
                                                                                    (exp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp 
                                                                                                    (primaryExp 
                                                                                                        (lVal i)))))) ])))))) ;)) 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal i) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal i))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) })) else 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal buf [ 
                                                                (exp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (number 
                                                                                        (intConst 1))))))) ] [ 
                                                                (exp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal k)))))) ]) = 
                                                            (exp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (lVal buf [ 
                                                                                    (exp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp 
                                                                                                    (primaryExp 
                                                                                                        (number 
                                                                                                            (intConst 0))))))) ] [ 
                                                                                    (exp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp 
                                                                                                    (primaryExp 
                                                                                                        (lVal j)))))) ])))))) ;)) 
                                                    (blockItem 
                                                        (stmt 
                                                            (lVal j) = 
                                                            (exp 
                                                                (addExp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal j))))) + 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 1))))))) ;)) })))) 
                                    (blockItem 
                                        (stmt 
                                            (lVal k) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal k))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) })))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal mid)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal buf [ 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 1))))))) ] [ 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal k)))))) ]) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal buf [ 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 0))))))) ] [ 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal i)))))) ])))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal i) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal k) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal k))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) })))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal j)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal r)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal buf [ 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 1))))))) ] [ 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal k)))))) ]) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal buf [ 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 0))))))) ] [ 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal j)))))) ])))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal j) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal j))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal k) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal k))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) })))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal l)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal r)))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal buf [ 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (number 
                                                                        (intConst 0))))))) ] [ 
                                                (exp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal l)))))) ]) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (lVal buf [ 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (number 
                                                                                            (intConst 1))))))) ] [ 
                                                                    (exp 
                                                                        (addExp 
                                                                            (mulExp 
                                                                                (unaryExp 
                                                                                    (primaryExp 
                                                                                        (lVal l)))))) ])))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal l) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal l))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) })))) }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef n = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp getarray ( 
                                                        (funcRParams 
                                                            (funcRParam 
                                                                (exp 
                                                                    (addExp 
                                                                        (mulExp 
                                                                            (unaryExp 
                                                                                (primaryExp 
                                                                                    (lVal buf [ 
                                                                                        (exp 
                                                                                            (addExp 
                                                                                                (mulExp 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (number 
                                                                                                                (intConst 0))))))) ])))))))) ))))))) ;))) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp merge_sort ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 0)))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal n)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putarray ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal n))))))) , 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal buf [ 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 0))))))) ])))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitVarDecl: int start
visitVarDecl: array dim_size=2
visitPrimaryExp_ number
visitPrimaryExp_ number
visitVarDecl: ident: buf
visitCompUnit: funcDef
construct funct block: merge_sort
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: mid
visitVarDecl: initVal
visitInit
visitPrimaryExp_ exp
visitPrimaryExp_ number
visitExprStmt
visitCall ident: merge_sort
visitFuncRParams
visitCall args_list size: 2
visitExprStmt
visitCall ident: merge_sort
visitFuncRParams
visitCall args_list size: 2
visitVarDecl: int start
visitVarDecl: ident: i
visitVarDecl: initVal
visitInit
visitVarDecl: ident: j
visitVarDecl: initVal
visitInit
visitVarDecl: ident: k
visitVarDecl: initVal
visitInit
visit block stmt
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visit block stmt
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visit block stmt
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visit block stmt
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visit block stmt
visitPrimaryExp_ number
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: n
visitVarDecl: initVal
visitInit
visitCall ident: getarray
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitExprStmt
visitCall ident: merge_sort
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 2
visitExprStmt
visitCall ident: putarray
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 2
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitVarDef int @buf
Info: var_def->indices->children.size() 2
Info: visitDims 2
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55c12cc212f0
Info: visitDims 100
Info: visitExpr100
Info: visitIntLiteralExpr100
ret->type 0x55c12cc21320
Info: visitFuncDefvoid @merge_sort(int @l, int @r)
Info: visitParamDefint @l
Info: visitParamDefint @r
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@l+1>=@r
Info: visitBinopExpr@l+1>=@r
Info: visitExpr@l+1
Info: visitBinopExpr@l+1
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc213a0
Info: visitExpr@r
Info: visitLvalExpr@r
Info: visitStatementReturn  nullptr_for_void_func
Info: visitReturnStmtReturn 0function has returnscope id1
Info: visitVarDef int @mid = @l+@r/2
Info: visitExpr@l+@r/2
Info: visitAssignmentExpr@l+@r/2
Info: visitExpr@l+@r/2
Info: visitBinopExpr@l+@r/2
Info: visitExpr@l+@r
Info: visitBinopExpr@l+@r
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitExpr@r
Info: visitLvalExpr@r
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55c12cc215c0
Info: visitStatementCall @merge_sort(@l, @mid)
Info: visitExprStmtCall @merge_sort(@l, @mid)
Info: visitExprCall @merge_sort(@l, @mid)
Info: visiCalltExprCall @merge_sort(@l, @mid)
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitExpr@mid
Info: visitLvalExpr@mid
Info: visitStatementCall @merge_sort(@mid, @r)
Info: visitExprStmtCall @merge_sort(@mid, @r)
Info: visitExprCall @merge_sort(@mid, @r)
Info: visiCalltExprCall @merge_sort(@mid, @r)
Info: visitExpr@mid
Info: visitLvalExpr@mid
Info: visitExpr@r
Info: visitLvalExpr@r
Info: visitVarDef int @i = @l
Info: visitExpr@l
Info: visitAssignmentExpr@l
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitVarDef int @j = @mid
Info: visitExpr@mid
Info: visitAssignmentExpr@mid
Info: visitExpr@mid
Info: visitLvalExpr@mid
Info: visitVarDef int @k = @l
Info: visitExpr@l
Info: visitAssignmentExpr@l
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitStatementWhile
Info: visitExpr@i<@mid&&@j<@r
Info: visitBinopExpr@i<@mid&&@j<@r
Info: visitExpr@i<@mid
Info: visitBinopExpr@i<@mid
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr@mid
Info: visitLvalExpr@mid
Info: visitExpr@j<@r
Info: visitBinopExpr@j<@r
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitExpr@r
Info: visitLvalExpr@r
Info: visitStatement
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr@buf[0][@i]<@buf[0][@j]
Info: visitBinopExpr@buf[0][@i]<@buf[0][@j]
Info: visitExpr@buf[0][@i]
Info: visitLvalExpr@buf[0][@i]
Info: lval->indices->children.size() 2
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc213d0
Info: visitDims @i
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr@buf[0][@j]
Info: visitLvalExpr@buf[0][@j]
Info: lval->indices->children.size() 2
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21640
Info: visitDims @j
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@buf[1][@k] = @buf[0][@i]
Info: visitAssignStmtAssign@buf[1][@k] = @buf[0][@i]
Info: visitExpr@buf[1][@k]
Info: visitLvalExpr@buf[1][@k]
Info: lval->indices->children.size() 2
Info: visitDims 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21900
Info: visitDims @k
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitAssignStmtint
Info: visitExpr@buf[0][@i]
Info: visitLvalExpr@buf[0][@i]
Info: lval->indices->children.size() 2
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21980
Info: visitDims @i
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitStatementAssign@i = @i+1
Info: visitAssignStmtAssign@i = @i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmtint
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc219b0
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@buf[1][@k] = @buf[0][@j]
Info: visitAssignStmtAssign@buf[1][@k] = @buf[0][@j]
Info: visitExpr@buf[1][@k]
Info: visitLvalExpr@buf[1][@k]
Info: lval->indices->children.size() 2
Info: visitDims 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc219e0
Info: visitDims @k
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitAssignStmtint
Info: visitExpr@buf[0][@j]
Info: visitLvalExpr@buf[0][@j]
Info: lval->indices->children.size() 2
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21a10
Info: visitDims @j
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitStatementAssign@j = @j+1
Info: visitAssignStmtAssign@j = @j+1
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitAssignStmtint
Info: visitExpr@j+1
Info: visitBinopExpr@j+1
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21a40
Info: visitStatementAssign@k = @k+1
Info: visitAssignStmtAssign@k = @k+1
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitAssignStmtint
Info: visitExpr@k+1
Info: visitBinopExpr@k+1
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21a70
Info: visitStatementWhile
Info: visitExpr@i<@mid
Info: visitBinopExpr@i<@mid
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr@mid
Info: visitLvalExpr@mid
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@buf[1][@k] = @buf[0][@i]
Info: visitAssignStmtAssign@buf[1][@k] = @buf[0][@i]
Info: visitExpr@buf[1][@k]
Info: visitLvalExpr@buf[1][@k]
Info: lval->indices->children.size() 2
Info: visitDims 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21aa0
Info: visitDims @k
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitAssignStmtint
Info: visitExpr@buf[0][@i]
Info: visitLvalExpr@buf[0][@i]
Info: lval->indices->children.size() 2
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21ad0
Info: visitDims @i
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitStatementAssign@i = @i+1
Info: visitAssignStmtAssign@i = @i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmtint
Info: visitExpr@i+1
Info: visitBinopExpr@i+1
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21b00
Info: visitStatementAssign@k = @k+1
Info: visitAssignStmtAssign@k = @k+1
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitAssignStmtint
Info: visitExpr@k+1
Info: visitBinopExpr@k+1
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21b30
Info: visitStatementWhile
Info: visitExpr@j<@r
Info: visitBinopExpr@j<@r
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitExpr@r
Info: visitLvalExpr@r
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@buf[1][@k] = @buf[0][@j]
Info: visitAssignStmtAssign@buf[1][@k] = @buf[0][@j]
Info: visitExpr@buf[1][@k]
Info: visitLvalExpr@buf[1][@k]
Info: lval->indices->children.size() 2
Info: visitDims 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21b60
Info: visitDims @k
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitAssignStmtint
Info: visitExpr@buf[0][@j]
Info: visitLvalExpr@buf[0][@j]
Info: lval->indices->children.size() 2
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21b90
Info: visitDims @j
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitStatementAssign@j = @j+1
Info: visitAssignStmtAssign@j = @j+1
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitAssignStmtint
Info: visitExpr@j+1
Info: visitBinopExpr@j+1
Info: visitExpr@j
Info: visitLvalExpr@j
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21bc0
Info: visitStatementAssign@k = @k+1
Info: visitAssignStmtAssign@k = @k+1
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitAssignStmtint
Info: visitExpr@k+1
Info: visitBinopExpr@k+1
Info: visitExpr@k
Info: visitLvalExpr@k
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21bf0
Info: visitStatementWhile
Info: visitExpr@l<@r
Info: visitBinopExpr@l<@r
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitExpr@r
Info: visitLvalExpr@r
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@buf[0][@l] = @buf[1][@l]
Info: visitAssignStmtAssign@buf[0][@l] = @buf[1][@l]
Info: visitExpr@buf[0][@l]
Info: visitLvalExpr@buf[0][@l]
Info: lval->indices->children.size() 2
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21c20
Info: visitDims @l
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitAssignStmtint
Info: visitExpr@buf[1][@l]
Info: visitLvalExpr@buf[1][@l]
Info: lval->indices->children.size() 2
Info: visitDims 1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21c50
Info: visitDims @l
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitStatementAssign@l = @l+1
Info: visitAssignStmtAssign@l = @l+1
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitAssignStmtint
Info: visitExpr@l+1
Info: visitBinopExpr@l+1
Info: visitExpr@l
Info: visitLvalExpr@l
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55c12cc21c80
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitVarDef int @n = Call @getarray(@buf[0])
Info: visitExprCall @getarray(@buf[0])
Info: visitAssignmentExprCall @getarray(@buf[0])
Info: visitExprCall @getarray(@buf[0])
Info: visiCalltExprCall @getarray(@buf[0])
Info: use of undeclared function getarray
Info: visitExpr@buf[0]
Info: visitLvalExpr@buf[0]
Info: lval->indices->children.size() 1
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21ce0
Info: expr_type is nullptr , its an array ,return
Info: visitStatementCall @merge_sort(0, @n)
Info: visitExprStmtCall @merge_sort(0, @n)
Info: visitExprCall @merge_sort(0, @n)
Info: visiCalltExprCall @merge_sort(0, @n)
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21cb0
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitStatementCall @putarray(@n, @buf[0])
Info: visitExprStmtCall @putarray(@n, @buf[0])
Info: visitExprCall @putarray(@n, @buf[0])
Info: visiCalltExprCall @putarray(@n, @buf[0])
Info: use of undeclared function putarray
Info: visitExpr@n
Info: visitLvalExpr@n
Info: visitExpr@buf[0]
Info: visitLvalExpr@buf[0]
Info: lval->indices->children.size() 1
Info: visitDims 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21d10
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55c12cc21d40
Info: visitReturnStmtReturn 0function has returnscope id13
ast: 
Program
  int @buf#0
  void @merge_sort(int @l#1, int @r#1)
    {
      If        @l#1+1>=@r#1
        Return 0
      int @mid#2 = @l#1+@r#1/2
      Call @merge_sort
        @l#1, @mid#2
      Call @merge_sort
        @mid#2, @r#1
      int @i#2 = @l#1
      int @j#2 = @mid#2
      int @k#2 = @l#1
      While        @i#2<@mid#2&&@j#2<@r#1
        {
          If            @buf#0[0][@i#2]<@buf#0[0][@j#2]
            {
              Assign@buf#0[1][@k#2] = @buf#0[0][@i#2]
              Assign@i#2 = @i#2+1
            }
          Else
            {
              Assign@buf#0[1][@k#2] = @buf#0[0][@j#2]
              Assign@j#2 = @j#2+1
            }
          Assign@k#2 = @k#2+1
        }
      While        @i#2<@mid#2
        {
          Assign@buf#0[1][@k#2] = @buf#0[0][@i#2]
          Assign@i#2 = @i#2+1
          Assign@k#2 = @k#2+1
        }
      While        @j#2<@r#1
        {
          Assign@buf#0[1][@k#2] = @buf#0[0][@j#2]
          Assign@j#2 = @j#2+1
          Assign@k#2 = @k#2+1
        }
      While        @l#1<@r#1
        {
          Assign@buf#0[0][@l#1] = @buf#0[1][@l#1]
          Assign@l#1 = @l#1+1
        }
    }
  int @main()
    {
      int @n#14 = Call @getarray(@buf#0[0])
      Call @merge_sort
        0, @n#14
      Call @putarray
        @n#14, @buf#0[0]
      Return 0
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visit decl global array
visitExpressionVal
visitExpressionVal
global array size: 200
visit decl global array done
visitFunction merge_sort
visitFunction param decl: l#1
visitFunction param decl: r#1
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue l#1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionLValue r#1
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpression
visitExpression
visitExpressionLValue l#1
visitExpression
visitExpressionLValue r#1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue l#1
visitExpression
visitExpressionLValue mid#2
visitStatement
visitExpression
visitExpression
visitExpressionLValue mid#2
visitExpression
visitExpressionLValue r#1
visitExpression
visitExpression
visitExpressionLValue l#1
visitExpression
visitExpression
visitExpressionLValue mid#2
visitExpression
visitExpression
visitExpressionLValue l#1
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionLValue i#2
visitExpression
visitExpressionLValue mid#2
visitExpression
visitExpression
visitExpressionLValue j#2
visitExpression
visitExpressionLValue r#1
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionLValue buf#0
visitIndex
visitExpression
visitExpressionLValue i#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionLValue buf#0
visitIndex
visitExpression
visitExpressionLValue j#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionLValue buf#0
visitIndex
visitExpression
visitExpressionLValue i#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionLValue k#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionLValue buf#0
visitIndex
visitExpression
visitExpressionLValue j#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionLValue k#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue j#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue k#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#2
visitExpression
visitExpressionLValue mid#2
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionLValue buf#0
visitIndex
visitExpression
visitExpressionLValue i#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionLValue k#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue k#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue j#2
visitExpression
visitExpressionLValue r#1
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionLValue buf#0
visitIndex
visitExpression
visitExpressionLValue j#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionLValue k#2
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue j#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue k#2
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue l#1
visitExpression
visitExpressionLValue r#1
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionLValue buf#0
visitIndex
visitExpression
visitExpressionLValue l#1
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitIndex
visitExpression
visitExpressionLValue l#1
visitIndex calc blocksize 1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue l#1
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function merge_sort has 201 regs
B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: 
B3:
  prev: B1 B4 
  succ: B5 
B4:
  prev: 
  succ: B3 
B5:
  prev: B3 B11 
  succ: B6 B7 
B6:
  prev: B5 
  succ: B8 
B7:
  prev: B5 
  succ: B12 
B8:
  prev: B6 
  succ: B9 B10 
B9:
  prev: B8 
  succ: B11 
B10:
  prev: B8 
  succ: B11 
B11:
  prev: B9 B10 
  succ: B5 
B12:
  prev: B7 B13 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B12 
B14:
  prev: B12 
  succ: B15 
B15:
  prev: B14 B16 
  succ: B16 B17 
B16:
  prev: B15 
  succ: B15 
B17:
  prev: B15 
  succ: B18 
B18:
  prev: B17 B19 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B18 
B20:
  prev: B18 
  succ: 

B0:
  prev: 
  succ: B1 
B1:
  prev: B0 
  succ: B2 B3 
B2:
  prev: B1 
  succ: 
B3:
  prev: B1 
  succ: B5 
B5:
  prev: B3 B11 
  succ: B6 B7 
B6:
  prev: B5 
  succ: B8 
B7:
  prev: B5 
  succ: B12 
B8:
  prev: B6 
  succ: B9 B10 
B9:
  prev: B8 
  succ: B11 
B10:
  prev: B8 
  succ: B11 
B11:
  prev: B9 B10 
  succ: B5 
B12:
  prev: B7 B13 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B12 
B14:
  prev: B12 
  succ: B15 
B15:
  prev: B14 B16 
  succ: B16 B17 
B16:
  prev: B15 
  succ: B15 
B17:
  prev: B15 
  succ: B18 
B18:
  prev: B17 B19 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B18 
B20:
  prev: B18 
  succ: 

entryB0
B1
B2
B3
B5
B6
B7
B8
B9
B10
B11
B12
B13
B14
B15
B16
B17
B18
B19
B20
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB5
reverse_postorderB7
reverse_postorderB12
reverse_postorderB14
reverse_postorderB15
reverse_postorderB17
reverse_postorderB18
reverse_postorderB20
reverse_postorderB19
reverse_postorderB16
reverse_postorderB13
reverse_postorderB6
reverse_postorderB8
reverse_postorderB10
reverse_postorderB9
reverse_postorderB11
reverse_postorderB2
reverse_postorderB0
reverse_postorderB1
reverse_postorderB3
reverse_postorderB5
reverse_postorderB7
reverse_postorderB12
reverse_postorderB14
reverse_postorderB15
reverse_postorderB17
reverse_postorderB18
reverse_postorderB20
reverse_postorderB19
reverse_postorderB16
reverse_postorderB13
reverse_postorderB6
reverse_postorderB8
reverse_postorderB10
reverse_postorderB9
reverse_postorderB11
reverse_postorderB2
B0:
  doms: B1 
  domed_by: B0 
B1:
  doms: B2 B3 
  domed_by: B0 B1 
B2:
  doms: 
  domed_by: B0 B1 B2 
B3:
  doms: B5 
  domed_by: B0 B1 B3 
B5:
  doms: B6 B7 
  domed_by: B0 B1 B3 B5 
B6:
  doms: B8 
  domed_by: B0 B1 B3 B5 B6 
B7:
  doms: B12 
  domed_by: B0 B1 B3 B5 B7 
B8:
  doms: B9 B10 B11 
  domed_by: B0 B1 B3 B5 B6 B8 
B9:
  doms: 
  domed_by: B0 B1 B3 B5 B6 B8 B9 
B10:
  doms: 
  domed_by: B0 B1 B3 B5 B6 B8 B10 
B11:
  doms: 
  domed_by: B0 B1 B3 B5 B6 B8 B11 
B12:
  doms: B13 B14 
  domed_by: B0 B1 B3 B5 B7 B12 
B13:
  doms: 
  domed_by: B0 B1 B3 B5 B7 B12 B13 
B14:
  doms: B15 
  domed_by: B0 B1 B3 B5 B7 B12 B14 
B15:
  doms: B16 B17 
  domed_by: B0 B1 B3 B5 B7 B12 B14 B15 
B16:
  doms: 
  domed_by: B0 B1 B3 B5 B7 B12 B14 B15 B16 
B17:
  doms: B18 
  domed_by: B0 B1 B3 B5 B7 B12 B14 B15 B17 
B18:
  doms: B19 B20 
  domed_by: B0 B1 B3 B5 B7 B12 B14 B15 B17 B18 
B19:
  doms: 
  domed_by: B0 B1 B3 B5 B7 B12 B14 B15 B17 B18 B19 
B20:
  doms: 
  domed_by: B0 B1 B3 B5 B7 B12 B14 B15 B17 B18 B20 

B0:
  DF: 
B1:
  DF: 
B2:
  DF: 
B3:
  DF: 
B5:
  DF: 
B6:
  DF: B5 
B7:
  DF: 
B8:
  DF: B5 
B9:
  DF: B11 
B10:
  DF: B11 
B11:
  DF: B5 
B12:
  DF: 
B13:
  DF: B12 
B14:
  DF: 
B15:
  DF: 
B16:
  DF: B15 
B17:
  DF: 
B18:
  DF: 
B19:
  DF: B18 
B20:
  DF: 

visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpression
visitExpressionLValue buf#0
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionLValue n#14
visitStatement
visitExpression
visitExpression
visitExpressionLValue n#14
visitExpression
visitExpressionLValue buf#0
visitIndex
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 20 regs
B21:
  prev: 
  succ: 
B22:
  prev: 
  succ: 

B21:
  prev: 
  succ: 

entryB21
reverse_postorderB21
B21:
  doms: 
  domed_by: B21 

B21:
  DF: 

ir:
; module
@buf#0 = global int [2,100], 800
define i32 @main(){
B21:
  %1 = alloca int, 4
  %3 = loadaddr @buf#0
  %4 = 4
  %5 = 0
  %6 = mul i32 %5, %4
  %7 = add i32 %3, %6
  %8 = load i32, ptr %7
  %2 = call i32 @getarray(i32 %8)
  store i32 %2, ptr %1
  %10 = 0
  %11 = load i32, ptr %1
  %9 = call@merge_sort(i32 %10, i32 %11)
  %13 = load i32, ptr %1
  %14 = loadaddr @buf#0
  %15 = 4
  %16 = 0
  %17 = mul i32 %16, %15
  %18 = add i32 %14, %17
  %19 = load i32, ptr %18
  %12 = call i32 @putarray(i32 %13, i32 %19)
  %20 = 0
  ret i32 %20

}
define void @merge_sort(i32, i32){
B0:
  %3 = alloca int, 4
  store i32 %1, ptr %3
  %4 = alloca int, 4
  store i32 %2, ptr %4
  br label B1

B1:
  %5 = load i32, ptr %3
  %6 = 1
  %7 = add i32 %5, %6
  %8 = load i32, ptr %4
  %9 = icmp sge i32 %7, %8
  br i32 %9, label B2, label B3

B2:
  %10 = 0
  ret i32 %10

B3:
  %11 = alloca int, 4
  %12 = load i32, ptr %3
  %13 = load i32, ptr %4
  %14 = add i32 %12, %13
  %15 = 2
  %16 = sdiv i32 %14, %15
  store i32 %16, ptr %11
  %18 = load i32, ptr %3
  %19 = load i32, ptr %11
  %17 = call i32 @merge_sort(i32 %18, i32 %19)
  %21 = load i32, ptr %11
  %22 = load i32, ptr %4
  %20 = call i32 @merge_sort(i32 %21, i32 %22)
  %23 = alloca int, 4
  %24 = load i32, ptr %3
  store i32 %24, ptr %23
  %25 = alloca int, 4
  %26 = load i32, ptr %11
  store i32 %26, ptr %25
  %27 = alloca int, 4
  %28 = load i32, ptr %3
  store i32 %28, ptr %27
  br label B5

B5:
  %29 = load i32, ptr %23
  %30 = load i32, ptr %11
  %31 = icmp slt i32 %29, %30
  %32 = load i32, ptr %25
  %33 = load i32, ptr %4
  %34 = icmp slt i32 %32, %33
  %35 = and i32 %31, %34
  br i32 %35, label B6, label B7

B6:
  br label B8

B7:
  br label B12

B8:
  %36 = loadaddr @buf#0
  %37 = 4
  %38 = load i32, ptr %23
  %39 = mul i32 %38, %37
  %40 = add i32 %36, %39
  %41 = 100
  %42 = mul i32 %37, %41
  %43 = 0
  %44 = mul i32 %43, %42
  %45 = add i32 %40, %44
  %46 = load i32, ptr %45
  %47 = loadaddr @buf#0
  %48 = 4
  %49 = load i32, ptr %25
  %50 = mul i32 %49, %48
  %51 = add i32 %47, %50
  %52 = 100
  %53 = mul i32 %48, %52
  %54 = 0
  %55 = mul i32 %54, %53
  %56 = add i32 %51, %55
  %57 = load i32, ptr %56
  %58 = icmp slt i32 %46, %57
  br i32 %58, label B9, label B10

B9:
  %59 = loadaddr @buf#0
  %60 = 4
  %61 = load i32, ptr %23
  %62 = mul i32 %61, %60
  %63 = add i32 %59, %62
  %64 = 100
  %65 = mul i32 %60, %64
  %66 = 0
  %67 = mul i32 %66, %65
  %68 = add i32 %63, %67
  %69 = load i32, ptr %68
  %70 = loadaddr @buf#0
  %71 = loadaddr @buf#0
  %72 = 4
  %73 = load i32, ptr %27
  %74 = mul i32 %73, %72
  %75 = add i32 %71, %74
  %76 = 100
  %77 = mul i32 %72, %76
  %78 = 1
  %79 = mul i32 %78, %77
  %80 = add i32 %75, %79
  store i32 %69, ptr %80
  %81 = load i32, ptr %23
  %82 = 1
  %83 = add i32 %81, %82
  store i32 %83, ptr %23
  br label B11

B10:
  %84 = loadaddr @buf#0
  %85 = 4
  %86 = load i32, ptr %25
  %87 = mul i32 %86, %85
  %88 = add i32 %84, %87
  %89 = 100
  %90 = mul i32 %85, %89
  %91 = 0
  %92 = mul i32 %91, %90
  %93 = add i32 %88, %92
  %94 = load i32, ptr %93
  %95 = loadaddr @buf#0
  %96 = loadaddr @buf#0
  %97 = 4
  %98 = load i32, ptr %27
  %99 = mul i32 %98, %97
  %100 = add i32 %96, %99
  %101 = 100
  %102 = mul i32 %97, %101
  %103 = 1
  %104 = mul i32 %103, %102
  %105 = add i32 %100, %104
  store i32 %94, ptr %105
  %106 = load i32, ptr %25
  %107 = 1
  %108 = add i32 %106, %107
  store i32 %108, ptr %25
  br label B11

B11:
  %109 = load i32, ptr %27
  %110 = 1
  %111 = add i32 %109, %110
  store i32 %111, ptr %27
  br label B5

B12:
  %112 = load i32, ptr %23
  %113 = load i32, ptr %11
  %114 = icmp slt i32 %112, %113
  br i32 %114, label B13, label B14

B13:
  %115 = loadaddr @buf#0
  %116 = 4
  %117 = load i32, ptr %23
  %118 = mul i32 %117, %116
  %119 = add i32 %115, %118
  %120 = 100
  %121 = mul i32 %116, %120
  %122 = 0
  %123 = mul i32 %122, %121
  %124 = add i32 %119, %123
  %125 = load i32, ptr %124
  %126 = loadaddr @buf#0
  %127 = loadaddr @buf#0
  %128 = 4
  %129 = load i32, ptr %27
  %130 = mul i32 %129, %128
  %131 = add i32 %127, %130
  %132 = 100
  %133 = mul i32 %128, %132
  %134 = 1
  %135 = mul i32 %134, %133
  %136 = add i32 %131, %135
  store i32 %125, ptr %136
  %137 = load i32, ptr %23
  %138 = 1
  %139 = add i32 %137, %138
  store i32 %139, ptr %23
  %140 = load i32, ptr %27
  %141 = 1
  %142 = add i32 %140, %141
  store i32 %142, ptr %27
  br label B12

B14:
  br label B15

B15:
  %143 = load i32, ptr %25
  %144 = load i32, ptr %4
  %145 = icmp slt i32 %143, %144
  br i32 %145, label B16, label B17

B16:
  %146 = loadaddr @buf#0
  %147 = 4
  %148 = load i32, ptr %25
  %149 = mul i32 %148, %147
  %150 = add i32 %146, %149
  %151 = 100
  %152 = mul i32 %147, %151
  %153 = 0
  %154 = mul i32 %153, %152
  %155 = add i32 %150, %154
  %156 = load i32, ptr %155
  %157 = loadaddr @buf#0
  %158 = loadaddr @buf#0
  %159 = 4
  %160 = load i32, ptr %27
  %161 = mul i32 %160, %159
  %162 = add i32 %158, %161
  %163 = 100
  %164 = mul i32 %159, %163
  %165 = 1
  %166 = mul i32 %165, %164
  %167 = add i32 %162, %166
  store i32 %156, ptr %167
  %168 = load i32, ptr %25
  %169 = 1
  %170 = add i32 %168, %169
  store i32 %170, ptr %25
  %171 = load i32, ptr %27
  %172 = 1
  %173 = add i32 %171, %172
  store i32 %173, ptr %27
  br label B15

B17:
  br label B18

B18:
  %174 = load i32, ptr %3
  %175 = load i32, ptr %4
  %176 = icmp slt i32 %174, %175
  br i32 %176, label B19, label B20

B19:
  %177 = loadaddr @buf#0
  %178 = 4
  %179 = load i32, ptr %3
  %180 = mul i32 %179, %178
  %181 = add i32 %177, %180
  %182 = 100
  %183 = mul i32 %178, %182
  %184 = 1
  %185 = mul i32 %184, %183
  %186 = add i32 %181, %185
  %187 = load i32, ptr %186
  %188 = loadaddr @buf#0
  %189 = loadaddr @buf#0
  %190 = 4
  %191 = load i32, ptr %3
  %192 = mul i32 %191, %190
  %193 = add i32 %189, %192
  %194 = 100
  %195 = mul i32 %190, %194
  %196 = 0
  %197 = mul i32 %196, %195
  %198 = add i32 %193, %197
  store i32 %187, ptr %198
  %199 = load i32, ptr %3
  %200 = 1
  %201 = add i32 %199, %200
  store i32 %201, ptr %3
  br label B18

B20:

}
--------------------------- building riscv ---------------------------
riscv: 
?
merge_sort
merge_sort
after compute reg_used
after prologue
end of emitend
main
main
after compute reg_used
after prologue
end of emitend
