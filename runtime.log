--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef c = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 0))))))))) ;))) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putint ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (lVal c)))))))) ))))) ;)) 
                    (blockItem 
                        (stmt 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp putint ( 
                                            (funcRParams 
                                                (funcRParam 
                                                    (exp 
                                                        (addExp 
                                                            (mulExp 
                                                                (unaryExp 
                                                                    (primaryExp 
                                                                        (number 
                                                                            (intConst 123))))))))) ))))) ;)) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: c
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitCall args_list size: 1
visitExprStmt
visitCall ident: putint
visitFuncRParams
visitPrimaryExp_ number
visitCall args_list size: 1
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefint @main()
Info: visitBlock
Info: visitVarDef int @c = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x563fd63c9e60
Info: visitStatementCall @putint(@c)
Info: visitExprCall @putint(@c)
Info: visiCalltExprCall @putint(@c)
Info: use of undeclared function putint
Info: visitExpr@c
Info: visitLvalExpr@c
Info: visitStatementCall @putint(123)
Info: visitExprCall @putint(123)
Info: visiCalltExprCall @putint(123)
Info: use of undeclared function putint
Info: visitExpr123
Info: visitIntLiteralExpr123
ret->type 0x563fd63ce790
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x563fd63cf560
ast: 
Program
  int @main()
    {
      int @c#2 = 0
      Call @putint(@c#2)
      Call @putint(123)
      Return 0
    }
End of Program
--------------------------- building ir ---------------------------
visitProgram
visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue
visitStatement
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 7 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

ir:
; module
define i32 @main(){
B0:
  %1 = alloca int, 4
  %2 = 0
  store i32 %2, ptr %1
  %4 = load i32, ptr %1
  %3 = call i32 @putint(i32 %4)
  %6 = 123
  %5 = call i32 @putint(i32 %6)
  %7 = 0
  ret i32 %7

}
--------------------------- building riscv ---------------------------
riscv: 
