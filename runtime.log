--------------------------- building ast ---------------------------
parse tree: 
(compUnit 
        (compUnitItem 
            (funcDef 
                (funcType void) init ( ) 
                (block { }))) 
        (compUnitItem 
            (funcDef 
                (funcType 
                    (bType int)) main ( ) 
                (block { 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef m) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef a) , 
                                (varDef b) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef flag = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 0))))))))) ;))) 
                    (blockItem 
                        (decl 
                            (varDecl 
                                (bType int) 
                                (varDef i = 
                                    (initVal 
                                        (exp 
                                            (addExp 
                                                (mulExp 
                                                    (unaryExp 
                                                        (primaryExp 
                                                            (number 
                                                                (intConst 0))))))))) ;))) 
                    (blockItem 
                        (stmt while ( 
                            (cond 
                                (lOrExp 
                                    (lAndExp 
                                        (eqExp 
                                            (relExp 
                                                (relExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i)))))) < 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 2))))))))))) ) 
                            (stmt 
                                (block { 
                                    (blockItem 
                                        (stmt 
                                            (lVal a) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 1))))))) ;)) 
                                    (blockItem 
                                        (stmt 
                                            (lVal b) = 
                                            (exp 
                                                (addExp 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 2))))))) ;)) 
                                    (blockItem 
                                        (stmt if ( 
                                            (cond 
                                                (lOrExp 
                                                    (lAndExp 
                                                        (eqExp 
                                                            (relExp 
                                                                (addExp 
                                                                    (mulExp 
                                                                        (unaryExp 
                                                                            (primaryExp 
                                                                                (number 
                                                                                    (intConst 0))))))))))) ) 
                                            (stmt 
                                                (block { 
                                                    (blockItem 
                                                        (decl 
                                                            (varDecl 
                                                                (bType int) 
                                                                (varDef loc = 
                                                                    (initVal 
                                                                        (exp 
                                                                            (addExp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (lVal a))))) + 
                                                                                (mulExp 
                                                                                    (unaryExp 
                                                                                        (primaryExp 
                                                                                            (lVal b)))))))) ;))) 
                                                    (blockItem 
                                                        (stmt if ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (lAndExp 
                                                                            (eqExp 
                                                                                (relExp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (number 
                                                                                                        (intConst 0))))))))) && 
                                                                        (eqExp 
                                                                            (relExp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 0))))))))))) ) 
                                                            (stmt 
                                                                (block { })))) 
                                                    (blockItem 
                                                        (stmt if ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (lAndExp 
                                                                            (eqExp 
                                                                                (relExp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (number 
                                                                                                        (intConst 0))))))))) && 
                                                                        (eqExp 
                                                                            (relExp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 0))))))))))) ) 
                                                            (stmt 
                                                                (block { 
                                                                    (blockItem 
                                                                        (stmt 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp init ( ))))) ;)) })))) 
                                                    (blockItem 
                                                        (stmt if ( 
                                                            (cond 
                                                                (lOrExp 
                                                                    (lAndExp 
                                                                        (lAndExp 
                                                                            (lAndExp 
                                                                                (eqExp 
                                                                                    (relExp 
                                                                                        (addExp 
                                                                                            (mulExp 
                                                                                                (unaryExp 
                                                                                                    (primaryExp 
                                                                                                        (number 
                                                                                                            (intConst 0))))))))) && 
                                                                            (eqExp 
                                                                                (relExp 
                                                                                    (addExp 
                                                                                        (mulExp 
                                                                                            (unaryExp 
                                                                                                (primaryExp 
                                                                                                    (number 
                                                                                                        (intConst 0))))))))) && 
                                                                        (eqExp 
                                                                            (relExp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 0))))))))))) ) 
                                                            (stmt 
                                                                (block { 
                                                                    (blockItem 
                                                                        (stmt 
                                                                            (lVal flag) = 
                                                                            (exp 
                                                                                (addExp 
                                                                                    (mulExp 
                                                                                        (unaryExp 
                                                                                            (primaryExp 
                                                                                                (number 
                                                                                                    (intConst 1))))))) ;)) 
                                                                    (blockItem 
                                                                        (decl 
                                                                            (varDecl 
                                                                                (bType int) 
                                                                                (varDef tmp = 
                                                                                    (initVal 
                                                                                        (exp 
                                                                                            (addExp 
                                                                                                (mulExp 
                                                                                                    (unaryExp 
                                                                                                        (primaryExp 
                                                                                                            (number 
                                                                                                                (intConst 1))))))))) ;))) })))) })))) 
                                    (blockItem 
                                        (stmt 
                                            (lVal i) = 
                                            (exp 
                                                (addExp 
                                                    (addExp 
                                                        (mulExp 
                                                            (unaryExp 
                                                                (primaryExp 
                                                                    (lVal i))))) + 
                                                    (mulExp 
                                                        (unaryExp 
                                                            (primaryExp 
                                                                (number 
                                                                    (intConst 2))))))) ;)) })))) 
                    (blockItem 
                        (stmt return 
                            (exp 
                                (addExp 
                                    (mulExp 
                                        (unaryExp 
                                            (primaryExp 
                                                (number 
                                                    (intConst 0))))))) ;)) }))) <EOF>)
visitCompUnit
visitCompUnit: funcDef
construct funct block: init
visitBlock done!
construct funct block done!
visitCompUnit: funcDef
construct funct block: main
visitVarDecl: int start
visitVarDecl: ident: m
visitVarDecl: int start
visitVarDecl: ident: a
visitVarDecl: ident: b
visitVarDecl: int start
visitVarDecl: ident: flag
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitVarDecl: int start
visitVarDecl: ident: i
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visitAssign done!
visitPrimaryExp_ number
visit block stmt
visitVarDecl: int start
visitVarDecl: ident: loc
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitBlock done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitExprStmt
visitCall ident: init
visitCall args_list size: 0
visitBlock done!
visitPrimaryExp_ number
visitPrimaryExp_ number
visitPrimaryExp_ number
visit block stmt
visitPrimaryExp_ number
visitAssign done!
visitVarDecl: int start
visitVarDecl: ident: tmp
visitVarDecl: initVal
visitInit
visitPrimaryExp_ number
visitBlock done!
visitBlock done!
visitPrimaryExp_ number
visitAssign done!
visitBlock done!
visitPrimaryExp_ number
visitBlock done!
construct funct block done!
visitCompUnit end create new program
visitCompUnit end create new program end
------------------------------type check------------------------------
Info: visitProgramProgram
Info: visitFuncDefvoid @init()
Info: visitBlock
Info: function init has no returnscope id1
Info: visitFuncDefi32 @main()
Info: visitBlock
Info: visitVarDef i32 @m
Info: visitVarDef i32 @a
Info: visitVarDef i32 @b
Info: visitVarDef i32 @flag = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa2210
Info: visitVarDef i32 @i = 0
Info: visitExpr0
Info: visitAssignmentExpr0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa2410
Info: visitStatementWhile
Info: visitExpr@i<2
Info: visitBinopExpr@i<2
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55f882fa2490
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@a = 1
Info: visitAssignStmtAssign@a = 1
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitAssignStmti32
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f882fa2140
Info: visitStatementAssign@b = 2
Info: visitAssignStmtAssign@b = 2
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitAssignStmti32
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55f882fa25b0
Info: visitStatementIfElse
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa25e0
Info: visitStatement
Info: visitBlock
Info: visitVarDef i32 @loc = @a+@b
Info: visitExpr@a+@b
Info: visitAssignmentExpr@a+@b
Info: visitExpr@a+@b
Info: visitBinopExpr@a+@b
Info: visitExpr@a
Info: visitLvalExpr@a
Info: visitExpr@b
Info: visitLvalExpr@b
Info: visitStatementIfElse
Info: visitExpr0&&0
Info: visitBinopExpr0&&0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa2660
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa2740
Info: visitStatement
Info: visitBlock
Info: visitStatementIfElse
Info: visitExpr0&&0
Info: visitBinopExpr0&&0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa27c0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa27f0
Info: visitStatement
Info: visitBlock
Info: visitStatementCall @init()
Info: visitExprStmtCall @init()
Info: visitExprCall @init()
Info: visiCalltExprCall @init()
Info: visitStatementIfElse
Info: visitExpr0&&0&&0
Info: visitBinopExpr0&&0&&0
Info: visitExpr0&&0
Info: visitBinopExpr0&&0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa2820
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa2850
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa2880
Info: visitStatement
Info: visitBlock
Info: visitStatementAssign@flag = 1
Info: visitAssignStmtAssign@flag = 1
Info: visitExpr@flag
Info: visitLvalExpr@flag
Info: visitAssignStmti32
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f882fa28b0
Info: visitVarDef i32 @tmp = 1
Info: visitExpr1
Info: visitAssignmentExpr1
Info: visitExpr1
Info: visitIntLiteralExpr1
ret->type 0x55f882fa28e0
Info: visitStatementAssign@i = @i+2
Info: visitAssignStmtAssign@i = @i+2
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitAssignStmti32
Info: visitExpr@i+2
Info: visitBinopExpr@i+2
Info: visitExpr@i
Info: visitLvalExpr@i
Info: visitExpr2
Info: visitIntLiteralExpr2
ret->type 0x55f882fa29c0
Info: visitStatementReturn 0
Info: visitExpr0
Info: visitIntLiteralExpr0
ret->type 0x55f882fa29f0
Info: visitReturnStmtReturn 0function has returnscope id3
ast: 
Program
  void @init()
    {
      Return 0
    }
  i32 @main()
    {
      i32 @m#4
      i32 @a#4
      i32 @b#4
      i32 @flag#4 = 0
      i32 @i#4 = 0
      While        @i#4<2
        {
          Assign@a#4 = 1
          Assign@b#4 = 2
          If            0
            {
              i32 @loc#7 = @a#4+@b#4
              If                0&&0
                {
                }
              If                0&&0
                {
                  Call @init                    
                }
              If                0&&0&&0
                {
                  Assign@flag#4 = 1
                  i32 @tmp#10 = 1
                }
            }
          Assign@i#4 = @i#4+2
        }
      Return 0
    }
End of Program
--------------------------- building ir_origin ---------------------------
visitProgram
visitFunction init
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function init has 1 regs
B0:
  prev: 
  succ: 
B1:
  prev: 
  succ: 

B0:
  prev: 
  succ: 

entryB0
reverse_postorderB0
B0:
  doms: 
  domed_by: B0 

B0:
  DF: 

visitFunction main
visitBlock 
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#4
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitExpression
visitExpression
visitExpression
visitExpressionLValue a#4
visitExpression
visitExpressionLValue b#4
visitStatement
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitStatement
visitExpression
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitBlock 
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitExpression
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpression
visitExpressionLValue i#4
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
visitStatement
visitExpression
visitExpressionintliteral
visitExpressionintliteral done
function main has 44 regs
B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B8 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 B29 
  succ: B3 
B9:
  prev: B7 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 
  succ: B12 
B12:
  prev: B10 B11 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B14 
B14:
  prev: B12 B13 
  succ: B15 
B15:
  prev: B14 
  succ: B16 B17 
B16:
  prev: B15 
  succ: B18 
B17:
  prev: B15 
  succ: B18 
B18:
  prev: B16 B17 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B20 
B20:
  prev: B18 B19 
  succ: B21 
B21:
  prev: B20 
  succ: B22 B23 
B22:
  prev: B21 
  succ: B24 
B23:
  prev: B21 
  succ: B24 
B24:
  prev: B22 B23 
  succ: B25 B26 
B25:
  prev: B24 
  succ: B27 
B26:
  prev: B24 
  succ: B27 
B27:
  prev: B25 B26 
  succ: B28 B29 
B28:
  prev: B27 
  succ: B29 
B29:
  prev: B27 B28 
  succ: B8 
B30:
  prev: 
  succ: 

B2:
  prev: 
  succ: B3 
B3:
  prev: B2 B8 
  succ: B4 B5 
B4:
  prev: B3 
  succ: B6 
B5:
  prev: B3 
  succ: 
B6:
  prev: B4 
  succ: B7 B8 
B7:
  prev: B6 
  succ: B9 
B8:
  prev: B6 B29 
  succ: B3 
B9:
  prev: B7 
  succ: B10 B11 
B10:
  prev: B9 
  succ: B12 
B11:
  prev: B9 
  succ: B12 
B12:
  prev: B10 B11 
  succ: B13 B14 
B13:
  prev: B12 
  succ: B14 
B14:
  prev: B12 B13 
  succ: B15 
B15:
  prev: B14 
  succ: B16 B17 
B16:
  prev: B15 
  succ: B18 
B17:
  prev: B15 
  succ: B18 
B18:
  prev: B16 B17 
  succ: B19 B20 
B19:
  prev: B18 
  succ: B20 
B20:
  prev: B18 B19 
  succ: B21 
B21:
  prev: B20 
  succ: B22 B23 
B22:
  prev: B21 
  succ: B24 
B23:
  prev: B21 
  succ: B24 
B24:
  prev: B22 B23 
  succ: B25 B26 
B25:
  prev: B24 
  succ: B27 
B26:
  prev: B24 
  succ: B27 
B27:
  prev: B25 B26 
  succ: B28 B29 
B28:
  prev: B27 
  succ: B29 
B29:
  prev: B27 B28 
  succ: B8 

entryB2
B3
B4
B5
B6
B7
B8
B9
B10
B11
B12
B13
B14
B15
B16
B17
B18
B19
B20
B21
B22
B23
B24
B25
B26
B27
B28
B29
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB7
reverse_postorderB9
reverse_postorderB11
reverse_postorderB10
reverse_postorderB12
reverse_postorderB13
reverse_postorderB14
reverse_postorderB15
reverse_postorderB17
reverse_postorderB16
reverse_postorderB18
reverse_postorderB19
reverse_postorderB20
reverse_postorderB21
reverse_postorderB23
reverse_postorderB22
reverse_postorderB24
reverse_postorderB26
reverse_postorderB25
reverse_postorderB27
reverse_postorderB28
reverse_postorderB29
reverse_postorderB8
reverse_postorderB2
reverse_postorderB3
reverse_postorderB5
reverse_postorderB4
reverse_postorderB6
reverse_postorderB7
reverse_postorderB9
reverse_postorderB11
reverse_postorderB10
reverse_postorderB12
reverse_postorderB13
reverse_postorderB14
reverse_postorderB15
reverse_postorderB17
reverse_postorderB16
reverse_postorderB18
reverse_postorderB19
reverse_postorderB20
reverse_postorderB21
reverse_postorderB23
reverse_postorderB22
reverse_postorderB24
reverse_postorderB26
reverse_postorderB25
reverse_postorderB27
reverse_postorderB28
reverse_postorderB29
reverse_postorderB8
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B3 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B8 func: main
compute_dom_fro bb: B12 func: main
compute_dom_fro bb: B12 func: main
compute_dom_fro bb: B14 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B18 func: main
compute_dom_fro bb: B20 func: main
compute_dom_fro bb: B24 func: main
compute_dom_fro bb: B24 func: main
compute_dom_fro bb: B27 func: main
compute_dom_fro bb: B27 func: main
compute_dom_fro bb: B29 func: main
B2:
  doms: B3 
  domed_by: B2 
B3:
  doms: B4 B5 
  domed_by: B2 B3 
B4:
  doms: B6 
  domed_by: B2 B3 B4 
B5:
  doms: 
  domed_by: B2 B3 B5 
B6:
  doms: B7 B8 
  domed_by: B2 B3 B4 B6 
B7:
  doms: B9 
  domed_by: B2 B3 B4 B6 B7 
B8:
  doms: 
  domed_by: B2 B3 B4 B6 B8 
B9:
  doms: B10 B11 B12 
  domed_by: B2 B3 B4 B6 B7 B9 
B10:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B10 
B11:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B11 
B12:
  doms: B13 B14 
  domed_by: B2 B3 B4 B6 B7 B9 B12 
B13:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B13 
B14:
  doms: B15 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 
B15:
  doms: B16 B17 B18 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 
B16:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B16 
B17:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B17 
B18:
  doms: B19 B20 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 
B19:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B19 
B20:
  doms: B21 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 
B21:
  doms: B22 B23 B24 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 B21 
B22:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 B21 B22 
B23:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 B21 B23 
B24:
  doms: B25 B26 B27 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 B21 B24 
B25:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 B21 B24 B25 
B26:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 B21 B24 B26 
B27:
  doms: B28 B29 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 B21 B24 B27 
B28:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 B21 B24 B27 B28 
B29:
  doms: 
  domed_by: B2 B3 B4 B6 B7 B9 B12 B14 B15 B18 B20 B21 B24 B27 B29 

B2:
  DF: 
B3:
  DF: 
B4:
  DF: B3 
B5:
  DF: 
B6:
  DF: B3 
B7:
  DF: B8 
B8:
  DF: B3 
B9:
  DF: B8 
B10:
  DF: B12 
B11:
  DF: B12 
B12:
  DF: B8 
B13:
  DF: B14 
B14:
  DF: B8 
B15:
  DF: B8 
B16:
  DF: B18 
B17:
  DF: B18 
B18:
  DF: B8 
B19:
  DF: B20 
B20:
  DF: B8 
B21:
  DF: B8 
B22:
  DF: B24 
B23:
  DF: B24 
B24:
  DF: B8 
B25:
  DF: B27 
B26:
  DF: B27 
B27:
  DF: B8 
B28:
  DF: B29 
B29:
  DF: B8 

ir_origin:
; module
define i32 @main(){
B2:
  %r1 = alloca i32, i32 4
  %r2 = alloca i32, i32 4
  %r3 = alloca i32, i32 4
  %r4 = alloca i32, i32 4
  %r5 = add i32 0, 0 ; loadint
  store i32 %r5, ptr %r4
  %r6 = alloca i32, i32 4
  %r7 = add i32 0, 0 ; loadint
  store i32 %r7, ptr %r6
  br label %B3

B3:
  %r8 = load i32, ptr %r6
  %r9 = add i32 0, 2 ; loadint
  %tmpcmp10 = icmp slt i32 %r8, %r9
  %r10 = zext i1 %tmpcmp10 to i32
  %tmpconbr10 = trunc i32 %r10 to i1
  br i1 %tmpconbr10, label %B4, label %B5

B4:
  %r11 = add i32 0, 1 ; loadint
  store i32 %r11, ptr %r2
  %r12 = add i32 0, 2 ; loadint
  store i32 %r12, ptr %r3
  br label %B6

B5:
  %r44 = add i32 0, 0 ; loadint
  ret i32 %r44

B6:
  %r13 = add i32 0, 0 ; loadint
  %tmpconbr13 = trunc i32 %r13 to i1
  br i1 %tmpconbr13, label %B7, label %B8

B7:
  %r14 = alloca i32, i32 4
  %r15 = load i32, ptr %r2
  %r16 = load i32, ptr %r3
  %r17 = add i32 %r15, %r16
  store i32 %r17, ptr %r14
  br label %B9

B8:
  %r41 = load i32, ptr %r6
  %r42 = add i32 0, 2 ; loadint
  %r43 = add i32 %r41, %r42
  store i32 %r43, ptr %r6
  br label %B3

B9:
  %r18 = alloca i32, i32 4
  %r19 = add i32 0, 0 ; loadint
  %tmpconbr19 = trunc i32 %r19 to i1
  br i1 %tmpconbr19, label %B10, label %B11

B10:
  %r20 = add i32 0, 0 ; loadint
  store i32 %r20, ptr %r18
  br label %B12

B11:
  %r21 = add i32 0, 0 ; loadint
  store i32 %r21, ptr %r18
  br label %B12

B12:
  %r22 = load i32, ptr %r18
  %tmpconbr22 = trunc i32 %r22 to i1
  br i1 %tmpconbr22, label %B13, label %B14

B13:
  br label %B14

B14:
  br label %B15

B15:
  %r23 = alloca i32, i32 4
  %r24 = add i32 0, 0 ; loadint
  %tmpconbr24 = trunc i32 %r24 to i1
  br i1 %tmpconbr24, label %B16, label %B17

B16:
  %r25 = add i32 0, 0 ; loadint
  store i32 %r25, ptr %r23
  br label %B18

B17:
  %r26 = add i32 0, 0 ; loadint
  store i32 %r26, ptr %r23
  br label %B18

B18:
  %r27 = load i32, ptr %r23
  %tmpconbr27 = trunc i32 %r27 to i1
  br i1 %tmpconbr27, label %B19, label %B20

B19:
  %r28 = call i32 @init()
  br label %B20

B20:
  br label %B21

B21:
  %r29 = alloca i32, i32 4
  %r30 = alloca i32, i32 4
  %r31 = add i32 0, 0 ; loadint
  %tmpconbr31 = trunc i32 %r31 to i1
  br i1 %tmpconbr31, label %B22, label %B23

B22:
  %r32 = add i32 0, 0 ; loadint
  store i32 %r32, ptr %r30
  br label %B24

B23:
  %r33 = add i32 0, 0 ; loadint
  store i32 %r33, ptr %r30
  br label %B24

B24:
  %r34 = load i32, ptr %r30
  %tmpconbr34 = trunc i32 %r34 to i1
  br i1 %tmpconbr34, label %B25, label %B26

B25:
  %r35 = add i32 0, 0 ; loadint
  store i32 %r35, ptr %r29
  br label %B27

B26:
  %r36 = add i32 0, 0 ; loadint
  store i32 %r36, ptr %r29
  br label %B27

B27:
  %r37 = load i32, ptr %r29
  %tmpconbr37 = trunc i32 %r37 to i1
  br i1 %tmpconbr37, label %B28, label %B29

B28:
  %r38 = add i32 0, 1 ; loadint
  store i32 %r38, ptr %r4
  %r39 = alloca i32, i32 4
  %r40 = add i32 0, 1 ; loadint
  store i32 %r40, ptr %r39
  br label %B29

B29:
  br label %B8

}
define i32 @init(){
B0:
  %r1 = add i32 0, 0 ; loadint
  ret i32 %r1

}
---------------------------------ir after mem2reg-------------------------------------
; module
define i32 @main(){
B2:
  %r5 = add i32 0, 0 ; loadint
  %r7 = add i32 0, 0 ; loadint
  br label %B3

B3:
  %r67 = phi i32 [ %r5, %B2 ], [ %r66, %B8 ]
  %r64 = phi i32 [ %r5, %B2 ], [ %r63, %B8 ]
  %r61 = phi i32 [ %r5, %B2 ], [ %r60, %B8 ]
  %r58 = phi i32 [ %r5, %B2 ], [ %r57, %B8 ]
  %r55 = phi i32 [ %r5, %B2 ], [ %r54, %B8 ]
  %r52 = phi i32 [ %r5, %B2 ], [ %r51, %B8 ]
  %r50 = phi i32 [ %r7, %B2 ], [ %r43, %B8 ]
  %r49 = phi i32 [ %r5, %B2 ], [ %r48, %B8 ]
  %r46 = phi i32 [ %r5, %B2 ], [ %r12, %B8 ]
  %r45 = phi i32 [ %r5, %B2 ], [ %r11, %B8 ]
  %r9 = add i32 0, 2 ; loadint
  %tmpcmp10 = icmp slt i32 %r50, %r9
  %r10 = zext i1 %tmpcmp10 to i32
  %tmpconbr10 = trunc i32 %r10 to i1
  br i1 %tmpconbr10, label %B4, label %B5

B4:
  %r11 = add i32 0, 1 ; loadint
  %r12 = add i32 0, 2 ; loadint
  br label %B6

B5:
  %r44 = add i32 0, 0 ; loadint
  ret i32 %r44

B6:
  %r13 = add i32 0, 0 ; loadint
  %tmpconbr13 = trunc i32 %r13 to i1
  br i1 %tmpconbr13, label %B7, label %B8

B7:
  %r17 = add i32 %r11, %r12
  br label %B9

B8:
  %r66 = phi i32 [ %r67, %B6 ], [ %r65, %B29 ]
  %r63 = phi i32 [ %r64, %B6 ], [ %r62, %B29 ]
  %r60 = phi i32 [ %r61, %B6 ], [ %r59, %B29 ]
  %r57 = phi i32 [ %r58, %B6 ], [ %r56, %B29 ]
  %r54 = phi i32 [ %r55, %B6 ], [ %r53, %B29 ]
  %r51 = phi i32 [ %r52, %B6 ], [ %r17, %B29 ]
  %r48 = phi i32 [ %r49, %B6 ], [ %r47, %B29 ]
  %r42 = add i32 0, 2 ; loadint
  %r43 = add i32 %r50, %r42
  br label %B3

B9:
  %r19 = add i32 0, 0 ; loadint
  %tmpconbr19 = trunc i32 %r19 to i1
  br i1 %tmpconbr19, label %B10, label %B11

B10:
  %r20 = add i32 0, 0 ; loadint
  br label %B12

B11:
  %r21 = add i32 0, 0 ; loadint
  br label %B12

B12:
  %r53 = phi i32 [ %r20, %B10 ], [ %r21, %B11 ]
  %tmpconbr53 = trunc i32 %r53 to i1
  br i1 %tmpconbr53, label %B13, label %B14

B13:
  br label %B14

B14:
  br label %B15

B15:
  %r24 = add i32 0, 0 ; loadint
  %tmpconbr24 = trunc i32 %r24 to i1
  br i1 %tmpconbr24, label %B16, label %B17

B16:
  %r25 = add i32 0, 0 ; loadint
  br label %B18

B17:
  %r26 = add i32 0, 0 ; loadint
  br label %B18

B18:
  %r56 = phi i32 [ %r25, %B16 ], [ %r26, %B17 ]
  %tmpconbr56 = trunc i32 %r56 to i1
  br i1 %tmpconbr56, label %B19, label %B20

B19:
  %r28 = call i32 @init()
  br label %B20

B20:
  br label %B21

B21:
  %r31 = add i32 0, 0 ; loadint
  %tmpconbr31 = trunc i32 %r31 to i1
  br i1 %tmpconbr31, label %B22, label %B23

B22:
  %r32 = add i32 0, 0 ; loadint
  br label %B24

B23:
  %r33 = add i32 0, 0 ; loadint
  br label %B24

B24:
  %r62 = phi i32 [ %r32, %B22 ], [ %r33, %B23 ]
  %tmpconbr62 = trunc i32 %r62 to i1
  br i1 %tmpconbr62, label %B25, label %B26

B25:
  %r35 = add i32 0, 0 ; loadint
  br label %B27

B26:
  %r36 = add i32 0, 0 ; loadint
  br label %B27

B27:
  %r59 = phi i32 [ %r35, %B25 ], [ %r36, %B26 ]
  %tmpconbr59 = trunc i32 %r59 to i1
  br i1 %tmpconbr59, label %B28, label %B29

B28:
  %r38 = add i32 0, 1 ; loadint
  %r40 = add i32 0, 1 ; loadint
  br label %B29

B29:
  %r65 = phi i32 [ %r67, %B27 ], [ %r40, %B28 ]
  %r47 = phi i32 [ %r49, %B27 ], [ %r38, %B28 ]
  br label %B8

}
define i32 @init(){
B0:
  %r1 = add i32 0, 0 ; loadint
  ret i32 %r1

}
---------------------------------ir -------------------------------------
; module
define i32 @main(){
B2:
  %r5 = add i32 0, 0 ; loadint
  %r7 = add i32 0, 0 ; loadint
  br label %B3

B3:
  %r67 = phi i32 [ %r5, %B2 ], [ %r66, %B8 ]
  %r64 = phi i32 [ %r5, %B2 ], [ %r63, %B8 ]
  %r61 = phi i32 [ %r5, %B2 ], [ %r60, %B8 ]
  %r58 = phi i32 [ %r5, %B2 ], [ %r57, %B8 ]
  %r55 = phi i32 [ %r5, %B2 ], [ %r54, %B8 ]
  %r52 = phi i32 [ %r5, %B2 ], [ %r51, %B8 ]
  %r50 = phi i32 [ %r7, %B2 ], [ %r43, %B8 ]
  %r49 = phi i32 [ %r5, %B2 ], [ %r48, %B8 ]
  %r46 = phi i32 [ %r5, %B2 ], [ %r12, %B8 ]
  %r45 = phi i32 [ %r5, %B2 ], [ %r11, %B8 ]
  %r9 = add i32 0, 2 ; loadint
  %tmpcmp10 = icmp slt i32 %r50, %r9
  %r10 = zext i1 %tmpcmp10 to i32
  %tmpconbr10 = trunc i32 %r10 to i1
  br i1 %tmpconbr10, label %B4, label %B5

B4:
  %r11 = add i32 0, 1 ; loadint
  %r12 = add i32 0, 2 ; loadint
  br label %B6

B5:
  %r44 = add i32 0, 0 ; loadint
  ret i32 %r44

B6:
  %r13 = add i32 0, 0 ; loadint
  %tmpconbr13 = trunc i32 %r13 to i1
  br i1 %tmpconbr13, label %B7, label %B8

B7:
  %r17 = add i32 %r11, %r12
  br label %B9

B8:
  %r66 = phi i32 [ %r67, %B6 ], [ %r65, %B29 ]
  %r63 = phi i32 [ %r64, %B6 ], [ %r62, %B29 ]
  %r60 = phi i32 [ %r61, %B6 ], [ %r59, %B29 ]
  %r57 = phi i32 [ %r58, %B6 ], [ %r56, %B29 ]
  %r54 = phi i32 [ %r55, %B6 ], [ %r53, %B29 ]
  %r51 = phi i32 [ %r52, %B6 ], [ %r17, %B29 ]
  %r48 = phi i32 [ %r49, %B6 ], [ %r47, %B29 ]
  %r42 = add i32 0, 2 ; loadint
  %r43 = add i32 %r50, %r42
  br label %B3

B9:
  %r19 = add i32 0, 0 ; loadint
  %tmpconbr19 = trunc i32 %r19 to i1
  br i1 %tmpconbr19, label %B10, label %B11

B10:
  %r20 = add i32 0, 0 ; loadint
  br label %B12

B11:
  %r21 = add i32 0, 0 ; loadint
  br label %B12

B12:
  %r53 = phi i32 [ %r20, %B10 ], [ %r21, %B11 ]
  %tmpconbr53 = trunc i32 %r53 to i1
  br i1 %tmpconbr53, label %B13, label %B14

B13:
  br label %B14

B14:
  br label %B15

B15:
  %r24 = add i32 0, 0 ; loadint
  %tmpconbr24 = trunc i32 %r24 to i1
  br i1 %tmpconbr24, label %B16, label %B17

B16:
  %r25 = add i32 0, 0 ; loadint
  br label %B18

B17:
  %r26 = add i32 0, 0 ; loadint
  br label %B18

B18:
  %r56 = phi i32 [ %r25, %B16 ], [ %r26, %B17 ]
  %tmpconbr56 = trunc i32 %r56 to i1
  br i1 %tmpconbr56, label %B19, label %B20

B19:
  %r28 = call i32 @init()
  br label %B20

B20:
  br label %B21

B21:
  %r31 = add i32 0, 0 ; loadint
  %tmpconbr31 = trunc i32 %r31 to i1
  br i1 %tmpconbr31, label %B22, label %B23

B22:
  %r32 = add i32 0, 0 ; loadint
  br label %B24

B23:
  %r33 = add i32 0, 0 ; loadint
  br label %B24

B24:
  %r62 = phi i32 [ %r32, %B22 ], [ %r33, %B23 ]
  %tmpconbr62 = trunc i32 %r62 to i1
  br i1 %tmpconbr62, label %B25, label %B26

B25:
  %r35 = add i32 0, 0 ; loadint
  br label %B27

B26:
  %r36 = add i32 0, 0 ; loadint
  br label %B27

B27:
  %r59 = phi i32 [ %r35, %B25 ], [ %r36, %B26 ]
  %tmpconbr59 = trunc i32 %r59 to i1
  br i1 %tmpconbr59, label %B28, label %B29

B28:
  %r38 = add i32 0, 1 ; loadint
  %r40 = add i32 0, 1 ; loadint
  br label %B29

B29:
  %r65 = phi i32 [ %r67, %B27 ], [ %r40, %B28 ]
  %r47 = phi i32 [ %r49, %B27 ], [ %r38, %B28 ]
  br label %B8

}
define i32 @init(){
B0:
  %r1 = add i32 0, 0 ; loadint
  ret i32 %r1

}
--------------------------- building riscv ---------------------------
riscv: 
T[-5] B1
T[-66] B7
T[-5] B1
T[-63] B7
T[-5] B1
T[-60] B7
T[-5] B1
T[-57] B7
T[-5] B1
T[-54] B7
T[-5] B1
T[-51] B7
T[-7] B1
T[-43] B7
T[-5] B1
T[-48] B7
T[-5] B1
T[-12] B7
T[-5] B1
T[-11] B7
T[-67] B5
T[-65] B28
T[-64] B5
T[-62] B28
T[-61] B5
T[-59] B28
T[-58] B5
T[-56] B28
T[-55] B5
T[-53] B28
T[-52] B5
T[-17] B28
T[-49] B5
T[-47] B28
T[-20] B9
T[-21] B10
T[-25] B15
T[-26] B16
T[-32] B21
T[-33] B22
T[-35] B24
T[-36] B25
T[-67] B26
T[-40] B27
T[-49] B26
T[-38] B27
    li T[-5], 0
    li T[-7], 0
    j B2
    phi T[-67] = T[-5] B1
[ T[-5], B1] T[-66] B7
[ T[-66], B7] 
    phi T[-64] = T[-5] B1
[ T[-5], B1] T[-63] B7
[ T[-63], B7] 
    phi T[-61] = T[-5] B1
[ T[-5], B1] T[-60] B7
[ T[-60], B7] 
    phi T[-58] = T[-5] B1
[ T[-5], B1] T[-57] B7
[ T[-57], B7] 
    phi T[-55] = T[-5] B1
[ T[-5], B1] T[-54] B7
[ T[-54], B7] 
    phi T[-52] = T[-5] B1
[ T[-5], B1] T[-51] B7
[ T[-51], B7] 
    phi T[-50] = T[-7] B1
[ T[-7], B1] T[-43] B7
[ T[-43], B7] 
    phi T[-49] = T[-5] B1
[ T[-5], B1] T[-48] B7
[ T[-48], B7] 
    phi T[-46] = T[-5] B1
[ T[-5], B1] T[-12] B7
[ T[-12], B7] 
    phi T[-45] = T[-5] B1
[ T[-5], B1] T[-11] B7
[ T[-11], B7] 
    li T[-9], 2
    slt T[-10], T[-50], T[-9]
    beq x0, T[-10], B4
    j B3
    li T[-11], 1
    li T[-12], 2
    j B5
    li T[-44], 0
    mv a0, T[-44]
    ret
    li T[-13], 0
    beq x0, T[-13], B7
    j B6
    add T[-17], T[-11], T[-12]
    j B8
    phi T[-66] = T[-67] B5
[ T[-67], B5] T[-65] B28
[ T[-65], B28] 
    phi T[-63] = T[-64] B5
[ T[-64], B5] T[-62] B28
[ T[-62], B28] 
    phi T[-60] = T[-61] B5
[ T[-61], B5] T[-59] B28
[ T[-59], B28] 
    phi T[-57] = T[-58] B5
[ T[-58], B5] T[-56] B28
[ T[-56], B28] 
    phi T[-54] = T[-55] B5
[ T[-55], B5] T[-53] B28
[ T[-53], B28] 
    phi T[-51] = T[-52] B5
[ T[-52], B5] T[-17] B28
[ T[-17], B28] 
    phi T[-48] = T[-49] B5
[ T[-49], B5] T[-47] B28
[ T[-47], B28] 
    li T[-42], 2
    add T[-43], T[-50], T[-42]
    j B2
    li T[-19], 0
    beq x0, T[-19], B10
    j B9
    li T[-20], 0
    j B11
    li T[-21], 0
    j B11
    phi T[-53] = T[-20] B9
[ T[-20], B9] T[-21] B10
[ T[-21], B10] 
    beq x0, T[-53], B13
    j B12
    j B13
    j B14
    li T[-24], 0
    beq x0, T[-24], B16
    j B15
    li T[-25], 0
    j B17
    li T[-26], 0
    j B17
    phi T[-56] = T[-25] B15
[ T[-25], B15] T[-26] B16
[ T[-26], B16] 
    beq x0, T[-56], B19
    j B18
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    call init
    mv T[-28], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B19
    j B20
    li T[-31], 0
    beq x0, T[-31], B22
    j B21
    li T[-32], 0
    j B23
    li T[-33], 0
    j B23
    phi T[-62] = T[-32] B21
[ T[-32], B21] T[-33] B22
[ T[-33], B22] 
    beq x0, T[-62], B25
    j B24
    li T[-35], 0
    j B26
    li T[-36], 0
    j B26
    phi T[-59] = T[-35] B24
[ T[-35], B24] T[-36] B25
[ T[-36], B25] 
    beq x0, T[-59], B28
    j B27
    li T[-38], 1
    li T[-40], 1
    j B28
    phi T[-65] = T[-67] B26
[ T[-67], B26] T[-40] B27
[ T[-40], B27] 
    phi T[-47] = T[-49] B26
[ T[-49], B26] T[-38] B27
[ T[-38], B27] 
    j B7
    li T[-1], 0
    mv a0, T[-1]
    ret
?
---------------------------------ir after resolve phi-------------------------------------
init:
B29:

B30:
    li T[-1], 0
    mv a0, T[-1]
    ret

---------------------------------ir after resolve phi end --------------------------------
init Main()
init do_liveness_analysis() done
init Build() done
freeze reg MkWorklist insert T[-1]
init MkWorklist() done
init Coalesce()
init AssignColors() done
replace regs

init
after compute reg_used
after prologue
end of emitend
insert_tag:     j B28

insert_tag:     j B28

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B2

insert_tag:     j B6

    beq x0, T[-13], B7
insert_tag: branch     beq x0, T[-13], B7

insert_tag:     j B6

    beq x0, T[-13], B7
insert_tag: branch     beq x0, T[-13], B7

insert_tag:     j B6

    beq x0, T[-13], B7
insert_tag: branch     beq x0, T[-13], B7

insert_tag:     j B6

    beq x0, T[-13], B7
insert_tag: branch     beq x0, T[-13], B7

insert_tag:     j B6

    beq x0, T[-13], B7
insert_tag: branch     beq x0, T[-13], B7

insert_tag:     j B6

    beq x0, T[-13], B7
insert_tag: branch     beq x0, T[-13], B7

insert_tag:     j B6

    beq x0, T[-13], B7
insert_tag: branch     beq x0, T[-13], B7

insert_tag:     j B23

insert_tag:     j B11

insert_tag:     j B26

insert_tag:     j B11

insert_tag:     j B27

    beq x0, T[-59], B28
insert_tag:     j B27

    beq x0, T[-59], B28
insert_tag: branch     beq x0, T[-59], B28

insert_tag:     j B7

insert_tag:     j B7

insert_tag:     j B7

insert_tag:     j B7

insert_tag:     j B7

insert_tag:     j B7

insert_tag:     j B7

insert_tag:     j B17

insert_tag:     j B17

insert_tag:     j B23

insert_tag:     j B26

---------------------------------ir after resolve phi-------------------------------------
main:
B0:

B1:
    li T[-5], 0
    li T[-7], 0
    mv T[-67], T[-5]
    mv T[-64], T[-5]
    mv T[-61], T[-5]
    mv T[-58], T[-5]
    mv T[-55], T[-5]
    mv T[-52], T[-5]
    mv T[-50], T[-7]
    mv T[-49], T[-5]
    mv T[-46], T[-5]
    mv T[-45], T[-5]
    j B2

B2:
    li T[-9], 2
    slt T[-10], T[-50], T[-9]
    beq x0, T[-10], B4
    j B3

B3:
    li T[-11], 1
    li T[-12], 2
    j B5

B4:
    li T[-44], 0
    mv a0, T[-44]
    ret

B5:
    li T[-13], 0
    mv T[-66], T[-67]
    mv T[-63], T[-64]
    mv T[-60], T[-61]
    mv T[-57], T[-58]
    mv T[-54], T[-55]
    mv T[-51], T[-52]
    mv T[-48], T[-49]
    beq x0, T[-13], B7
    j B6

B6:
    add T[-17], T[-11], T[-12]
    j B8

B7:
    li T[-42], 2
    add T[-43], T[-50], T[-42]
    mv T[-67], T[-66]
    mv T[-64], T[-63]
    mv T[-61], T[-60]
    mv T[-58], T[-57]
    mv T[-55], T[-54]
    mv T[-52], T[-51]
    mv T[-50], T[-43]
    mv T[-49], T[-48]
    mv T[-46], T[-12]
    mv T[-45], T[-11]
    j B2

B8:
    li T[-19], 0
    beq x0, T[-19], B10
    j B9

B9:
    li T[-20], 0
    mv T[-53], T[-20]
    j B11

B10:
    li T[-21], 0
    mv T[-53], T[-21]
    j B11

B11:
    beq x0, T[-53], B13
    j B12

B12:
    j B13

B13:
    j B14

B14:
    li T[-24], 0
    beq x0, T[-24], B16
    j B15

B15:
    li T[-25], 0
    mv T[-56], T[-25]
    j B17

B16:
    li T[-26], 0
    mv T[-56], T[-26]
    j B17

B17:
    beq x0, T[-56], B19
    j B18

B18:
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    call init
    mv T[-28], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B19

B19:
    j B20

B20:
    li T[-31], 0
    beq x0, T[-31], B22
    j B21

B21:
    li T[-32], 0
    mv T[-62], T[-32]
    j B23

B22:
    li T[-33], 0
    mv T[-62], T[-33]
    j B23

B23:
    beq x0, T[-62], B25
    j B24

B24:
    li T[-35], 0
    mv T[-59], T[-35]
    j B26

B25:
    li T[-36], 0
    mv T[-59], T[-36]
    j B26

B26:
    mv T[-65], T[-67]
    mv T[-47], T[-49]
    beq x0, T[-59], B28
    j B27

B27:
    li T[-38], 1
    li T[-40], 1
    mv T[-65], T[-40]
    mv T[-47], T[-38]
    j B28

B28:
    mv T[-66], T[-65]
    mv T[-63], T[-62]
    mv T[-60], T[-59]
    mv T[-57], T[-56]
    mv T[-54], T[-53]
    mv T[-51], T[-17]
    mv T[-48], T[-47]
    j B7

---------------------------------ir after resolve phi end --------------------------------
main Main()
main do_liveness_analysis() done
main Build() done
spill reg MkWorklist insert T[-67]
spill reg MkWorklist insert T[-66]
spill reg MkWorklist insert T[-65]
spill reg MkWorklist insert T[-64]
spill reg MkWorklist insert T[-63]
spill reg MkWorklist insert T[-62]
spill reg MkWorklist insert T[-61]
spill reg MkWorklist insert T[-60]
spill reg MkWorklist insert T[-59]
spill reg MkWorklist insert T[-58]
spill reg MkWorklist insert T[-57]
spill reg MkWorklist insert T[-56]
spill reg MkWorklist insert T[-55]
spill reg MkWorklist insert T[-54]
spill reg MkWorklist insert T[-53]
spill reg MkWorklist insert T[-52]
spill reg MkWorklist insert T[-51]
spill reg MkWorklist insert T[-50]
spill reg MkWorklist insert T[-49]
spill reg MkWorklist insert T[-48]
spill reg MkWorklist insert T[-47]
spill reg MkWorklist insert T[-46]
simplify reg MkWorklist insert T[-45]
freeze reg MkWorklist insert T[-44]
spill reg MkWorklist insert T[-43]
spill reg MkWorklist insert T[-42]
simplify reg MkWorklist insert T[-40]
spill reg MkWorklist insert T[-38]
simplify reg MkWorklist insert T[-36]
simplify reg MkWorklist insert T[-35]
simplify reg MkWorklist insert T[-33]
simplify reg MkWorklist insert T[-32]
simplify reg MkWorklist insert T[-31]
freeze reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
simplify reg MkWorklist insert T[-24]
simplify reg MkWorklist insert T[-21]
simplify reg MkWorklist insert T[-20]
simplify reg MkWorklist insert T[-19]
spill reg MkWorklist insert T[-17]
spill reg MkWorklist insert T[-13]
spill reg MkWorklist insert T[-12]
spill reg MkWorklist insert T[-11]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-7]
spill reg MkWorklist insert T[-5]
main MkWorklist() done
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Coalesce()
main Coalesce()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main AssignColors() done
main RewriteProgram() done
    li T[-5], 0
    li T[-7], 0
    mv T[-67], T[-5]
    mv T[-64], T[-5]
    mv T[-61], T[-5]
    mv T[-58], T[-5]
    mv T[-55], T[-5]
    mv T[-52], T[-5]
    mv T[-50], T[-7]
    mv T[-49], T[-5]
    mv T[-46], T[-5]
    mv T[-45], T[-5]
    j B2
    li T[-9], 2
    slt T[-10], T[-50], T[-9]
    beq x0, T[-10], B4
    j B3
    li T[-48], 1
    sw T[-48], 112(sp)
    li T[-45], 2
    sw T[-45], 108(sp)
    j B5
    li T[-44], 0
    mv a0, T[-44]
    ret
    li T[-13], 0
    mv T[-66], T[-67]
    mv T[-63], T[-64]
    mv T[-60], T[-61]
    mv T[-57], T[-58]
    mv T[-54], T[-55]
    mv T[-51], T[-52]
    mv T[-48], T[-49]
    beq x0, T[-13], B7
    j B6
    lw T[-46], 108(sp)
    lw T[-49], 112(sp)
    add T[-17], T[-49], T[-46]
    j B8
    li T[-42], 2
    add T[-43], T[-50], T[-42]
    mv T[-67], T[-66]
    mv T[-64], T[-63]
    mv T[-61], T[-60]
    mv T[-58], T[-57]
    mv T[-55], T[-54]
    mv T[-52], T[-51]
    mv T[-50], T[-43]
    mv T[-49], T[-48]
    lw T[-47], 108(sp)
    mv T[-46], T[-47]
    lw T[-50], 112(sp)
    mv T[-45], T[-50]
    j B2
    li T[-19], 0
    beq x0, T[-19], B10
    j B9
    li T[-20], 0
    mv T[-53], T[-20]
    j B11
    li T[-21], 0
    mv T[-53], T[-21]
    j B11
    beq x0, T[-53], B13
    j B12
    j B13
    j B14
    li T[-24], 0
    beq x0, T[-24], B16
    j B15
    li T[-25], 0
    mv T[-56], T[-25]
    j B17
    li T[-26], 0
    mv T[-56], T[-26]
    j B17
    beq x0, T[-56], B19
    j B18
    sw t0, 48(sp)
    sw t1, 52(sp)
    sw t2, 56(sp)
    sw a0, 60(sp)
    sw a1, 64(sp)
    sw a2, 68(sp)
    sw a3, 72(sp)
    sw a4, 76(sp)
    sw a5, 80(sp)
    sw a6, 84(sp)
    sw a7, 88(sp)
    sw t3, 92(sp)
    sw t4, 96(sp)
    sw t5, 100(sp)
    sw t6, 104(sp)
    call init
    mv T[-28], a0
    lw t0, 48(sp)
    lw t1, 52(sp)
    lw t2, 56(sp)
    lw a0, 60(sp)
    lw a1, 64(sp)
    lw a2, 68(sp)
    lw a3, 72(sp)
    lw a4, 76(sp)
    lw a5, 80(sp)
    lw a6, 84(sp)
    lw a7, 88(sp)
    lw t3, 92(sp)
    lw t4, 96(sp)
    lw t5, 100(sp)
    lw t6, 104(sp)
    j B19
    j B20
    li T[-31], 0
    beq x0, T[-31], B22
    j B21
    li T[-32], 0
    mv T[-62], T[-32]
    j B23
    li T[-33], 0
    mv T[-62], T[-33]
    j B23
    beq x0, T[-62], B25
    j B24
    li T[-35], 0
    mv T[-59], T[-35]
    j B26
    li T[-36], 0
    mv T[-59], T[-36]
    j B26
    mv T[-65], T[-67]
    mv T[-47], T[-49]
    beq x0, T[-59], B28
    j B27
    li T[-38], 1
    li T[-40], 1
    mv T[-65], T[-40]
    mv T[-47], T[-38]
    j B28
    mv T[-66], T[-65]
    mv T[-63], T[-62]
    mv T[-60], T[-59]
    mv T[-57], T[-56]
    mv T[-54], T[-53]
    mv T[-51], T[-17]
    mv T[-48], T[-47]
    j B7
main Main()
main do_liveness_analysis() done
main Build() done
spill reg MkWorklist insert T[-67]
spill reg MkWorklist insert T[-66]
simplify reg MkWorklist insert T[-65]
spill reg MkWorklist insert T[-64]
spill reg MkWorklist insert T[-63]
spill reg MkWorklist insert T[-62]
spill reg MkWorklist insert T[-61]
spill reg MkWorklist insert T[-60]
spill reg MkWorklist insert T[-59]
spill reg MkWorklist insert T[-58]
spill reg MkWorklist insert T[-57]
spill reg MkWorklist insert T[-56]
spill reg MkWorklist insert T[-55]
spill reg MkWorklist insert T[-54]
spill reg MkWorklist insert T[-53]
spill reg MkWorklist insert T[-52]
spill reg MkWorklist insert T[-51]
spill reg MkWorklist insert T[-50]
spill reg MkWorklist insert T[-49]
spill reg MkWorklist insert T[-48]
spill reg MkWorklist insert T[-47]
simplify reg MkWorklist insert T[-46]
simplify reg MkWorklist insert T[-45]
freeze reg MkWorklist insert T[-44]
spill reg MkWorklist insert T[-43]
simplify reg MkWorklist insert T[-42]
simplify reg MkWorklist insert T[-40]
simplify reg MkWorklist insert T[-38]
simplify reg MkWorklist insert T[-36]
simplify reg MkWorklist insert T[-35]
simplify reg MkWorklist insert T[-33]
simplify reg MkWorklist insert T[-32]
simplify reg MkWorklist insert T[-31]
freeze reg MkWorklist insert T[-28]
simplify reg MkWorklist insert T[-26]
simplify reg MkWorklist insert T[-25]
simplify reg MkWorklist insert T[-24]
simplify reg MkWorklist insert T[-21]
simplify reg MkWorklist insert T[-20]
simplify reg MkWorklist insert T[-19]
spill reg MkWorklist insert T[-17]
spill reg MkWorklist insert T[-13]
simplify reg MkWorklist insert T[-10]
simplify reg MkWorklist insert T[-9]
simplify reg MkWorklist insert T[-7]
spill reg MkWorklist insert T[-5]
main MkWorklist() done
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Coalesce()
main Coalesce()
main Simplify()
main Simplify()
main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main SelectSpill()
select spill entry

main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main Simplify()
main AssignColors() done
replace regs

replace regs

main
after compute reg_used
after prologue
end of emitend
